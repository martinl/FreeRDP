diff -urN channels/audin/client/oss/audin_oss.c ../../informatimago/FreeRDP/channels/audin/client/oss/audin_oss.c
--- channels/audin/client/oss/audin_oss.c	2019-07-25 19:50:58.177884113 +0300
+++ ../../informatimago/FreeRDP/channels/audin/client/oss/audin_oss.c	2019-07-25 20:11:22.267954419 +0300
@@ -72,7 +72,7 @@
 	if (_error != 0)               \
 		WLog_ERR(TAG, "%s: %i - %s\n", _text, _error, strerror(_error));
 
-static UINT32 audin_oss_get_format(const AUDIO_FORMAT* format)
+static int audin_oss_get_format(const AUDIO_FORMAT* format)
 {
 	switch (format->wFormatTag)
 	{
@@ -148,7 +148,7 @@
 	char mixer_name[PATH_MAX] = "/dev/mixer";
 	int pcm_handle = -1, mixer_handle;
 	BYTE* buffer = NULL;
-	unsigned long tmp;
+	int tmp;
 	size_t buffer_size;
 	AudinOSSDevice* oss = (AudinOSSDevice*)arg;
 	UINT error = 0;
@@ -242,7 +242,6 @@
 
 	while (1)
 	{
-		SSIZE_T stmp;
 		status = WaitForSingleObject(oss->stopEvent, 0);
 
 		if (status == WAIT_FAILED)
@@ -255,16 +254,16 @@
 		if (status == WAIT_OBJECT_0)
 			break;
 
-		stmp = read(pcm_handle, buffer, buffer_size);
+		tmp = read(pcm_handle, buffer, buffer_size);
 
 		/* Error happen. */
-		if (stmp < 0)
+		if (tmp < 0)
 		{
 			OSS_LOG_ERR("read() error", errno);
 			continue;
 		}
 
-		if ((size_t)stmp < buffer_size) /* Not enouth data. */
+		if (tmp < buffer_size) /* Not enouth data. */
 			continue;
 
 		if ((error = oss->receive(&oss->format, buffer, buffer_size, oss->user_data)))
@@ -276,7 +275,7 @@
 
 err_out:
 
-	if (error && oss && oss->rdpcontext)
+	if (error && oss->rdpcontext)
 		setChannelError(oss->rdpcontext, error, "audin_oss_thread_func reported an error");
 
 	if (pcm_handle != -1)
@@ -361,7 +360,7 @@
 static UINT audin_oss_free(IAudinDevice* device)
 {
 	AudinOSSDevice* oss = (AudinOSSDevice*)device;
-	UINT error;
+	int error;
 
 	if (device == NULL)
 		return ERROR_INVALID_PARAMETER;
@@ -427,7 +426,7 @@
 					return CHANNEL_RC_NULL_DATA;
 				}
 
-				oss->dev_unit = (INT32)val;
+				oss->dev_unit = val;
 			}
 
 			if (oss->dev_unit < 0 || *eptr != '\0')
diff -urN channels/audin/client/winmm/audin_winmm.c ../../informatimago/FreeRDP/channels/audin/client/winmm/audin_winmm.c
--- channels/audin/client/winmm/audin_winmm.c	2019-07-25 19:50:58.201884232 +0300
+++ ../../informatimago/FreeRDP/channels/audin/client/winmm/audin_winmm.c	2019-07-25 20:11:22.291954537 +0300
@@ -27,8 +27,8 @@
 #include <stdlib.h>
 #include <string.h>
 
-#include <windows.h>
-#include <mmsystem.h>
+#include <Windows.h>
+#include <MMSystem.h>
 
 #include <winpr/crt.h>
 #include <winpr/cmdline.h>
diff -urN channels/client/addin.c ../../informatimago/FreeRDP/channels/client/addin.c
--- channels/client/addin.c	2019-07-25 19:50:58.213884292 +0300
+++ ../../informatimago/FreeRDP/channels/client/addin.c	2019-07-25 20:11:22.303954597 +0300
@@ -84,9 +84,8 @@
 
 extern const STATIC_ADDIN_TABLE CLIENT_STATIC_ADDIN_TABLE[];
 
-static FREERDP_ADDIN** freerdp_channels_list_client_static_addins(LPCSTR pszName,
-                                                                  LPCSTR pszSubsystem,
-                                                                  LPCSTR pszType, DWORD dwFlags)
+FREERDP_ADDIN** freerdp_channels_list_client_static_addins(LPSTR pszName, LPSTR pszSubsystem,
+                                                           LPSTR pszType, DWORD dwFlags)
 {
 	size_t i, j;
 	DWORD nAddins;
@@ -147,8 +146,8 @@
 	return NULL;
 }
 
-static FREERDP_ADDIN** freerdp_channels_list_dynamic_addins(LPCSTR pszName, LPCSTR pszSubsystem,
-                                                            LPCSTR pszType, DWORD dwFlags)
+FREERDP_ADDIN** freerdp_channels_list_dynamic_addins(LPSTR pszName, LPSTR pszSubsystem,
+                                                     LPSTR pszType, DWORD dwFlags)
 {
 	int index;
 	int nDashes;
@@ -304,7 +303,7 @@
 	return NULL;
 }
 
-FREERDP_ADDIN** freerdp_channels_list_addins(LPCSTR pszName, LPCSTR pszSubsystem, LPCSTR pszType,
+FREERDP_ADDIN** freerdp_channels_list_addins(LPSTR pszName, LPSTR pszSubsystem, LPSTR pszType,
                                              DWORD dwFlags)
 {
 	if (dwFlags & FREERDP_ADDIN_STATIC)
@@ -317,7 +316,7 @@
 
 void freerdp_channels_addin_list_free(FREERDP_ADDIN** ppAddins)
 {
-	size_t index;
+	int index;
 
 	if (!ppAddins)
 		return;
@@ -346,8 +345,8 @@
 	return FALSE;
 }
 
-PVIRTUALCHANNELENTRY freerdp_channels_load_static_addin_entry(LPCSTR pszName, LPCSTR pszSubsystem,
-                                                              LPCSTR pszType, DWORD dwFlags)
+PVIRTUALCHANNELENTRY freerdp_channels_load_static_addin_entry(LPCSTR pszName, LPSTR pszSubsystem,
+                                                              LPSTR pszType, DWORD dwFlags)
 {
 	int i, j;
 	STATIC_SUBSYSTEM_ENTRY* subsystems;
diff -urN channels/client/tables.c ../../informatimago/FreeRDP/channels/client/tables.c
--- channels/client/tables.c	2019-07-25 20:17:16.569711385 +0300
+++ ../../informatimago/FreeRDP/channels/client/tables.c	2019-07-25 20:11:22.315954657 +0300
@@ -24,8 +24,6 @@
 typedef UINT (*static_entry_fkt)();
 typedef UINT (*static_addin_fkt)();
 
-
-
 extern UINT audin_DVCPluginEntry(void);
 extern UINT disp_DVCPluginEntry(void);
 extern UINT echo_DVCPluginEntry(void);
@@ -35,22 +33,20 @@
 extern UINT tsmf_DVCPluginEntry(void);
 extern UINT video_DVCPluginEntry(void);
 
-extern BOOL VCAPITYPE cliprdr_VirtualChannelEntryEx(PCHANNEL_ENTRY_POINTS,PVOID);
-extern BOOL VCAPITYPE drdynvc_VirtualChannelEntryEx(PCHANNEL_ENTRY_POINTS,PVOID);
-extern BOOL VCAPITYPE encomsp_VirtualChannelEntryEx(PCHANNEL_ENTRY_POINTS,PVOID);
-extern BOOL VCAPITYPE rail_VirtualChannelEntryEx(PCHANNEL_ENTRY_POINTS,PVOID);
-extern BOOL VCAPITYPE rdp2tcp_VirtualChannelEntryEx(PCHANNEL_ENTRY_POINTS,PVOID);
-extern BOOL VCAPITYPE rdpdr_VirtualChannelEntryEx(PCHANNEL_ENTRY_POINTS,PVOID);
-extern BOOL VCAPITYPE rdpsnd_VirtualChannelEntryEx(PCHANNEL_ENTRY_POINTS,PVOID);
-extern BOOL VCAPITYPE remdesk_VirtualChannelEntryEx(PCHANNEL_ENTRY_POINTS,PVOID);
+extern BOOL VCAPITYPE cliprdr_VirtualChannelEntryEx(PCHANNEL_ENTRY_POINTS, PVOID);
+extern BOOL VCAPITYPE drdynvc_VirtualChannelEntryEx(PCHANNEL_ENTRY_POINTS, PVOID);
+extern BOOL VCAPITYPE encomsp_VirtualChannelEntryEx(PCHANNEL_ENTRY_POINTS, PVOID);
+extern BOOL VCAPITYPE rail_VirtualChannelEntryEx(PCHANNEL_ENTRY_POINTS, PVOID);
+extern BOOL VCAPITYPE rdpdr_VirtualChannelEntryEx(PCHANNEL_ENTRY_POINTS, PVOID);
+extern BOOL VCAPITYPE rdpsnd_VirtualChannelEntryEx(PCHANNEL_ENTRY_POINTS, PVOID);
+extern BOOL VCAPITYPE remdesk_VirtualChannelEntryEx(PCHANNEL_ENTRY_POINTS, PVOID);
 
 extern UINT drive_DeviceServiceEntry(void);
 extern UINT parallel_DeviceServiceEntry(void);
 extern UINT serial_DeviceServiceEntry(void);
 extern UINT smartcard_DeviceServiceEntry(void);
 
-const STATIC_ENTRY CLIENT_DVCPluginEntry_TABLE[] =
-{
+const STATIC_ENTRY CLIENT_DVCPluginEntry_TABLE[] = {
 
 	{ "audin", (static_entry_fkt)audin_DVCPluginEntry },
 	{ "disp", (static_entry_fkt)disp_DVCPluginEntry },
@@ -62,21 +58,18 @@
 	{ "video", (static_entry_fkt)video_DVCPluginEntry },
 	{ NULL, NULL }
 };
-const STATIC_ENTRY CLIENT_VirtualChannelEntryEx_TABLE[] =
-{
+const STATIC_ENTRY CLIENT_VirtualChannelEntryEx_TABLE[] = {
 
 	{ "cliprdr", (static_entry_fkt)cliprdr_VirtualChannelEntryEx },
 	{ "drdynvc", (static_entry_fkt)drdynvc_VirtualChannelEntryEx },
 	{ "encomsp", (static_entry_fkt)encomsp_VirtualChannelEntryEx },
 	{ "rail", (static_entry_fkt)rail_VirtualChannelEntryEx },
-	{ "rdp2tcp", (static_entry_fkt)rdp2tcp_VirtualChannelEntryEx },
 	{ "rdpdr", (static_entry_fkt)rdpdr_VirtualChannelEntryEx },
 	{ "rdpsnd", (static_entry_fkt)rdpsnd_VirtualChannelEntryEx },
 	{ "remdesk", (static_entry_fkt)remdesk_VirtualChannelEntryEx },
 	{ NULL, NULL }
 };
-const STATIC_ENTRY CLIENT_DeviceServiceEntry_TABLE[] =
-{
+const STATIC_ENTRY CLIENT_DeviceServiceEntry_TABLE[] = {
 
 	{ "drive", (static_entry_fkt)drive_DeviceServiceEntry },
 	{ "parallel", (static_entry_fkt)parallel_DeviceServiceEntry },
@@ -85,8 +78,7 @@
 	{ NULL, NULL }
 };
 
-const STATIC_ENTRY_TABLE CLIENT_STATIC_ENTRY_TABLES[] =
-{
+const STATIC_ENTRY_TABLE CLIENT_STATIC_ENTRY_TABLES[] = {
 	{ "DVCPluginEntry", CLIENT_DVCPluginEntry_TABLE },
 	{ "VirtualChannelEntryEx", CLIENT_VirtualChannelEntryEx_TABLE },
 	{ "DeviceServiceEntry", CLIENT_DeviceServiceEntry_TABLE },
@@ -103,97 +95,41 @@
 extern void oss_freerdp_tsmf_client_audio_subsystem_entry(void);
 extern void alsa_freerdp_tsmf_client_audio_subsystem_entry(void);
 
-const STATIC_SUBSYSTEM_ENTRY CLIENT_AUDIN_SUBSYSTEM_TABLE[] =
-{
+const STATIC_SUBSYSTEM_ENTRY CLIENT_AUDIN_SUBSYSTEM_TABLE[] = {
 	{ "oss", "", oss_freerdp_audin_client_subsystem_entry },
 	{ "alsa", "", alsa_freerdp_audin_client_subsystem_entry },
 	{ NULL, NULL, NULL }
 };
-const STATIC_SUBSYSTEM_ENTRY CLIENT_CLIPRDR_SUBSYSTEM_TABLE[] =
-{
-	{ NULL, NULL, NULL }
-};
-const STATIC_SUBSYSTEM_ENTRY CLIENT_DISP_SUBSYSTEM_TABLE[] =
-{
-	{ NULL, NULL, NULL }
-};
-const STATIC_SUBSYSTEM_ENTRY CLIENT_DRDYNVC_SUBSYSTEM_TABLE[] =
-{
-	{ NULL, NULL, NULL }
-};
-const STATIC_SUBSYSTEM_ENTRY CLIENT_DRIVE_SUBSYSTEM_TABLE[] =
-{
-	{ NULL, NULL, NULL }
-};
-const STATIC_SUBSYSTEM_ENTRY CLIENT_ECHO_SUBSYSTEM_TABLE[] =
-{
-	{ NULL, NULL, NULL }
-};
-const STATIC_SUBSYSTEM_ENTRY CLIENT_ENCOMSP_SUBSYSTEM_TABLE[] =
-{
-	{ NULL, NULL, NULL }
-};
-const STATIC_SUBSYSTEM_ENTRY CLIENT_GEOMETRY_SUBSYSTEM_TABLE[] =
-{
-	{ NULL, NULL, NULL }
-};
-const STATIC_SUBSYSTEM_ENTRY CLIENT_PARALLEL_SUBSYSTEM_TABLE[] =
-{
-	{ NULL, NULL, NULL }
-};
-const STATIC_SUBSYSTEM_ENTRY CLIENT_RAIL_SUBSYSTEM_TABLE[] =
-{
-	{ NULL, NULL, NULL }
-};
-const STATIC_SUBSYSTEM_ENTRY CLIENT_RDP2TCP_SUBSYSTEM_TABLE[] =
-{
-	{ NULL, NULL, NULL }
-};
-const STATIC_SUBSYSTEM_ENTRY CLIENT_RDPDR_SUBSYSTEM_TABLE[] =
-{
-	{ NULL, NULL, NULL }
-};
-const STATIC_SUBSYSTEM_ENTRY CLIENT_RDPEI_SUBSYSTEM_TABLE[] =
-{
-	{ NULL, NULL, NULL }
-};
-const STATIC_SUBSYSTEM_ENTRY CLIENT_RDPGFX_SUBSYSTEM_TABLE[] =
-{
-	{ NULL, NULL, NULL }
-};
-const STATIC_SUBSYSTEM_ENTRY CLIENT_RDPSND_SUBSYSTEM_TABLE[] =
-{
+const STATIC_SUBSYSTEM_ENTRY CLIENT_CLIPRDR_SUBSYSTEM_TABLE[] = { { NULL, NULL, NULL } };
+const STATIC_SUBSYSTEM_ENTRY CLIENT_DISP_SUBSYSTEM_TABLE[] = { { NULL, NULL, NULL } };
+const STATIC_SUBSYSTEM_ENTRY CLIENT_DRDYNVC_SUBSYSTEM_TABLE[] = { { NULL, NULL, NULL } };
+const STATIC_SUBSYSTEM_ENTRY CLIENT_DRIVE_SUBSYSTEM_TABLE[] = { { NULL, NULL, NULL } };
+const STATIC_SUBSYSTEM_ENTRY CLIENT_ECHO_SUBSYSTEM_TABLE[] = { { NULL, NULL, NULL } };
+const STATIC_SUBSYSTEM_ENTRY CLIENT_ENCOMSP_SUBSYSTEM_TABLE[] = { { NULL, NULL, NULL } };
+const STATIC_SUBSYSTEM_ENTRY CLIENT_GEOMETRY_SUBSYSTEM_TABLE[] = { { NULL, NULL, NULL } };
+const STATIC_SUBSYSTEM_ENTRY CLIENT_PARALLEL_SUBSYSTEM_TABLE[] = { { NULL, NULL, NULL } };
+const STATIC_SUBSYSTEM_ENTRY CLIENT_RAIL_SUBSYSTEM_TABLE[] = { { NULL, NULL, NULL } };
+const STATIC_SUBSYSTEM_ENTRY CLIENT_RDPDR_SUBSYSTEM_TABLE[] = { { NULL, NULL, NULL } };
+const STATIC_SUBSYSTEM_ENTRY CLIENT_RDPEI_SUBSYSTEM_TABLE[] = { { NULL, NULL, NULL } };
+const STATIC_SUBSYSTEM_ENTRY CLIENT_RDPGFX_SUBSYSTEM_TABLE[] = { { NULL, NULL, NULL } };
+const STATIC_SUBSYSTEM_ENTRY CLIENT_RDPSND_SUBSYSTEM_TABLE[] = {
 	{ "oss", "", oss_freerdp_rdpsnd_client_subsystem_entry },
 	{ "alsa", "", alsa_freerdp_rdpsnd_client_subsystem_entry },
 	{ "fake", "", fake_freerdp_rdpsnd_client_subsystem_entry },
 	{ NULL, NULL, NULL }
 };
-const STATIC_SUBSYSTEM_ENTRY CLIENT_REMDESK_SUBSYSTEM_TABLE[] =
-{
-	{ NULL, NULL, NULL }
-};
-const STATIC_SUBSYSTEM_ENTRY CLIENT_SERIAL_SUBSYSTEM_TABLE[] =
-{
-	{ NULL, NULL, NULL }
-};
-const STATIC_SUBSYSTEM_ENTRY CLIENT_SMARTCARD_SUBSYSTEM_TABLE[] =
-{
-	{ NULL, NULL, NULL }
-};
-const STATIC_SUBSYSTEM_ENTRY CLIENT_TSMF_SUBSYSTEM_TABLE[] =
-{
+const STATIC_SUBSYSTEM_ENTRY CLIENT_REMDESK_SUBSYSTEM_TABLE[] = { { NULL, NULL, NULL } };
+const STATIC_SUBSYSTEM_ENTRY CLIENT_SERIAL_SUBSYSTEM_TABLE[] = { { NULL, NULL, NULL } };
+const STATIC_SUBSYSTEM_ENTRY CLIENT_SMARTCARD_SUBSYSTEM_TABLE[] = { { NULL, NULL, NULL } };
+const STATIC_SUBSYSTEM_ENTRY CLIENT_TSMF_SUBSYSTEM_TABLE[] = {
 	{ "ffmpeg", "decoder", ffmpeg_freerdp_tsmf_client_decoder_subsystem_entry },
 	{ "gstreamer", "decoder", gstreamer_freerdp_tsmf_client_decoder_subsystem_entry },
 	{ "oss", "audio", oss_freerdp_tsmf_client_audio_subsystem_entry },
 	{ "alsa", "audio", alsa_freerdp_tsmf_client_audio_subsystem_entry },
 	{ NULL, NULL, NULL }
 };
-const STATIC_SUBSYSTEM_ENTRY CLIENT_VIDEO_SUBSYSTEM_TABLE[] =
-{
-	{ NULL, NULL, NULL }
-};
-const STATIC_ADDIN_TABLE CLIENT_STATIC_ADDIN_TABLE[] =
-{
+const STATIC_SUBSYSTEM_ENTRY CLIENT_VIDEO_SUBSYSTEM_TABLE[] = { { NULL, NULL, NULL } };
+const STATIC_ADDIN_TABLE CLIENT_STATIC_ADDIN_TABLE[] = {
 	{ "audin", (static_addin_fkt)audin_DVCPluginEntry, CLIENT_AUDIN_SUBSYSTEM_TABLE },
 	{ "cliprdr", (static_addin_fkt)cliprdr_VirtualChannelEntryEx, CLIENT_CLIPRDR_SUBSYSTEM_TABLE },
 	{ "disp", (static_addin_fkt)disp_DVCPluginEntry, CLIENT_DISP_SUBSYSTEM_TABLE },
@@ -204,16 +140,15 @@
 	{ "geometry", (static_addin_fkt)geometry_DVCPluginEntry, CLIENT_GEOMETRY_SUBSYSTEM_TABLE },
 	{ "parallel", (static_addin_fkt)parallel_DeviceServiceEntry, CLIENT_PARALLEL_SUBSYSTEM_TABLE },
 	{ "rail", (static_addin_fkt)rail_VirtualChannelEntryEx, CLIENT_RAIL_SUBSYSTEM_TABLE },
-	{ "rdp2tcp", (static_addin_fkt)rdp2tcp_VirtualChannelEntryEx, CLIENT_RDP2TCP_SUBSYSTEM_TABLE },
 	{ "rdpdr", (static_addin_fkt)rdpdr_VirtualChannelEntryEx, CLIENT_RDPDR_SUBSYSTEM_TABLE },
 	{ "rdpei", (static_addin_fkt)rdpei_DVCPluginEntry, CLIENT_RDPEI_SUBSYSTEM_TABLE },
 	{ "rdpgfx", (static_addin_fkt)rdpgfx_DVCPluginEntry, CLIENT_RDPGFX_SUBSYSTEM_TABLE },
 	{ "rdpsnd", (static_addin_fkt)rdpsnd_VirtualChannelEntryEx, CLIENT_RDPSND_SUBSYSTEM_TABLE },
 	{ "remdesk", (static_addin_fkt)remdesk_VirtualChannelEntryEx, CLIENT_REMDESK_SUBSYSTEM_TABLE },
 	{ "serial", (static_addin_fkt)serial_DeviceServiceEntry, CLIENT_SERIAL_SUBSYSTEM_TABLE },
-	{ "smartcard", (static_addin_fkt)smartcard_DeviceServiceEntry, CLIENT_SMARTCARD_SUBSYSTEM_TABLE },
+	{ "smartcard", (static_addin_fkt)smartcard_DeviceServiceEntry,
+	  CLIENT_SMARTCARD_SUBSYSTEM_TABLE },
 	{ "tsmf", (static_addin_fkt)tsmf_DVCPluginEntry, CLIENT_TSMF_SUBSYSTEM_TABLE },
 	{ "video", (static_addin_fkt)video_DVCPluginEntry, CLIENT_VIDEO_SUBSYSTEM_TABLE },
 	{ NULL, NULL, NULL }
 };
-
diff -urN channels/cliprdr/client/cliprdr_main.c ../../informatimago/FreeRDP/channels/cliprdr/client/cliprdr_main.c
--- channels/cliprdr/client/cliprdr_main.c	2019-07-25 19:50:58.253884490 +0300
+++ ../../informatimago/FreeRDP/channels/cliprdr/client/cliprdr_main.c	2019-07-25 20:11:22.351954835 +0300
@@ -166,10 +166,19 @@
 #ifdef WITH_DEBUG_CLIPRDR
 	cliprdr_print_general_capability_flags(generalFlags);
 #endif
-	cliprdr->useLongFormatNames = (generalFlags & CB_USE_LONG_FORMAT_NAMES);
-	cliprdr->streamFileClipEnabled = (generalFlags & CB_STREAM_FILECLIP_ENABLED);
-	cliprdr->fileClipNoFilePaths = (generalFlags & CB_FILECLIP_NO_FILE_PATHS);
-	cliprdr->canLockClipData = (generalFlags & CB_CAN_LOCK_CLIPDATA);
+
+	if (cliprdr->useLongFormatNames)
+		cliprdr->useLongFormatNames = (generalFlags & CB_USE_LONG_FORMAT_NAMES) ? TRUE : FALSE;
+
+	if (cliprdr->streamFileClipEnabled)
+		cliprdr->streamFileClipEnabled = (generalFlags & CB_STREAM_FILECLIP_ENABLED) ? TRUE : FALSE;
+
+	if (cliprdr->fileClipNoFilePaths)
+		cliprdr->fileClipNoFilePaths = (generalFlags & CB_FILECLIP_NO_FILE_PATHS) ? TRUE : FALSE;
+
+	if (cliprdr->canLockClipData)
+		cliprdr->canLockClipData = (generalFlags & CB_CAN_LOCK_CLIPDATA) ? TRUE : FALSE;
+
 	cliprdr->capabilitiesReceived = TRUE;
 
 	if (!context->custom)
@@ -221,7 +230,7 @@
 		Stream_Read_UINT16(s, capabilitySetType); /* capabilitySetType (2 bytes) */
 		Stream_Read_UINT16(s, lengthCapability);  /* lengthCapability (2 bytes) */
 
-		if ((lengthCapability < 4) || (Stream_GetRemainingLength(s) < (lengthCapability - 4U)))
+		if (lengthCapability < 4 || Stream_GetRemainingLength(s) < lengthCapability - 4)
 			return ERROR_INVALID_DATA;
 
 		switch (capabilitySetType)
@@ -567,10 +576,10 @@
  * @return 0 on success, otherwise a Win32 error code
  */
 static UINT cliprdr_client_capabilities(CliprdrClientContext* context,
-                                        const CLIPRDR_CAPABILITIES* capabilities)
+                                        CLIPRDR_CAPABILITIES* capabilities)
 {
 	wStream* s;
-	const CLIPRDR_GENERAL_CAPABILITY_SET* generalCapabilitySet;
+	CLIPRDR_GENERAL_CAPABILITY_SET* generalCapabilitySet;
 	cliprdrPlugin* cliprdr = (cliprdrPlugin*)context->handle;
 	s = cliprdr_packet_new(CB_CLIP_CAPS, 0, 4 + CB_CAPSTYPE_GENERAL_LEN);
 
@@ -582,7 +591,7 @@
 
 	Stream_Write_UINT16(s, 1); /* cCapabilitiesSets */
 	Stream_Write_UINT16(s, 0); /* pad1 */
-	generalCapabilitySet = (const CLIPRDR_GENERAL_CAPABILITY_SET*)capabilities->capabilitySets;
+	generalCapabilitySet = (CLIPRDR_GENERAL_CAPABILITY_SET*)capabilities->capabilitySets;
 	Stream_Write_UINT16(s, generalCapabilitySet->capabilitySetType);   /* capabilitySetType */
 	Stream_Write_UINT16(s, generalCapabilitySet->capabilitySetLength); /* lengthCapability */
 	Stream_Write_UINT32(s, generalCapabilitySet->version);             /* version */
@@ -597,7 +606,7 @@
  * @return 0 on success, otherwise a Win32 error code
  */
 static UINT cliprdr_temp_directory(CliprdrClientContext* context,
-                                   const CLIPRDR_TEMP_DIRECTORY* tempDirectory)
+                                   CLIPRDR_TEMP_DIRECTORY* tempDirectory)
 {
 	int length;
 	wStream* s;
@@ -632,7 +641,7 @@
  * @return 0 on success, otherwise a Win32 error code
  */
 static UINT cliprdr_client_format_list(CliprdrClientContext* context,
-                                       const CLIPRDR_FORMAT_LIST* formatList)
+                                       CLIPRDR_FORMAT_LIST* formatList)
 {
 	wStream* s;
 	UINT32 index;
@@ -762,13 +771,15 @@
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-static UINT
-cliprdr_client_format_list_response(CliprdrClientContext* context,
-                                    const CLIPRDR_FORMAT_LIST_RESPONSE* formatListResponse)
+static UINT cliprdr_client_format_list_response(CliprdrClientContext* context,
+                                                CLIPRDR_FORMAT_LIST_RESPONSE* formatListResponse)
 {
 	wStream* s;
 	cliprdrPlugin* cliprdr = (cliprdrPlugin*)context->handle;
-	s = cliprdr_packet_new(CB_FORMAT_LIST_RESPONSE, formatListResponse->msgFlags, 0);
+	formatListResponse->msgType = CB_FORMAT_LIST_RESPONSE;
+	formatListResponse->dataLen = 0;
+	s = cliprdr_packet_new(formatListResponse->msgType, formatListResponse->msgFlags,
+	                       formatListResponse->dataLen);
 
 	if (!s)
 	{
@@ -786,7 +797,7 @@
  * @return 0 on success, otherwise a Win32 error code
  */
 static UINT cliprdr_client_lock_clipboard_data(CliprdrClientContext* context,
-                                               const CLIPRDR_LOCK_CLIPBOARD_DATA* lockClipboardData)
+                                               CLIPRDR_LOCK_CLIPBOARD_DATA* lockClipboardData)
 {
 	wStream* s;
 	cliprdrPlugin* cliprdr = (cliprdrPlugin*)context->handle;
@@ -809,9 +820,8 @@
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-static UINT
-cliprdr_client_unlock_clipboard_data(CliprdrClientContext* context,
-                                     const CLIPRDR_UNLOCK_CLIPBOARD_DATA* unlockClipboardData)
+static UINT cliprdr_client_unlock_clipboard_data(CliprdrClientContext* context,
+                                                 CLIPRDR_UNLOCK_CLIPBOARD_DATA* unlockClipboardData)
 {
 	wStream* s;
 	cliprdrPlugin* cliprdr = (cliprdrPlugin*)context->handle;
@@ -835,11 +845,15 @@
  * @return 0 on success, otherwise a Win32 error code
  */
 static UINT cliprdr_client_format_data_request(CliprdrClientContext* context,
-                                               const CLIPRDR_FORMAT_DATA_REQUEST* formatDataRequest)
+                                               CLIPRDR_FORMAT_DATA_REQUEST* formatDataRequest)
 {
 	wStream* s;
 	cliprdrPlugin* cliprdr = (cliprdrPlugin*)context->handle;
-	s = cliprdr_packet_new(CB_FORMAT_DATA_REQUEST, 0, 4);
+	formatDataRequest->msgType = CB_FORMAT_DATA_REQUEST;
+	formatDataRequest->msgFlags = 0;
+	formatDataRequest->dataLen = 4;
+	s = cliprdr_packet_new(formatDataRequest->msgType, formatDataRequest->msgFlags,
+	                       formatDataRequest->dataLen);
 
 	if (!s)
 	{
@@ -857,13 +871,13 @@
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-static UINT
-cliprdr_client_format_data_response(CliprdrClientContext* context,
-                                    const CLIPRDR_FORMAT_DATA_RESPONSE* formatDataResponse)
+static UINT cliprdr_client_format_data_response(CliprdrClientContext* context,
+                                                CLIPRDR_FORMAT_DATA_RESPONSE* formatDataResponse)
 {
 	wStream* s;
 	cliprdrPlugin* cliprdr = (cliprdrPlugin*)context->handle;
-	s = cliprdr_packet_new(CB_FORMAT_DATA_RESPONSE, formatDataResponse->msgFlags,
+	formatDataResponse->msgType = CB_FORMAT_DATA_RESPONSE;
+	s = cliprdr_packet_new(formatDataResponse->msgType, formatDataResponse->msgFlags,
 	                       formatDataResponse->dataLen);
 
 	if (!s)
@@ -882,9 +896,8 @@
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-static UINT
-cliprdr_client_file_contents_request(CliprdrClientContext* context,
-                                     const CLIPRDR_FILE_CONTENTS_REQUEST* fileContentsRequest)
+static UINT cliprdr_client_file_contents_request(CliprdrClientContext* context,
+                                                 CLIPRDR_FILE_CONTENTS_REQUEST* fileContentsRequest)
 {
 	wStream* s;
 	cliprdrPlugin* cliprdr = (cliprdrPlugin*)context->handle;
@@ -918,7 +931,7 @@
  */
 static UINT
 cliprdr_client_file_contents_response(CliprdrClientContext* context,
-                                      const CLIPRDR_FILE_CONTENTS_RESPONSE* fileContentsResponse)
+                                      CLIPRDR_FILE_CONTENTS_RESPONSE* fileContentsResponse)
 {
 	wStream* s;
 	cliprdrPlugin* cliprdr = (cliprdrPlugin*)context->handle;
diff -urN channels/cliprdr/server/cliprdr_main.c ../../informatimago/FreeRDP/channels/cliprdr/server/cliprdr_main.c
--- channels/cliprdr/server/cliprdr_main.c	2019-07-25 19:50:58.277884609 +0300
+++ ../../informatimago/FreeRDP/channels/cliprdr/server/cliprdr_main.c	2019-07-25 20:11:22.375954954 +0300
@@ -917,20 +917,24 @@
 	formatDataResponse.dataLen = header->dataLen;
 	formatDataResponse.requestedFormatData = NULL;
 
-	if (header->dataLen)
-		formatDataResponse.requestedFormatData = Stream_Pointer(s);
-
-	if (!Stream_SafeSeek(s, header->dataLen))
+	if (Stream_GetRemainingLength(s) < header->dataLen)
 	{
 		WLog_ERR(TAG, "not enough data in stream!");
 		return ERROR_INVALID_DATA;
 	}
 
+	if (header->dataLen)
+	{
+		formatDataResponse.requestedFormatData = (BYTE*)malloc(header->dataLen);
+		Stream_Read(s, formatDataResponse.requestedFormatData, header->dataLen);
+	}
+
 	IFCALLRET(context->ClientFormatDataResponse, error, context, &formatDataResponse);
 
 	if (error)
 		WLog_ERR(TAG, "ClientFormatDataResponse failed with error %" PRIu32 "!", error);
 
+	free(formatDataResponse.requestedFormatData);
 	return error;
 }
 
diff -urN channels/disp/client/CMakeLists.txt ../../informatimago/FreeRDP/channels/disp/client/CMakeLists.txt
--- channels/disp/client/CMakeLists.txt	2019-07-24 06:11:52.378197133 +0300
+++ ../../informatimago/FreeRDP/channels/disp/client/CMakeLists.txt	2019-07-19 20:00:17.337205933 +0300
@@ -19,9 +19,7 @@
 
 set(${MODULE_PREFIX}_SRCS
 	disp_main.c
-	disp_main.h
-	../disp_common.c
-	../disp_common.h)
+	disp_main.h)
 
 include_directories(..)
 
diff -urN channels/disp/client/disp_main.c ../../informatimago/FreeRDP/channels/disp/client/disp_main.c
--- channels/disp/client/disp_main.c	2019-07-25 19:50:58.285884648 +0300
+++ ../../informatimago/FreeRDP/channels/disp/client/disp_main.c	2019-07-25 20:11:22.387955014 +0300
@@ -40,7 +40,6 @@
 #include <freerdp/addin.h>
 
 #include "disp_main.h"
-#include "../disp_common.h"
 
 struct _DISP_CHANNEL_CALLBACK
 {
@@ -86,15 +85,16 @@
 {
 	UINT status;
 	wStream* s;
+	UINT32 type;
 	UINT32 index;
+	UINT32 length;
 	DISP_PLUGIN* disp;
 	UINT32 MonitorLayoutSize;
-	DISPLAY_CONTROL_HEADER header;
 	disp = (DISP_PLUGIN*)callback->plugin;
-	MonitorLayoutSize = DISPLAY_CONTROL_MONITOR_LAYOUT_SIZE;
-	header.length = 8 + 8 + (NumMonitors * MonitorLayoutSize);
-	header.type = DISPLAY_CONTROL_PDU_TYPE_MONITOR_LAYOUT;
-	s = Stream_New(NULL, header.length);
+	MonitorLayoutSize = 40;
+	length = 8 + 8 + (NumMonitors * MonitorLayoutSize);
+	type = DISPLAY_CONTROL_PDU_TYPE_MONITOR_LAYOUT;
+	s = Stream_New(NULL, length);
 
 	if (!s)
 	{
@@ -102,11 +102,8 @@
 		return CHANNEL_RC_NO_MEMORY;
 	}
 
-	if ((status = disp_write_header(s, &header)))
-	{
-		WLog_ERR(TAG, "Failed to write header with error %" PRIu32 "!", status);
-		goto out;
-	}
+	Stream_Write_UINT32(s, type);   /* Type (4 bytes) */
+	Stream_Write_UINT32(s, length); /* Length (4 bytes) */
 
 	if (NumMonitors > disp->MaxNumMonitors)
 		NumMonitors = disp->MaxNumMonitors;
@@ -158,7 +155,6 @@
 		         Monitors[index].Orientation);
 	}
 
-out:
 	Stream_SealLength(s);
 	status = callback->channel->Write(callback->channel, (UINT32)Stream_Length(s), Stream_Buffer(s),
 	                                  NULL);
@@ -203,8 +199,8 @@
  */
 UINT disp_recv_pdu(DISP_CHANNEL_CALLBACK* callback, wStream* s)
 {
-	UINT32 error;
-	DISPLAY_CONTROL_HEADER header;
+	UINT32 type;
+	UINT32 length;
 
 	if (Stream_GetRemainingLength(s) < 8)
 	{
@@ -212,25 +208,18 @@
 		return ERROR_INVALID_DATA;
 	}
 
-	if ((error = disp_read_header(s, &header)))
-	{
-		WLog_ERR(TAG, "disp_read_header failed with error %" PRIu32 "!", error);
-		return error;
-	}
+	Stream_Read_UINT32(s, type);   /* Type (4 bytes) */
+	Stream_Read_UINT32(s, length); /* Length (4 bytes) */
 
-	if (!Stream_EnsureRemainingCapacity(s, header.length))
-	{
-		WLog_ERR(TAG, "not enough remaining data");
-		return ERROR_INVALID_DATA;
-	}
+	// WLog_ERR(TAG,  "Type: %"PRIu32" Length: %"PRIu32"", type, length);
 
-	switch (header.type)
+	switch (type)
 	{
 	case DISPLAY_CONTROL_PDU_TYPE_CAPS:
 		return disp_recv_display_control_caps_pdu(callback, s);
 
 	default:
-		WLog_ERR(TAG, "Type %" PRIu32 " not recognized!", header.type);
+		WLog_ERR(TAG, "Type %" PRIu32 " not recognized!", type);
 		return ERROR_INTERNAL_ERROR;
 	}
 }
diff -urN channels/disp/client/disp_main.h ../../informatimago/FreeRDP/channels/disp/client/disp_main.h
--- channels/disp/client/disp_main.h	2019-07-25 19:50:58.285884648 +0300
+++ ../../informatimago/FreeRDP/channels/disp/client/disp_main.h	2019-07-25 20:11:22.387955014 +0300
@@ -33,6 +33,9 @@
 
 #include <freerdp/client/disp.h>
 
+#define DISPLAY_CONTROL_PDU_TYPE_CAPS 0x00000005
+#define DISPLAY_CONTROL_PDU_TYPE_MONITOR_LAYOUT 0x00000002
+
 #define TAG CHANNELS_TAG("disp.client")
 
 #endif /* FREERDP_CHANNEL_DISP_CLIENT_MAIN_H */
diff -urN channels/disp/CMakeLists.txt ../../informatimago/FreeRDP/channels/disp/CMakeLists.txt
--- channels/disp/CMakeLists.txt	2019-07-24 06:11:52.378197133 +0300
+++ ../../informatimago/FreeRDP/channels/disp/CMakeLists.txt	2019-07-19 20:00:17.337205933 +0300
@@ -20,7 +20,3 @@
 if(WITH_CLIENT_CHANNELS)
 	add_channel_client(${MODULE_PREFIX} ${CHANNEL_NAME})
 endif()
-	
-if(WITH_SERVER_CHANNELS)
-	add_channel_server(${MODULE_PREFIX} ${CHANNEL_NAME})
-endif()
diff -urN channels/disp/disp_common.c ../../informatimago/FreeRDP/channels/disp/disp_common.c
--- channels/disp/disp_common.c	2019-07-25 19:50:58.289884669 +0300
+++ ../../informatimago/FreeRDP/channels/disp/disp_common.c	1970-01-01 03:00:00.000000000 +0300
@@ -1,60 +0,0 @@
-/**
- * FreeRDP: A Remote Desktop Protocol Implementation
- * RDPEDISP Virtual Channel Extension
- *
- * Copyright 2019 Kobi Mizrachi <kmizrachi18@gmail.com>
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifdef HAVE_CONFIG_H
-#	include "config.h"
-#endif
-
-#include <winpr/crt.h>
-#include <winpr/stream.h>
-#include <freerdp/channels/log.h>
-
-#define TAG CHANNELS_TAG("disp.common")
-
-#include "disp_common.h"
-
-/**
- * Function description
- *
- * @return 0 on success, otherwise a Win32 error code
- */
-UINT disp_read_header(wStream* s, DISPLAY_CONTROL_HEADER* header)
-{
-	if (Stream_GetRemainingLength(s) < 8)
-	{
-		WLog_ERR(TAG, "header parsing failed: not enough data!");
-		return ERROR_INVALID_DATA;
-	}
-
-	Stream_Read_UINT32(s, header->type);
-	Stream_Read_UINT32(s, header->length);
-	return CHANNEL_RC_OK;
-}
-
-/**
- * Function description
- *
- * @return 0 on success, otherwise a Win32 error code
- */
-UINT disp_write_header(wStream* s, const DISPLAY_CONTROL_HEADER* header)
-{
-	Stream_Write_UINT32(s, header->type);
-	Stream_Write_UINT32(s, header->length);
-	return CHANNEL_RC_OK;
-}
diff -urN channels/disp/disp_common.h ../../informatimago/FreeRDP/channels/disp/disp_common.h
--- channels/disp/disp_common.h	2019-07-24 06:11:52.378197133 +0300
+++ ../../informatimago/FreeRDP/channels/disp/disp_common.h	1970-01-01 03:00:00.000000000 +0300
@@ -1,32 +0,0 @@
-/**
- * FreeRDP: A Remote Desktop Protocol Implementation
- * RDPEDISP Virtual Channel Extension
- *
- * Copyright 2019 Kobi Mizrachi <kmizrachi18@gmail.com>
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef FREERDP_CHANNEL_DISP_COMMON_H
-#define FREERDP_CHANNEL_DISP_COMMON_H
-
-#include <winpr/crt.h>
-#include <winpr/stream.h>
-
-#include <freerdp/channels/disp.h>
-#include <freerdp/api.h>
-
-FREERDP_LOCAL UINT disp_read_header(wStream* s, DISPLAY_CONTROL_HEADER* header);
-FREERDP_LOCAL UINT disp_write_header(wStream* s, const DISPLAY_CONTROL_HEADER* header);
-
-#endif /* FREERDP_CHANNEL_DISP_COMMON_H */
diff -urN channels/disp/server/CMakeLists.txt ../../informatimago/FreeRDP/channels/disp/server/CMakeLists.txt
--- channels/disp/server/CMakeLists.txt	2019-07-24 06:11:52.378197133 +0300
+++ ../../informatimago/FreeRDP/channels/disp/server/CMakeLists.txt	1970-01-01 03:00:00.000000000 +0300
@@ -1,32 +0,0 @@
-# FreeRDP: A Remote Desktop Protocol Implementation
-# FreeRDP cmake build script
-#
-# Copyright 2019 Kobi Mizrachi <kmizrachi18@gmail.com>
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-define_channel_server("disp")
-
-set(${MODULE_PREFIX}_SRCS
-	disp_main.c
-	disp_main.h
-	../disp_common.c
-	../disp_common.h
-	)
-
-include_directories(..)
-
-add_channel_server_library(${MODULE_PREFIX} ${MODULE_NAME} ${CHANNEL_NAME} FALSE "DVCPluginEntry")
-
-target_link_libraries(${MODULE_NAME} freerdp)
-set_property(TARGET ${MODULE_NAME} PROPERTY FOLDER "Channels/${CHANNEL_NAME}/Server")
diff -urN channels/disp/server/disp_main.c ../../informatimago/FreeRDP/channels/disp/server/disp_main.c
--- channels/disp/server/disp_main.c	2019-07-25 19:50:58.297884708 +0300
+++ ../../informatimago/FreeRDP/channels/disp/server/disp_main.c	1970-01-01 03:00:00.000000000 +0300
@@ -1,574 +0,0 @@
-/**
- * FreeRDP: A Remote Desktop Protocol Implementation
- * RDPEDISP Virtual Channel Extension
- *
- * Copyright 2019 Kobi Mizrachi <kmizrachi18@gmail.com>
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *	 http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifdef HAVE_CONFIG_H
-#	include "config.h"
-#endif
-
-#include "disp_main.h"
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-
-#include <winpr/crt.h>
-#include <winpr/synch.h>
-#include <winpr/thread.h>
-#include <winpr/stream.h>
-#include <winpr/sysinfo.h>
-#include <freerdp/channels/wtsvc.h>
-#include <freerdp/channels/log.h>
-
-#include <freerdp/server/disp.h>
-#include "../disp_common.h"
-
-#define TAG CHANNELS_TAG("rdpedisp.server")
-
-/**
- * Function description
- *
- * @return 0 on success, otherwise a Win32 error code
- */
-
-static wStream* disp_server_single_packet_new(UINT32 type, UINT32 length)
-{
-	UINT error;
-	DISPLAY_CONTROL_HEADER header;
-	wStream* s = Stream_New(NULL, DISPLAY_CONTROL_HEADER_LENGTH + length);
-
-	if (!s)
-	{
-		WLog_ERR(TAG, "Stream_New failed!");
-		goto error;
-	}
-
-	header.type = type;
-	header.length = length;
-
-	if ((error = disp_write_header(s, &header)))
-	{
-		WLog_ERR(TAG, "Failed to write header with error %" PRIu32 "!", error);
-		goto error;
-	}
-
-	return s;
-error:
-	Stream_Free(s, TRUE);
-	return NULL;
-}
-
-static BOOL disp_server_is_monitor_layout_valid(DISPLAY_CONTROL_MONITOR_LAYOUT* monitor)
-{
-	if (monitor->Width < DISPLAY_CONTROL_MIN_MONITOR_WIDTH ||
-	    monitor->Width > DISPLAY_CONTROL_MAX_MONITOR_WIDTH)
-	{
-		WLog_WARN(TAG, "Received invalid value for monitor->Width: %" PRIu32 "", monitor->Width);
-		return FALSE;
-	}
-
-	if (monitor->Height < DISPLAY_CONTROL_MIN_MONITOR_HEIGHT ||
-	    monitor->Height > DISPLAY_CONTROL_MAX_MONITOR_HEIGHT)
-	{
-		WLog_WARN(TAG, "Received invalid value for monitor->Height: %" PRIu32 "", monitor->Width);
-		return FALSE;
-	}
-
-	if (monitor->PhysicalWidth < DISPLAY_CONTROL_MIN_PHYSICAL_MONITOR_WIDTH ||
-	    monitor->PhysicalWidth > DISPLAY_CONTROL_MAX_PHYSICAL_MONITOR_WIDTH)
-	{
-		WLog_WARN(TAG, "Received invalid value for monitor->PhysicalWidth: %" PRIu32 "",
-		          monitor->PhysicalWidth);
-		return FALSE;
-	}
-
-	if (monitor->PhysicalHeight < DISPLAY_CONTROL_MIN_PHYSICAL_MONITOR_HEIGHT ||
-	    monitor->PhysicalHeight > DISPLAY_CONTROL_MAX_PHYSICAL_MONITOR_HEIGHT)
-	{
-		WLog_WARN(TAG, "Received invalid value for monitor->Height: %" PRIu32 "",
-		          monitor->PhysicalHeight);
-		return FALSE;
-	}
-
-	switch (monitor->Orientation)
-	{
-	case ORIENTATION_LANDSCAPE:
-	case ORIENTATION_PORTRAIT:
-	case ORIENTATION_LANDSCAPE_FLIPPED:
-	case ORIENTATION_PORTRAIT_FLIPPED:
-		break;
-
-	default:
-		WLog_WARN(TAG, "Received incorrect value for monitor->Orientation: %" PRIu32 "",
-		          monitor->Orientation);
-		return FALSE;
-	}
-
-	return TRUE;
-}
-
-static UINT disp_recv_display_control_monitor_layout_pdu(wStream* s, DispServerContext* context)
-{
-	UINT32 error = CHANNEL_RC_OK;
-	UINT32 index;
-	DISPLAY_CONTROL_MONITOR_LAYOUT_PDU pdu;
-	DISPLAY_CONTROL_MONITOR_LAYOUT* monitor;
-
-	if (Stream_GetRemainingLength(s) < 8)
-	{
-		WLog_ERR(TAG, "not enough data!");
-		return ERROR_INVALID_DATA;
-	}
-
-	Stream_Read_UINT32(s, pdu.MonitorLayoutSize); /* MonitorLayoutSize (4 bytes) */
-
-	if (pdu.MonitorLayoutSize != DISPLAY_CONTROL_MONITOR_LAYOUT_SIZE)
-	{
-		WLog_ERR(TAG, "MonitorLayoutSize is set to %" PRIu32 ". expected %" PRIu32 "",
-		         pdu.MonitorLayoutSize, DISPLAY_CONTROL_MONITOR_LAYOUT_SIZE);
-		return ERROR_INVALID_DATA;
-	}
-
-	Stream_Read_UINT32(s, pdu.NumMonitors); /* NumMonitors (4 bytes) */
-
-	if (pdu.NumMonitors > context->MaxNumMonitors)
-	{
-		WLog_ERR(TAG, "NumMonitors (%" PRIu32 ")> server MaxNumMonitors (%" PRIu32 ")",
-		         pdu.NumMonitors, context->MaxNumMonitors);
-		return ERROR_INVALID_DATA;
-	}
-
-	if (Stream_GetRemainingLength(s) < DISPLAY_CONTROL_MONITOR_LAYOUT_SIZE * pdu.NumMonitors)
-	{
-		WLog_ERR(TAG, "not enough data!");
-		return ERROR_INVALID_DATA;
-	}
-
-	pdu.Monitors = (DISPLAY_CONTROL_MONITOR_LAYOUT*)calloc(pdu.NumMonitors,
-	                                                       sizeof(DISPLAY_CONTROL_MONITOR_LAYOUT));
-
-	if (!pdu.Monitors)
-	{
-		WLog_ERR(TAG, "disp_recv_display_control_monitor_layout_pdu(): calloc failed!");
-		return CHANNEL_RC_NO_MEMORY;
-	}
-
-	WLog_DBG(TAG, "disp_recv_display_control_monitor_layout_pdu: NumMonitors=%" PRIu32 "",
-	         pdu.NumMonitors);
-
-	for (index = 0; index < pdu.NumMonitors; index++)
-	{
-		monitor = &(pdu.Monitors[index]);
-		Stream_Read_UINT32(s, monitor->Flags);              /* Flags (4 bytes) */
-		Stream_Read_UINT32(s, monitor->Left);               /* Left (4 bytes) */
-		Stream_Read_UINT32(s, monitor->Top);                /* Top (4 bytes) */
-		Stream_Read_UINT32(s, monitor->Width);              /* Width (4 bytes) */
-		Stream_Read_UINT32(s, monitor->Height);             /* Height (4 bytes) */
-		Stream_Read_UINT32(s, monitor->PhysicalWidth);      /* PhysicalWidth (4 bytes) */
-		Stream_Read_UINT32(s, monitor->PhysicalHeight);     /* PhysicalHeight (4 bytes) */
-		Stream_Read_UINT32(s, monitor->Orientation);        /* Orientation (4 bytes) */
-		Stream_Read_UINT32(s, monitor->DesktopScaleFactor); /* DesktopScaleFactor (4 bytes) */
-		Stream_Read_UINT32(s, monitor->DeviceScaleFactor);  /* DeviceScaleFactor (4 bytes) */
-		WLog_DBG(TAG,
-		         "\t%d : Flags: 0x%08" PRIX32 " Left/Top: (%" PRId32 ",%" PRId32 ") W/H=%" PRIu32
-		         "x%" PRIu32 ")",
-		         index, monitor->Flags, monitor->Left, monitor->Top, monitor->Width,
-		         monitor->Height);
-		WLog_DBG(TAG,
-		         "\t   PhysicalWidth: %" PRIu32 " PhysicalHeight: %" PRIu32 " Orientation: %" PRIu32
-		         "",
-		         monitor->PhysicalWidth, monitor->PhysicalHeight, monitor->Orientation);
-
-		if (!disp_server_is_monitor_layout_valid(monitor))
-		{
-			error = ERROR_INVALID_DATA;
-			goto out;
-		}
-	}
-
-	if (context)
-		IFCALLRET(context->DispMonitorLayout, error, context, &pdu);
-
-out:
-	free(pdu.Monitors);
-	return error;
-}
-
-static UINT disp_server_receive_pdu(DispServerContext* context, wStream* s)
-{
-	UINT error = CHANNEL_RC_OK;
-	size_t beg, end;
-	DISPLAY_CONTROL_HEADER header;
-	beg = Stream_GetPosition(s);
-
-	if ((error = disp_read_header(s, &header)))
-	{
-		WLog_ERR(TAG, "disp_read_header failed with error %" PRIu32 "!", error);
-		return error;
-	}
-
-	switch (header.type)
-	{
-	case DISPLAY_CONTROL_PDU_TYPE_MONITOR_LAYOUT:
-		if ((error = disp_recv_display_control_monitor_layout_pdu(s, context)))
-			WLog_ERR(TAG,
-			         "disp_recv_display_control_monitor_layout_pdu "
-			         "failed with error %" PRIu32 "!",
-			         error);
-
-		break;
-
-	default:
-		error = CHANNEL_RC_BAD_PROC;
-		WLog_WARN(TAG, "Received unknown PDU type: %" PRIu32 "", header.type);
-		break;
-	}
-
-	end = Stream_GetPosition(s);
-
-	if (end != (beg + header.length))
-	{
-		WLog_ERR(TAG, "Unexpected DISP pdu end: Actual: %d, Expected: %" PRIu32 "", end,
-		         (beg + header.length));
-		Stream_SetPosition(s, (beg + header.length));
-	}
-
-	return error;
-}
-
-static UINT disp_server_handle_messages(DispServerContext* context)
-{
-	DWORD BytesReturned;
-	void* buffer;
-	UINT ret = CHANNEL_RC_OK;
-	DispServerPrivate* priv = context->priv;
-	wStream* s = priv->input_stream;
-
-	/* Check whether the dynamic channel is ready */
-	if (!priv->isReady)
-	{
-		if (WTSVirtualChannelQuery(priv->disp_channel, WTSVirtualChannelReady, &buffer,
-		                           &BytesReturned) == FALSE)
-		{
-			if (GetLastError() == ERROR_NO_DATA)
-				return ERROR_NO_DATA;
-
-			WLog_ERR(TAG, "WTSVirtualChannelQuery failed");
-			return ERROR_INTERNAL_ERROR;
-		}
-
-		priv->isReady = *((BOOL*)buffer);
-		WTSFreeMemory(buffer);
-	}
-
-	/* Consume channel event only after the gfx dynamic channel is ready */
-	Stream_SetPosition(s, 0);
-
-	if (!WTSVirtualChannelRead(priv->disp_channel, 0, NULL, 0, &BytesReturned))
-	{
-		if (GetLastError() == ERROR_NO_DATA)
-			return ERROR_NO_DATA;
-
-		WLog_ERR(TAG, "WTSVirtualChannelRead failed!");
-		return ERROR_INTERNAL_ERROR;
-	}
-
-	if (BytesReturned < 1)
-		return CHANNEL_RC_OK;
-
-	if (!Stream_EnsureRemainingCapacity(s, BytesReturned))
-	{
-		WLog_ERR(TAG, "Stream_EnsureRemainingCapacity failed!");
-		return CHANNEL_RC_NO_MEMORY;
-	}
-
-	if (WTSVirtualChannelRead(priv->disp_channel, 0, (PCHAR)Stream_Buffer(s), Stream_Capacity(s),
-	                          &BytesReturned) == FALSE)
-	{
-		WLog_ERR(TAG, "WTSVirtualChannelRead failed!");
-		return ERROR_INTERNAL_ERROR;
-	}
-
-	Stream_SetLength(s, BytesReturned);
-	Stream_SetPosition(s, 0);
-
-	while (Stream_GetPosition(s) < Stream_Length(s))
-	{
-		if ((ret = disp_server_receive_pdu(context, s)))
-		{
-			WLog_ERR(TAG,
-			         "disp_server_receive_pdu "
-			         "failed with error %" PRIu32 "!",
-			         ret);
-			return ret;
-		}
-	}
-
-	return ret;
-}
-
-static DWORD WINAPI disp_server_thread_func(LPVOID arg)
-{
-	DispServerContext* context = (DispServerContext*)arg;
-	DispServerPrivate* priv = context->priv;
-	DWORD status;
-	DWORD nCount;
-	HANDLE events[8];
-	UINT error = CHANNEL_RC_OK;
-	nCount = 0;
-	events[nCount++] = priv->stopEvent;
-	events[nCount++] = priv->channelEvent;
-
-	/* Main virtual channel loop. RDPEDISP do not need version negotiation */
-	while (TRUE)
-	{
-		status = WaitForMultipleObjects(nCount, events, FALSE, INFINITE);
-
-		if (status == WAIT_FAILED)
-		{
-			error = GetLastError();
-			WLog_ERR(TAG, "WaitForMultipleObjects failed with error %" PRIu32 "", error);
-			break;
-		}
-
-		/* Stop Event */
-		if (status == WAIT_OBJECT_0)
-			break;
-
-		if ((error = disp_server_handle_messages(context)))
-		{
-			WLog_ERR(TAG, "disp_server_handle_messages failed with error %" PRIu32 "", error);
-			break;
-		}
-	}
-
-	ExitThread(error);
-	return error;
-}
-
-/**
- * Function description
- *
- * @return 0 on success, otherwise a Win32 error code
- */
-static UINT disp_server_open(DispServerContext* context)
-{
-	UINT rc = ERROR_INTERNAL_ERROR;
-	DispServerPrivate* priv = context->priv;
-	DWORD BytesReturned = 0;
-	PULONG pSessionId = NULL;
-	void* buffer;
-	buffer = NULL;
-	priv->SessionId = WTS_CURRENT_SESSION;
-
-	if (WTSQuerySessionInformationA(context->vcm, WTS_CURRENT_SESSION, WTSSessionId,
-	                                (LPSTR*)&pSessionId, &BytesReturned) == FALSE)
-	{
-		WLog_ERR(TAG, "WTSQuerySessionInformationA failed!");
-		rc = ERROR_INTERNAL_ERROR;
-		goto out_close;
-	}
-
-	priv->SessionId = (DWORD)*pSessionId;
-	priv->disp_channel = (HANDLE)WTSVirtualChannelOpenEx(priv->SessionId, DISP_DVC_CHANNEL_NAME,
-	                                                     WTS_CHANNEL_OPTION_DYNAMIC);
-
-	if (!priv->disp_channel)
-	{
-		WLog_ERR(TAG, "WTSVirtualChannelOpenEx failed!");
-		rc = GetLastError();
-		goto out_close;
-	}
-
-	/* Query for channel event handle */
-	if (!WTSVirtualChannelQuery(priv->disp_channel, WTSVirtualEventHandle, &buffer,
-	                            &BytesReturned) ||
-	    (BytesReturned != sizeof(HANDLE)))
-	{
-		WLog_ERR(TAG,
-		         "WTSVirtualChannelQuery failed "
-		         "or invalid returned size(%" PRIu32 ")",
-		         BytesReturned);
-
-		if (buffer)
-			WTSFreeMemory(buffer);
-
-		rc = ERROR_INTERNAL_ERROR;
-		goto out_close;
-	}
-
-	CopyMemory(&priv->channelEvent, buffer, sizeof(HANDLE));
-	WTSFreeMemory(buffer);
-
-	if (priv->thread == NULL)
-	{
-		if (!(priv->stopEvent = CreateEvent(NULL, TRUE, FALSE, NULL)))
-		{
-			WLog_ERR(TAG, "CreateEvent failed!");
-			rc = ERROR_INTERNAL_ERROR;
-		}
-
-		if (!(priv->thread =
-		          CreateThread(NULL, 0, disp_server_thread_func, (void*)context, 0, NULL)))
-		{
-			WLog_ERR(TAG, "CreateEvent failed!");
-			CloseHandle(priv->stopEvent);
-			priv->stopEvent = NULL;
-			rc = ERROR_INTERNAL_ERROR;
-		}
-	}
-
-	return CHANNEL_RC_OK;
-out_close:
-	WTSVirtualChannelClose(priv->disp_channel);
-	priv->disp_channel = NULL;
-	priv->channelEvent = NULL;
-	return rc;
-}
-
-static UINT disp_server_packet_send(DispServerContext* context, wStream* s)
-{
-	UINT ret;
-	ULONG written;
-
-	if (!WTSVirtualChannelWrite(context->priv->disp_channel, (PCHAR)Stream_Buffer(s),
-	                            Stream_GetPosition(s), &written))
-	{
-		WLog_ERR(TAG, "WTSVirtualChannelWrite failed!");
-		ret = ERROR_INTERNAL_ERROR;
-		goto out;
-	}
-
-	if (written < Stream_GetPosition(s))
-	{
-		WLog_WARN(TAG, "Unexpected bytes written: %" PRIu32 "/%" PRIuz "", written,
-		          Stream_GetPosition(s));
-	}
-
-	ret = CHANNEL_RC_OK;
-out:
-	Stream_Free(s, TRUE);
-	return ret;
-}
-
-/**
- * Function description
- *
- * @return 0 on success, otherwise a Win32 error code
- */
-static UINT disp_server_send_caps_pdu(DispServerContext* context)
-{
-	wStream* s = disp_server_single_packet_new(DISPLAY_CONTROL_PDU_TYPE_CAPS, 12);
-
-	if (!s)
-	{
-		WLog_ERR(TAG, "disp_server_single_packet_new failed!");
-		return CHANNEL_RC_NO_MEMORY;
-	}
-
-	Stream_Write_UINT32(s, context->MaxNumMonitors);        /* MaxNumMonitors (4 bytes) */
-	Stream_Write_UINT32(s, context->MaxMonitorAreaFactorA); /* MaxMonitorAreaFactorA (4 bytes) */
-	Stream_Write_UINT32(s, context->MaxMonitorAreaFactorB); /* MaxMonitorAreaFactorB (4 bytes) */
-	return disp_server_packet_send(context, s);
-}
-
-/**
- * Function description
- *
- * @return 0 on success, otherwise a Win32 error code
- */
-static UINT disp_server_close(DispServerContext* context)
-{
-	UINT error = CHANNEL_RC_OK;
-	DispServerPrivate* priv = context->priv;
-
-	if (priv->thread)
-	{
-		SetEvent(priv->stopEvent);
-
-		if (WaitForSingleObject(priv->thread, INFINITE) == WAIT_FAILED)
-		{
-			error = GetLastError();
-			WLog_ERR(TAG, "WaitForSingleObject failed with error %" PRIu32 "", error);
-			return error;
-		}
-
-		CloseHandle(priv->thread);
-		CloseHandle(priv->stopEvent);
-		priv->thread = NULL;
-		priv->stopEvent = NULL;
-	}
-
-	return error;
-}
-
-DispServerContext* disp_server_context_new(HANDLE vcm)
-{
-	DispServerContext* context;
-	DispServerPrivate* priv;
-	context = (DispServerContext*)calloc(1, sizeof(DispServerContext));
-
-	if (!context)
-	{
-		WLog_ERR(TAG, "disp_server_context_new(): calloc DispServerContext failed!");
-		goto out_free;
-	}
-
-	priv = context->priv = (DispServerPrivate*)calloc(1, sizeof(DispServerPrivate));
-
-	if (!context->priv)
-	{
-		WLog_ERR(TAG, "disp_server_context_new(): calloc DispServerPrivate failed!");
-		goto out_free;
-	}
-
-	priv->input_stream = Stream_New(NULL, 4);
-
-	if (!priv->input_stream)
-	{
-		WLog_ERR(TAG, "Stream_New failed!");
-		goto out_free_priv;
-	}
-
-	context->vcm = vcm;
-	context->Open = disp_server_open;
-	context->Close = disp_server_close;
-	context->DisplayControlCaps = disp_server_send_caps_pdu;
-	priv->isReady = FALSE;
-	return context;
-out_free_priv:
-	free(context->priv);
-out_free:
-	free(context);
-	return NULL;
-}
-
-void disp_server_context_free(DispServerContext* context)
-{
-	if (!context)
-		return;
-
-	disp_server_close(context);
-
-	if (context->priv)
-	{
-		Stream_Free(context->priv->input_stream, TRUE);
-		free(context->priv);
-	}
-
-	free(context);
-}
diff -urN channels/disp/server/disp_main.h ../../informatimago/FreeRDP/channels/disp/server/disp_main.h
--- channels/disp/server/disp_main.h	2019-07-24 06:11:52.378197133 +0300
+++ ../../informatimago/FreeRDP/channels/disp/server/disp_main.h	1970-01-01 03:00:00.000000000 +0300
@@ -1,37 +0,0 @@
-/**
- * FreeRDP: A Remote Desktop Protocol Implementation
- * RDPEDISP Virtual Channel Extension
- *
- * Copyright 2019 Kobi Mizrachi <kmizrachi18@gmail.com>
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef FREERDP_CHANNEL_DISP_SERVER_MAIN_H
-#define FREERDP_CHANNEL_DISP_SERVER_MAIN_H
-
-#include <freerdp/server/disp.h>
-
-struct _disp_server_private
-{
-	BOOL isReady;
-	wStream* input_stream;
-	HANDLE channelEvent;
-	HANDLE thread;
-	HANDLE stopEvent;
-	DWORD SessionId;
-
-	void* disp_channel;
-};
-
-#endif /* FREERDP_CHANNEL_DISP_SERVER_MAIN_H */
diff -urN channels/drdynvc/client/drdynvc_main.c ../../informatimago/FreeRDP/channels/drdynvc/client/drdynvc_main.c
--- channels/drdynvc/client/drdynvc_main.c	2019-07-25 19:50:58.321884828 +0300
+++ ../../informatimago/FreeRDP/channels/drdynvc/client/drdynvc_main.c	2019-07-25 20:11:22.411955133 +0300
@@ -41,7 +41,6 @@
  */
 static UINT dvcman_get_configuration(IWTSListener* pListener, void** ppPropertyBag)
 {
-	WINPR_UNUSED(pListener);
 	*ppPropertyBag = NULL;
 	return ERROR_INTERNAL_ERROR;
 }
@@ -404,7 +403,6 @@
 {
 	UINT status;
 	DVCMAN_CHANNEL* channel = (DVCMAN_CHANNEL*)pChannel;
-	WINPR_UNUSED(pReserved);
 
 	if (!channel || !channel->dvcman)
 		return CHANNEL_RC_BAD_CHANNEL;
@@ -661,19 +659,19 @@
 	return status;
 }
 
-static UINT8 drdynvc_write_variable_uint(wStream* s, UINT32 val)
+static UINT drdynvc_write_variable_uint(wStream* s, UINT32 val)
 {
-	UINT8 cb;
+	UINT cb;
 
 	if (val <= 0xFF)
 	{
 		cb = 0;
-		Stream_Write_UINT8(s, (UINT8)val);
+		Stream_Write_UINT8(s, val);
 	}
 	else if (val <= 0xFFFF)
 	{
 		cb = 1;
-		Stream_Write_UINT16(s, (UINT16)val);
+		Stream_Write_UINT16(s, val);
 	}
 	else
 	{
@@ -734,8 +732,8 @@
 {
 	wStream* data_out;
 	size_t pos;
-	UINT8 cbChId;
-	UINT8 cbLen;
+	UINT32 cbChId;
+	UINT32 cbLen;
 	unsigned long chunkLength;
 	UINT status;
 
@@ -759,17 +757,14 @@
 	if (dataSize == 0)
 	{
 		Stream_SetPosition(data_out, 0);
-		Stream_Write_UINT8(data_out, (CLOSE_REQUEST_PDU << 4) | cbChId);
+		Stream_Write_UINT8(data_out, 0x40 | cbChId);
 		Stream_SetPosition(data_out, pos);
 		status = drdynvc_send(drdynvc, data_out);
-		/* Remove the channel from the active client channel list.
-		 * The server MAY send a response, but that is not guaranteed. */
-		dvcman_close_channel(drdynvc->channel_mgr, ChannelId);
 	}
 	else if (dataSize <= CHANNEL_CHUNK_LENGTH - pos)
 	{
 		Stream_SetPosition(data_out, 0);
-		Stream_Write_UINT8(data_out, (DATA_PDU << 4) | cbChId);
+		Stream_Write_UINT8(data_out, 0x30 | cbChId);
 		Stream_SetPosition(data_out, pos);
 		Stream_Write(data_out, data, dataSize);
 		status = drdynvc_send(drdynvc, data_out);
@@ -780,7 +775,7 @@
 		cbLen = drdynvc_write_variable_uint(data_out, dataSize);
 		pos = Stream_GetPosition(data_out);
 		Stream_SetPosition(data_out, 0);
-		Stream_Write_UINT8(data_out, (DATA_FIRST_PDU << 4) | cbChId | (cbLen << 2));
+		Stream_Write_UINT8(data_out, 0x20 | cbChId | (cbLen << 2));
 		Stream_SetPosition(data_out, pos);
 		chunkLength = CHANNEL_CHUNK_LENGTH - pos;
 		Stream_Write(data_out, data, chunkLength);
@@ -802,7 +797,7 @@
 			cbChId = drdynvc_write_variable_uint(data_out, ChannelId);
 			pos = Stream_GetPosition(data_out);
 			Stream_SetPosition(data_out, 0);
-			Stream_Write_UINT8(data_out, (DATA_PDU << 4) | cbChId);
+			Stream_Write_UINT8(data_out, 0x30 | cbChId);
 			Stream_SetPosition(data_out, pos);
 			chunkLength = dataSize;
 
@@ -951,7 +946,6 @@
 	UINT channel_status;
 	char* name;
 	size_t length;
-	WINPR_UNUSED(Sp);
 
 	if (!drdynvc)
 		return CHANNEL_RC_BAD_CHANNEL_HANDLE;
@@ -996,7 +990,7 @@
 		return CHANNEL_RC_NO_MEMORY;
 	}
 
-	Stream_Write_UINT8(data_out, (CREATE_REQUEST_PDU << 4) | cbChId);
+	Stream_Write_UINT8(data_out, 0x10 | cbChId);
 	Stream_SetPosition(s, 1);
 	Stream_Copy(s, data_out, pos - 1);
 
@@ -1091,7 +1085,7 @@
  */
 static UINT drdynvc_process_close_request(drdynvcPlugin* drdynvc, int Sp, int cbChId, wStream* s)
 {
-	UINT8 value;
+	int value;
 	UINT error;
 	UINT32 ChannelId;
 	wStream* data_out;
@@ -1372,8 +1366,6 @@
 	UINT32 index;
 	ADDIN_ARGV* args;
 	rdpSettings* settings;
-	WINPR_UNUSED(pData);
-	WINPR_UNUSED(dataLength);
 
 	if (!drdynvc)
 		return CHANNEL_RC_BAD_CHANNEL_HANDLE;
diff -urN channels/drdynvc/client/drdynvc_main.h ../../informatimago/FreeRDP/channels/drdynvc/client/drdynvc_main.h
--- channels/drdynvc/client/drdynvc_main.h	2019-07-25 19:50:58.325884847 +0300
+++ ../../informatimago/FreeRDP/channels/drdynvc/client/drdynvc_main.h	2019-07-25 20:11:22.411955133 +0300
@@ -127,7 +127,7 @@
 	DRDYNVC_STATE state;
 	DrdynvcClientContext* context;
 
-	UINT16 version;
+	int version;
 	int PriorityCharge0;
 	int PriorityCharge1;
 	int PriorityCharge2;
diff -urN channels/drive/client/drive_file.c ../../informatimago/FreeRDP/channels/drive/client/drive_file.c
--- channels/drive/client/drive_file.c	2019-07-25 19:50:58.349884967 +0300
+++ ../../informatimago/FreeRDP/channels/drive/client/drive_file.c	2019-07-25 20:11:22.435955252 +0300
@@ -64,7 +64,8 @@
 static void drive_file_fix_path(WCHAR* path)
 {
 	size_t i;
-	size_t length = _wcslen(path);
+	size_t length;
+	length = (int)_wcslen(path);
 
 	for (i = 0; i < length; i++)
 	{
@@ -89,10 +90,10 @@
 }
 
 static WCHAR* drive_file_combine_fullpath(const WCHAR* base_path, const WCHAR* path,
-                                          size_t PathLength)
+                                          UINT32 PathLength)
 {
 	WCHAR* fullpath;
-	size_t base_path_length;
+	UINT32 base_path_length;
 
 	if (!base_path || !path)
 		return NULL;
@@ -116,10 +117,11 @@
 {
 	WIN32_FIND_DATAW findFileData;
 	BOOL ret = TRUE;
+	INT len;
 	HANDLE dir;
 	WCHAR* fullpath;
 	WCHAR* path_slash;
-	size_t base_path_length;
+	UINT32 base_path_length;
 
 	if (!path)
 		return FALSE;
@@ -148,7 +150,7 @@
 
 	do
 	{
-		size_t len = _wcslen(findFileData.cFileName);
+		len = _wcslen(findFileData.cFileName);
 
 		if ((len == 1 && findFileData.cFileName[0] == L'.') ||
 		    (len == 2 && findFileData.cFileName[0] == L'.' && findFileData.cFileName[1] == L'.'))
@@ -350,7 +352,7 @@
 	file->file_handle = INVALID_HANDLE_VALUE;
 	file->find_handle = INVALID_HANDLE_VALUE;
 	file->id = id;
-	file->basepath = base_path;
+	file->basepath = (WCHAR*)base_path;
 	file->FileAttributes = FileAttributes;
 	file->DesiredAccess = DesiredAccess;
 	file->CreateDisposition = CreateDisposition;
@@ -412,10 +414,7 @@
 	if (!file)
 		return FALSE;
 
-	if (Offset > INT64_MAX)
-		return FALSE;
-
-	loffset.QuadPart = (LONGLONG)Offset;
+	loffset.QuadPart = Offset;
 	return SetFilePointerEx(file->file_handle, loffset, NULL, FILE_BEGIN);
 }
 
@@ -613,7 +612,6 @@
 		}
 
 		DEBUG_WSTR("SetFileTime %s", file->fullpath);
-		SetFileAttributesW(file->fullpath, FileAttributes);
 
 		if (!SetFileTime(file->file_handle, pftCreationTime, pftLastAccessTime, pftLastWriteTime))
 		{
@@ -621,6 +619,7 @@
 			return FALSE;
 		}
 
+		SetFileAttributesW(file->fullpath, FileAttributes);
 		break;
 
 	case FileEndOfFileInformation:
@@ -784,12 +783,9 @@
 		if (!Stream_EnsureRemainingCapacity(output, 4 + 64 + length))
 			goto out_fail;
 
-		if (length > UINT32_MAX - 64)
-			goto out_fail;
-
-		Stream_Write_UINT32(output, (UINT32)(64 + length)); /* Length */
-		Stream_Write_UINT32(output, 0);                     /* NextEntryOffset */
-		Stream_Write_UINT32(output, 0);                     /* FileIndex */
+		Stream_Write_UINT32(output, 64 + length); /* Length */
+		Stream_Write_UINT32(output, 0);           /* NextEntryOffset */
+		Stream_Write_UINT32(output, 0);           /* FileIndex */
 		Stream_Write_UINT32(output,
 		                    file->find_data.ftCreationTime.dwLowDateTime); /* CreationTime */
 		Stream_Write_UINT32(output,
@@ -810,7 +806,7 @@
 		Stream_Write_UINT32(output, file->find_data.nFileSizeLow);           /* AllocationSize */
 		Stream_Write_UINT32(output, file->find_data.nFileSizeHigh);          /* AllocationSize */
 		Stream_Write_UINT32(output, file->find_data.dwFileAttributes);       /* FileAttributes */
-		Stream_Write_UINT32(output, (UINT32)length);                         /* FileNameLength */
+		Stream_Write_UINT32(output, length);                                 /* FileNameLength */
 		Stream_Write(output, file->find_data.cFileName, length);
 		break;
 
@@ -820,12 +816,9 @@
 		if (!Stream_EnsureRemainingCapacity(output, 4 + 68 + length))
 			goto out_fail;
 
-		if (length > UINT32_MAX - 68)
-			goto out_fail;
-
-		Stream_Write_UINT32(output, (UINT32)(68 + length)); /* Length */
-		Stream_Write_UINT32(output, 0);                     /* NextEntryOffset */
-		Stream_Write_UINT32(output, 0);                     /* FileIndex */
+		Stream_Write_UINT32(output, 68 + length); /* Length */
+		Stream_Write_UINT32(output, 0);           /* NextEntryOffset */
+		Stream_Write_UINT32(output, 0);           /* FileIndex */
 		Stream_Write_UINT32(output,
 		                    file->find_data.ftCreationTime.dwLowDateTime); /* CreationTime */
 		Stream_Write_UINT32(output,
@@ -846,7 +839,7 @@
 		Stream_Write_UINT32(output, file->find_data.nFileSizeLow);           /* AllocationSize */
 		Stream_Write_UINT32(output, file->find_data.nFileSizeHigh);          /* AllocationSize */
 		Stream_Write_UINT32(output, file->find_data.dwFileAttributes);       /* FileAttributes */
-		Stream_Write_UINT32(output, (UINT32)length);                         /* FileNameLength */
+		Stream_Write_UINT32(output, length);                                 /* FileNameLength */
 		Stream_Write_UINT32(output, 0);                                      /* EaSize */
 		Stream_Write(output, file->find_data.cFileName, length);
 		break;
@@ -857,12 +850,9 @@
 		if (!Stream_EnsureRemainingCapacity(output, 4 + 93 + length))
 			goto out_fail;
 
-		if (length > UINT32_MAX - 93)
-			goto out_fail;
-
-		Stream_Write_UINT32(output, (UINT32)(93 + length)); /* Length */
-		Stream_Write_UINT32(output, 0);                     /* NextEntryOffset */
-		Stream_Write_UINT32(output, 0);                     /* FileIndex */
+		Stream_Write_UINT32(output, 93 + length); /* Length */
+		Stream_Write_UINT32(output, 0);           /* NextEntryOffset */
+		Stream_Write_UINT32(output, 0);           /* FileIndex */
 		Stream_Write_UINT32(output,
 		                    file->find_data.ftCreationTime.dwLowDateTime); /* CreationTime */
 		Stream_Write_UINT32(output,
@@ -883,7 +873,7 @@
 		Stream_Write_UINT32(output, file->find_data.nFileSizeLow);           /* AllocationSize */
 		Stream_Write_UINT32(output, file->find_data.nFileSizeHigh);          /* AllocationSize */
 		Stream_Write_UINT32(output, file->find_data.dwFileAttributes);       /* FileAttributes */
-		Stream_Write_UINT32(output, (UINT32)length);                         /* FileNameLength */
+		Stream_Write_UINT32(output, length);                                 /* FileNameLength */
 		Stream_Write_UINT32(output, 0);                                      /* EaSize */
 		Stream_Write_UINT8(output, 0);                                       /* ShortNameLength */
 		/* Reserved(1), MUST NOT be added! */
@@ -897,13 +887,10 @@
 		if (!Stream_EnsureRemainingCapacity(output, 4 + 12 + length))
 			goto out_fail;
 
-		if (length > UINT32_MAX - 12)
-			goto out_fail;
-
-		Stream_Write_UINT32(output, (UINT32)(12 + length)); /* Length */
-		Stream_Write_UINT32(output, 0);                     /* NextEntryOffset */
-		Stream_Write_UINT32(output, 0);                     /* FileIndex */
-		Stream_Write_UINT32(output, (UINT32)length);        /* FileNameLength */
+		Stream_Write_UINT32(output, 12 + length); /* Length */
+		Stream_Write_UINT32(output, 0);           /* NextEntryOffset */
+		Stream_Write_UINT32(output, 0);           /* FileIndex */
+		Stream_Write_UINT32(output, length);      /* FileNameLength */
 		Stream_Write(output, file->find_data.cFileName, length);
 		break;
 
diff -urN channels/drive/client/drive_file.h ../../informatimago/FreeRDP/channels/drive/client/drive_file.h
--- channels/drive/client/drive_file.h	2019-07-25 19:50:58.353884986 +0300
+++ ../../informatimago/FreeRDP/channels/drive/client/drive_file.h	2019-07-25 20:11:22.435955252 +0300
@@ -40,7 +40,7 @@
 	HANDLE file_handle;
 	HANDLE find_handle;
 	WIN32_FIND_DATAW find_data;
-	const WCHAR* basepath;
+	WCHAR* basepath;
 	WCHAR* fullpath;
 	WCHAR* filename;
 	BOOL delete_pending;
diff -urN channels/encomsp/server/encomsp_main.c ../../informatimago/FreeRDP/channels/encomsp/server/encomsp_main.c
--- channels/encomsp/server/encomsp_main.c	2019-07-25 19:50:58.405885244 +0300
+++ ../../informatimago/FreeRDP/channels/encomsp/server/encomsp_main.c	2019-07-25 20:11:22.487955510 +0300
@@ -111,7 +111,7 @@
 
 	if ((beg + header->Length) > end)
 	{
-		if (Stream_GetRemainingLength(s) < (size_t)((beg + header->Length) - end))
+		if (Stream_GetRemainingLength(s) < ((beg + header->Length) - end))
 		{
 			WLog_ERR(TAG, "Not enough data!");
 			return ERROR_INVALID_DATA;
diff -urN channels/geometry/client/geometry_main.c ../../informatimago/FreeRDP/channels/geometry/client/geometry_main.c
--- channels/geometry/client/geometry_main.c	2019-07-25 19:50:58.417885303 +0300
+++ ../../informatimago/FreeRDP/channels/geometry/client/geometry_main.c	2019-07-25 20:11:22.503955589 +0300
@@ -108,7 +108,6 @@
 {
 	UINT32 dwSize, iType;
 	INT32 right, bottom;
-	INT32 x, y, w, h;
 
 	if (len < 32)
 	{
@@ -134,24 +133,12 @@
 
 	Stream_Read_UINT32(s, rgndata->nRectCount);
 	Stream_Seek_UINT32(s); /* nRgnSize IGNORED */
-	Stream_Read_INT32(s, x);
-	Stream_Read_INT32(s, y);
+	Stream_Read_INT32(s, rgndata->boundingRect.x);
+	Stream_Read_INT32(s, rgndata->boundingRect.y);
 	Stream_Read_INT32(s, right);
 	Stream_Read_INT32(s, bottom);
-
-	if ((abs(x) > INT16_MAX) || (abs(y) > INT16_MAX))
-		return ERROR_INVALID_DATA;
-
-	w = right - x;
-	h = bottom - y;
-
-	if ((abs(w) > INT16_MAX) || (abs(h) > INT16_MAX))
-		return ERROR_INVALID_DATA;
-
-	rgndata->boundingRect.x = (INT16)x;
-	rgndata->boundingRect.y = (INT16)y;
-	rgndata->boundingRect.width = (INT16)w;
-	rgndata->boundingRect.height = (INT16)h;
+	rgndata->boundingRect.width = right - rgndata->boundingRect.x;
+	rgndata->boundingRect.height = bottom - rgndata->boundingRect.y;
 	len -= 32;
 
 	if (len / (4 * 4) < rgndata->nRectCount)
@@ -161,7 +148,7 @@
 
 	if (rgndata->nRectCount)
 	{
-		UINT32 i;
+		int i;
 		RDP_RECT* tmp = realloc(rgndata->rects, rgndata->nRectCount * sizeof(RDP_RECT));
 
 		if (!tmp)
@@ -174,24 +161,12 @@
 
 		for (i = 0; i < rgndata->nRectCount; i++)
 		{
-			Stream_Read_INT32(s, x);
-			Stream_Read_INT32(s, y);
+			Stream_Read_INT32(s, rgndata->rects[i].x);
+			Stream_Read_INT32(s, rgndata->rects[i].y);
 			Stream_Read_INT32(s, right);
 			Stream_Read_INT32(s, bottom);
-
-			if ((abs(x) > INT16_MAX) || (abs(y) > INT16_MAX))
-				return ERROR_INVALID_DATA;
-
-			w = right - x;
-			h = bottom - y;
-
-			if ((abs(w) > INT16_MAX) || (abs(h) > INT16_MAX))
-				return ERROR_INVALID_DATA;
-
-			rgndata->rects[i].x = (INT16)x;
-			rgndata->rects[i].y = (INT16)y;
-			rgndata->rects[i].width = (INT16)w;
-			rgndata->rects[i].height = (INT16)h;
+			rgndata->rects[i].width = right - rgndata->rects[i].x;
+			rgndata->rects[i].height = bottom - rgndata->rects[i].y;
 		}
 	}
 
@@ -373,8 +348,6 @@
 {
 	GEOMETRY_CHANNEL_CALLBACK* callback;
 	GEOMETRY_LISTENER_CALLBACK* listener_callback = (GEOMETRY_LISTENER_CALLBACK*)pListenerCallback;
-	WINPR_UNUSED(Data);
-	WINPR_UNUSED(pbAccept);
 	callback = (GEOMETRY_CHANNEL_CALLBACK*)calloc(1, sizeof(GEOMETRY_CHANNEL_CALLBACK));
 
 	if (!callback)
diff -urN channels/printer/client/printer_cups.c ../../informatimago/FreeRDP/channels/printer/client/printer_cups.c
--- channels/printer/client/printer_cups.c	2019-07-25 19:50:58.433885383 +0300
+++ ../../informatimago/FreeRDP/channels/printer/client/printer_cups.c	2019-07-25 20:11:22.515955649 +0300
@@ -82,7 +82,7 @@
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-static UINT printer_cups_write_printjob(rdpPrintJob* printjob, const BYTE* data, size_t size)
+static UINT printer_cups_write_printjob(rdpPrintJob* printjob, BYTE* data, int size)
 {
 	rdpCupsPrintJob* cups_printjob = (rdpCupsPrintJob*)printjob;
 #ifndef _CUPS_API_1_4
diff -urN channels/printer/client/printer_main.c ../../informatimago/FreeRDP/channels/printer/client/printer_main.c
--- channels/printer/client/printer_main.c	2019-07-25 19:50:58.449885462 +0300
+++ ../../informatimago/FreeRDP/channels/printer/client/printer_main.c	2019-07-25 20:11:22.527955708 +0300
@@ -35,10 +35,8 @@
 #include <winpr/thread.h>
 #include <winpr/stream.h>
 #include <winpr/interlocked.h>
-#include <winpr/path.h>
 
 #include <freerdp/channels/rdpdr.h>
-#include <freerdp/crypto/crypto.h>
 
 #include "../printer.h"
 
@@ -73,355 +71,6 @@
 	char port[64];
 };
 
-typedef enum
-{
-	PRN_CONF_PORT = 0,
-	PRN_CONF_PNP = 1,
-	PRN_CONF_DRIVER = 2,
-	PRN_CONF_DATA = 3
-} prn_conf_t;
-
-static const char* filemap[] = { "PortDosName", "PnPName", "DriverName",
-	                             "CachedPrinterConfigData" };
-
-static char* get_printer_config_path(const rdpSettings* settings, const WCHAR* name, size_t length)
-{
-	char* dir = GetCombinedPath(settings->ConfigPath, "printers");
-	char* bname = crypto_base64_encode((const BYTE*)name, (int)length);
-	char* config = GetCombinedPath(dir, bname);
-
-	if (config && !PathFileExistsA(config))
-	{
-		if (!PathMakePathA(config, NULL))
-		{
-			free(config);
-			config = NULL;
-		}
-	}
-
-	free(dir);
-	free(bname);
-	return config;
-}
-
-static BOOL printer_write_setting(const char* path, prn_conf_t type, const void* data,
-                                  size_t length)
-{
-	DWORD written = 0;
-	BOOL rc = FALSE;
-	HANDLE file;
-	size_t b64len;
-	char* base64 = NULL;
-	const char* name = filemap[type];
-	char* abs = GetCombinedPath(path, name);
-
-	if (!abs)
-		return FALSE;
-
-	file = CreateFileA(abs, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
-	free(abs);
-
-	if (file == INVALID_HANDLE_VALUE)
-		return FALSE;
-
-	if (length > 0)
-	{
-		base64 = crypto_base64_encode(data, length);
-
-		if (!base64)
-			goto fail;
-
-		b64len = strlen(base64);
-		rc = WriteFile(file, base64, b64len, &written, NULL);
-
-		if (b64len != written)
-			rc = FALSE;
-	}
-	else
-		rc = TRUE;
-
-fail:
-	CloseHandle(file);
-	free(base64);
-	return rc;
-}
-
-static BOOL printer_config_valid(const char* path)
-{
-	if (!path)
-		return FALSE;
-
-	if (!PathFileExistsA(path))
-		return FALSE;
-
-	return TRUE;
-}
-
-static BOOL printer_read_setting(const char* path, prn_conf_t type, void** data, UINT32* length)
-{
-	DWORD lowSize, highSize;
-	DWORD read = 0;
-	BOOL rc = FALSE;
-	HANDLE file;
-	char* fdata = NULL;
-	const char* name = filemap[type];
-	char* abs = GetCombinedPath(path, name);
-
-	if (!abs)
-		return FALSE;
-
-	file = CreateFileA(abs, GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
-	free(abs);
-
-	if (file == INVALID_HANDLE_VALUE)
-		return FALSE;
-
-	lowSize = GetFileSize(file, &highSize);
-
-	if ((lowSize == INVALID_FILE_SIZE) || (highSize != 0))
-		goto fail;
-
-	if (lowSize != 0)
-	{
-		fdata = malloc(lowSize);
-
-		if (!fdata)
-			goto fail;
-
-		rc = ReadFile(file, fdata, lowSize, &read, NULL);
-
-		if (lowSize != read)
-			rc = FALSE;
-	}
-
-fail:
-	CloseHandle(file);
-
-	if (rc && (lowSize <= INT_MAX))
-	{
-		int blen = 0;
-		crypto_base64_decode(fdata, (int)lowSize, (BYTE**)data, &blen);
-
-		if (*data && (blen > 0))
-			*length = (UINT32)blen;
-		else
-		{
-			rc = FALSE;
-			*length = 0;
-		}
-	}
-	else
-	{
-		*length = 0;
-		*data = NULL;
-	}
-
-	free(fdata);
-	return rc;
-}
-
-static BOOL printer_save_to_config(const rdpSettings* settings, const char* PortDosName,
-                                   size_t PortDosNameLen, const WCHAR* PnPName, size_t PnPNameLen,
-                                   const WCHAR* DriverName, size_t DriverNameLen,
-                                   const WCHAR* PrinterName, size_t PrintNameLen,
-                                   const BYTE* CachedPrinterConfigData, size_t CacheFieldsLen)
-{
-	BOOL rc = FALSE;
-	char* path = get_printer_config_path(settings, PrinterName, PrintNameLen);
-
-	if (!path)
-		goto fail;
-
-	if (!printer_write_setting(path, PRN_CONF_PORT, PortDosName, PortDosNameLen))
-		goto fail;
-
-	if (!printer_write_setting(path, PRN_CONF_PNP, PnPName, PnPNameLen))
-		goto fail;
-
-	if (!printer_write_setting(path, PRN_CONF_DRIVER, DriverName, DriverNameLen))
-		goto fail;
-
-	if (!printer_write_setting(path, PRN_CONF_DATA, CachedPrinterConfigData, CacheFieldsLen))
-		goto fail;
-
-fail:
-	free(path);
-	return rc;
-}
-
-static BOOL printer_update_to_config(const rdpSettings* settings, const WCHAR* name, size_t length,
-                                     const BYTE* data, size_t datalen)
-{
-	BOOL rc = FALSE;
-	char* path = get_printer_config_path(settings, name, length);
-	rc = printer_write_setting(path, PRN_CONF_DATA, data, datalen);
-	free(path);
-	return rc;
-}
-
-static BOOL printer_remove_config(const rdpSettings* settings, const WCHAR* name, size_t length)
-{
-	BOOL rc = FALSE;
-	char* path = get_printer_config_path(settings, name, length);
-
-	if (!printer_config_valid(path))
-		goto fail;
-
-	rc = RemoveDirectoryA(path);
-fail:
-	free(path);
-	return rc;
-}
-
-static BOOL printer_move_config(const rdpSettings* settings, const WCHAR* oldName, size_t oldLength,
-                                const WCHAR* newName, size_t newLength)
-{
-	BOOL rc = FALSE;
-	char* oldPath = get_printer_config_path(settings, oldName, oldLength);
-	char* newPath = get_printer_config_path(settings, newName, newLength);
-
-	if (printer_config_valid(oldPath))
-		rc = MoveFileA(oldPath, newPath);
-
-	free(oldPath);
-	free(newPath);
-	return rc;
-}
-
-static BOOL printer_load_from_config(const rdpSettings* settings, rdpPrinter* printer,
-                                     PRINTER_DEVICE* printer_dev)
-{
-	BOOL res = FALSE;
-	WCHAR* wname = NULL;
-	size_t wlen;
-	char* path = NULL;
-	int rc;
-	UINT32 flags = 0;
-	void* DriverName = NULL;
-	UINT32 DriverNameLen = 0;
-	void* PnPName = NULL;
-	UINT32 PnPNameLen = 0;
-	void* CachedPrinterConfigData = NULL;
-	UINT32 CachedFieldsLen = 0;
-	UINT32 PrinterNameLen = 0;
-
-	if (!settings || !printer)
-		return FALSE;
-
-	rc = ConvertToUnicode(CP_UTF8, 0, printer->name, -1, &wname, 0);
-
-	if (rc <= 0)
-		goto fail;
-
-	wlen = _wcslen(wname) + 1;
-	path = get_printer_config_path(settings, wname, wlen * sizeof(WCHAR));
-	PrinterNameLen = (wlen + 1) * sizeof(WCHAR);
-
-	if (!path)
-		goto fail;
-
-	if (printer->is_default)
-		flags |= RDPDR_PRINTER_ANNOUNCE_FLAG_DEFAULTPRINTER;
-
-	if (!printer_read_setting(path, PRN_CONF_PNP, &PnPName, &PnPNameLen))
-	{
-	}
-
-	if (!printer_read_setting(path, PRN_CONF_DRIVER, &DriverName, &DriverNameLen))
-	{
-		DriverNameLen =
-		    ConvertToUnicode(CP_UTF8, 0, printer->driver, -1, (LPWSTR*)&DriverName, 0) * 2 + 1;
-	}
-
-	if (!printer_read_setting(path, PRN_CONF_DATA, &CachedPrinterConfigData, &CachedFieldsLen))
-	{
-	}
-
-	Stream_SetPosition(printer_dev->device.data, 0);
-
-	if (!Stream_EnsureRemainingCapacity(printer_dev->device.data, 24))
-		goto fail;
-
-	Stream_Write_UINT32(printer_dev->device.data, flags);
-	Stream_Write_UINT32(printer_dev->device.data, 0);          /* CodePage, reserved */
-	Stream_Write_UINT32(printer_dev->device.data, PnPNameLen); /* PnPNameLen */
-	Stream_Write_UINT32(printer_dev->device.data, DriverNameLen);
-	Stream_Write_UINT32(printer_dev->device.data, PrinterNameLen);
-	Stream_Write_UINT32(printer_dev->device.data, CachedFieldsLen);
-
-	if (!Stream_EnsureRemainingCapacity(printer_dev->device.data, PnPNameLen))
-		goto fail;
-
-	if (PnPNameLen > 0)
-		Stream_Write(printer_dev->device.data, PnPName, PnPNameLen);
-
-	if (!Stream_EnsureRemainingCapacity(printer_dev->device.data, DriverNameLen))
-		goto fail;
-
-	Stream_Write(printer_dev->device.data, DriverName, DriverNameLen);
-
-	if (!Stream_EnsureRemainingCapacity(printer_dev->device.data, PrinterNameLen))
-		goto fail;
-
-	Stream_Write(printer_dev->device.data, wname, PrinterNameLen);
-
-	if (!Stream_EnsureRemainingCapacity(printer_dev->device.data, CachedFieldsLen))
-		goto fail;
-
-	Stream_Write(printer_dev->device.data, CachedPrinterConfigData, CachedFieldsLen);
-	res = TRUE;
-fail:
-	free(path);
-	free(wname);
-	free(PnPName);
-	free(DriverName);
-	free(CachedPrinterConfigData);
-	return res;
-}
-
-static BOOL printer_save_default_config(const rdpSettings* settings, rdpPrinter* printer)
-{
-	BOOL res = FALSE;
-	WCHAR* wname = NULL;
-	WCHAR* driver = NULL;
-	size_t wlen, dlen;
-	char* path = NULL;
-	int rc;
-
-	if (!settings || !printer)
-		return FALSE;
-
-	rc = ConvertToUnicode(CP_UTF8, 0, printer->name, -1, &wname, 0);
-
-	if (rc <= 0)
-		goto fail;
-
-	rc = ConvertToUnicode(CP_UTF8, 0, printer->driver, -1, &driver, 0);
-
-	if (rc <= 0)
-		goto fail;
-
-	wlen = _wcslen(wname) + 1;
-	dlen = _wcslen(driver) + 1;
-	path = get_printer_config_path(settings, wname, wlen * sizeof(WCHAR));
-
-	if (!path)
-		goto fail;
-
-	if (dlen > 1)
-	{
-		if (!printer_write_setting(path, PRN_CONF_DRIVER, driver, dlen * sizeof(WCHAR)))
-			goto fail;
-	}
-
-	res = TRUE;
-fail:
-	free(path);
-	free(wname);
-	free(driver);
-	return res;
-}
-
 /**
  * Function description
  *
@@ -640,181 +289,6 @@
 	return CHANNEL_RC_OK;
 }
 
-static UINT printer_custom_component(DEVICE* device, UINT16 component, UINT16 packetId, wStream* s)
-{
-	UINT32 eventID;
-	PRINTER_DEVICE* printer_dev = (PRINTER_DEVICE*)device;
-	const rdpSettings* settings = printer_dev->rdpcontext->settings;
-
-	if (component != RDPDR_CTYP_PRN)
-		return ERROR_INVALID_DATA;
-
-	if (Stream_GetRemainingLength(s) < 4)
-		return ERROR_INVALID_DATA;
-
-	Stream_Read_UINT32(s, eventID);
-
-	switch (packetId)
-	{
-	case PAKID_PRN_CACHE_DATA:
-		switch (eventID)
-		{
-		case RDPDR_ADD_PRINTER_EVENT:
-		{
-			char PortDosName[8];
-			UINT32 PnPNameLen, DriverNameLen, PrintNameLen, CacheFieldsLen;
-			const WCHAR *PnPName, *DriverName, *PrinterName;
-			const BYTE* CachedPrinterConfigData;
-
-			if (Stream_GetRemainingLength(s) < 24)
-				return ERROR_INVALID_DATA;
-
-			Stream_Read(s, PortDosName, sizeof(PortDosName));
-			Stream_Read_UINT32(s, PnPNameLen);
-			Stream_Read_UINT32(s, DriverNameLen);
-			Stream_Read_UINT32(s, PrintNameLen);
-			Stream_Read_UINT32(s, CacheFieldsLen);
-
-			if (Stream_GetRemainingLength(s) < PnPNameLen)
-				return ERROR_INVALID_DATA;
-
-			PnPName = (const WCHAR*)Stream_Pointer(s);
-			Stream_Seek(s, PnPNameLen);
-
-			if (Stream_GetRemainingLength(s) < DriverNameLen)
-				return ERROR_INVALID_DATA;
-
-			DriverName = (const WCHAR*)Stream_Pointer(s);
-			Stream_Seek(s, DriverNameLen);
-
-			if (Stream_GetRemainingLength(s) < PrintNameLen)
-				return ERROR_INVALID_DATA;
-
-			PrinterName = (const WCHAR*)Stream_Pointer(s);
-			Stream_Seek(s, PrintNameLen);
-
-			if (Stream_GetRemainingLength(s) < CacheFieldsLen)
-				return ERROR_INVALID_DATA;
-
-			CachedPrinterConfigData = Stream_Pointer(s);
-			Stream_Seek(s, CacheFieldsLen);
-
-			if (!printer_save_to_config(settings, PortDosName, sizeof(PortDosName), PnPName,
-			                            PnPNameLen, DriverName, DriverNameLen, PrinterName,
-			                            PrintNameLen, CachedPrinterConfigData, CacheFieldsLen))
-				return ERROR_INTERNAL_ERROR;
-		}
-		break;
-
-		case RDPDR_UPDATE_PRINTER_EVENT:
-		{
-			UINT32 PrinterNameLen, ConfigDataLen;
-			const WCHAR* PrinterName;
-			const BYTE* ConfigData;
-
-			if (Stream_GetRemainingLength(s) < 8)
-				return ERROR_INVALID_DATA;
-
-			Stream_Read_UINT32(s, PrinterNameLen);
-			Stream_Read_UINT32(s, ConfigDataLen);
-
-			if (Stream_GetRemainingLength(s) < PrinterNameLen)
-				return ERROR_INVALID_DATA;
-
-			PrinterName = (const WCHAR*)Stream_Pointer(s);
-			Stream_Seek(s, PrinterNameLen);
-
-			if (Stream_GetRemainingLength(s) < ConfigDataLen)
-				return ERROR_INVALID_DATA;
-
-			ConfigData = Stream_Pointer(s);
-			Stream_Seek(s, ConfigDataLen);
-
-			if (!printer_update_to_config(settings, PrinterName, PrinterNameLen, ConfigData,
-			                              ConfigDataLen))
-				return ERROR_INTERNAL_ERROR;
-		}
-		break;
-
-		case RDPDR_DELETE_PRINTER_EVENT:
-		{
-			UINT32 PrinterNameLen;
-			const WCHAR* PrinterName;
-
-			if (Stream_GetRemainingLength(s) < 4)
-				return ERROR_INVALID_DATA;
-
-			Stream_Read_UINT32(s, PrinterNameLen);
-
-			if (Stream_GetRemainingLength(s) < PrinterNameLen)
-				return ERROR_INVALID_DATA;
-
-			PrinterName = (const WCHAR*)Stream_Pointer(s);
-			Stream_Seek(s, PrinterNameLen);
-			printer_remove_config(settings, PrinterName, PrinterNameLen);
-		}
-		break;
-
-		case RDPDR_RENAME_PRINTER_EVENT:
-		{
-			UINT32 OldPrinterNameLen, NewPrinterNameLen;
-			const WCHAR* OldPrinterName;
-			const WCHAR* NewPrinterName;
-
-			if (Stream_GetRemainingLength(s) < 8)
-				return ERROR_INVALID_DATA;
-
-			Stream_Read_UINT32(s, OldPrinterNameLen);
-			Stream_Read_UINT32(s, NewPrinterNameLen);
-
-			if (Stream_GetRemainingLength(s) < OldPrinterNameLen)
-				return ERROR_INVALID_DATA;
-
-			OldPrinterName = (const WCHAR*)Stream_Pointer(s);
-			Stream_Seek(s, OldPrinterNameLen);
-
-			if (Stream_GetRemainingLength(s) < NewPrinterNameLen)
-				return ERROR_INVALID_DATA;
-
-			NewPrinterName = (const WCHAR*)Stream_Pointer(s);
-			Stream_Seek(s, NewPrinterNameLen);
-
-			if (!printer_move_config(settings, OldPrinterName, OldPrinterNameLen, NewPrinterName,
-			                         NewPrinterNameLen))
-				return ERROR_INTERNAL_ERROR;
-		}
-		break;
-
-		default:
-			WLog_ERR(TAG, "Unknown cache data eventID: 0x%08" PRIX32 "", eventID);
-			return ERROR_INVALID_DATA;
-		}
-
-		break;
-
-	case PAKID_PRN_USING_XPS:
-	{
-		UINT32 flags;
-
-		if (Stream_GetRemainingLength(s) < 4)
-			return ERROR_INVALID_DATA;
-
-		Stream_Read_UINT32(s, flags);
-		WLog_ERR(TAG,
-		         "Ignoring unhandled message PAKID_PRN_USING_XPS [printerID=%08" PRIx32
-		         ", flags=%08" PRIx32 "]",
-		         eventID, flags);
-	}
-	break;
-
-	default:
-		WLog_ERR(TAG, "Unknown printing component packetID: 0x%04" PRIX16 "", packetId);
-		return ERROR_INVALID_DATA;
-	}
-
-	return CHANNEL_RC_OK;
-}
-
 /**
  * Function description
  *
@@ -831,12 +305,7 @@
 	{
 		error = GetLastError();
 		WLog_ERR(TAG, "WaitForSingleObject failed with error %" PRIu32 "", error);
-		/* The analyzer is confused by this premature return value.
-		 * Since this case can not be handled gracefully silence the
-		 * analyzer here. */
-#ifndef __clang_analyzer__
 		return error;
-#endif
 	}
 
 	while ((irp = (IRP*)InterlockedPopEntrySList(printer_dev->pIrpList)) != NULL)
@@ -862,8 +331,15 @@
  */
 UINT printer_register(PDEVICE_SERVICE_ENTRY_POINTS pEntryPoints, rdpPrinter* printer)
 {
+	UINT32 Flags;
+	int DriverNameLen;
+	WCHAR* DriverName = NULL;
+	int PrintNameLen;
+	WCHAR* PrintName = NULL;
+	UINT32 CachedFieldsLen;
+	BYTE* CachedPrinterConfigData;
 	PRINTER_DEVICE* printer_dev;
-	UINT error = ERROR_INTERNAL_ERROR;
+	UINT error;
 	printer_dev = (PRINTER_DEVICE*)calloc(1, sizeof(PRINTER_DEVICE));
 
 	if (!printer_dev)
@@ -872,19 +348,52 @@
 		return CHANNEL_RC_NO_MEMORY;
 	}
 
-	printer_dev->device.data = Stream_New(NULL, 1024);
-
-	if (!printer_dev->device.data)
-		goto error_out;
-
 	sprintf_s(printer_dev->port, sizeof(printer_dev->port), "PRN%d", printer->id);
 	printer_dev->device.type = RDPDR_DTYP_PRINT;
 	printer_dev->device.name = printer_dev->port;
 	printer_dev->device.IRPRequest = printer_irp_request;
-	printer_dev->device.CustomComponentRequest = printer_custom_component;
 	printer_dev->device.Free = printer_free;
 	printer_dev->rdpcontext = pEntryPoints->rdpcontext;
 	printer_dev->printer = printer;
+	CachedFieldsLen = 0;
+	CachedPrinterConfigData = NULL;
+	Flags = 0;
+
+	if (printer->is_default)
+		Flags |= RDPDR_PRINTER_ANNOUNCE_FLAG_DEFAULTPRINTER;
+
+	DriverNameLen = ConvertToUnicode(CP_UTF8, 0, printer->driver, -1, &DriverName, 0) * 2;
+	PrintNameLen = ConvertToUnicode(CP_UTF8, 0, printer->name, -1, &PrintName, 0) * 2;
+	printer_dev->device.data =
+	    Stream_New(NULL, 28 + DriverNameLen + PrintNameLen + CachedFieldsLen);
+
+	if (!printer_dev->device.data)
+	{
+		WLog_ERR(TAG, "calloc failed!");
+		error = CHANNEL_RC_NO_MEMORY;
+		free(DriverName);
+		free(PrintName);
+		goto error_out;
+	}
+
+	Stream_Write_UINT32(printer_dev->device.data, Flags);
+	Stream_Write_UINT32(printer_dev->device.data, 0); /* CodePage, reserved */
+	Stream_Write_UINT32(printer_dev->device.data, 0); /* PnPNameLen */
+	Stream_Write_UINT32(printer_dev->device.data, DriverNameLen + 2);
+	Stream_Write_UINT32(printer_dev->device.data, PrintNameLen + 2);
+	Stream_Write_UINT32(printer_dev->device.data, CachedFieldsLen);
+	Stream_Write(printer_dev->device.data, DriverName, DriverNameLen);
+	Stream_Write_UINT16(printer_dev->device.data, 0);
+	Stream_Write(printer_dev->device.data, PrintName, PrintNameLen);
+	Stream_Write_UINT16(printer_dev->device.data, 0);
+
+	if (CachedFieldsLen > 0)
+	{
+		Stream_Write(printer_dev->device.data, CachedPrinterConfigData, CachedFieldsLen);
+	}
+
+	free(DriverName);
+	free(PrintName);
 	printer_dev->pIrpList = (WINPR_PSLIST_HEADER)_aligned_malloc(sizeof(WINPR_SLIST_HEADER),
 	                                                             MEMORY_ALLOCATION_ALIGNMENT);
 
@@ -895,9 +404,6 @@
 		goto error_out;
 	}
 
-	if (!printer_load_from_config(pEntryPoints->rdpcontext->settings, printer, printer_dev))
-		goto error_out;
-
 	InitializeSListHead(printer_dev->pIrpList);
 
 	if (!(printer_dev->event = CreateEvent(NULL, TRUE, FALSE, NULL)))
@@ -982,9 +488,6 @@
 			return CHANNEL_RC_INITIALIZATION_ERROR;
 		}
 
-		if (!printer_save_default_config(pEntryPoints->rdpcontext->settings, printer))
-			return CHANNEL_RC_INITIALIZATION_ERROR;
-
 		if ((error = printer_register(pEntryPoints, printer)))
 		{
 			WLog_ERR(TAG, "printer_register failed with error %" PRIu32 "!", error);
diff -urN channels/printer/client/printer_main.h ../../informatimago/FreeRDP/channels/printer/client/printer_main.h
--- channels/printer/client/printer_main.h	2019-07-25 19:50:58.453885482 +0300
+++ ../../informatimago/FreeRDP/channels/printer/client/printer_main.h	2019-07-25 20:11:22.527955708 +0300
@@ -55,7 +55,7 @@
 	pcFreePrinter Free;
 };
 
-typedef UINT (*pcWritePrintJob)(rdpPrintJob* printjob, const BYTE* data, size_t size);
+typedef UINT (*pcWritePrintJob)(rdpPrintJob* printjob, BYTE* data, int size);
 typedef void (*pcClosePrintJob)(rdpPrintJob* printjob);
 
 struct rdp_print_job
diff -urN channels/rail/client/rail_main.c ../../informatimago/FreeRDP/channels/rail/client/rail_main.c
--- channels/rail/client/rail_main.c	2019-07-25 19:50:58.473885580 +0300
+++ ../../informatimago/FreeRDP/channels/rail/client/rail_main.c	2019-07-25 20:11:22.547955807 +0300
@@ -76,15 +76,13 @@
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-UINT rail_send_channel_data(railPlugin* rail, wStream* src)
+UINT rail_send_channel_data(railPlugin* rail, void* data, size_t length)
 {
-	wStream* s;
-	size_t length;
+	wStream* s = NULL;
 
-	if (!rail || !src)
+	if (!rail || !data)
 		return ERROR_INVALID_PARAMETER;
 
-	length = Stream_GetPosition(src);
 	s = Stream_New(NULL, length);
 
 	if (!s)
@@ -93,7 +91,7 @@
 		return CHANNEL_RC_NO_MEMORY;
 	}
 
-	Stream_Write(s, Stream_Buffer(src), length);
+	Stream_Write(s, data, length);
 	return rail_send(rail, s);
 }
 
@@ -126,6 +124,12 @@
 	if (!exeOrFile)
 		return ERROR_INVALID_PARAMETER;
 
+	if (strnlen(exeOrFile, MAX_PATH) >= 2)
+	{
+		if (strncmp(exeOrFile, "||", 2) != 0)
+			flags |= RAIL_EXEC_FLAG_FILE;
+	}
+
 	if (!rail_string_to_unicode_string(exec->RemoteApplicationProgram,
 	                                   &ruExeOrFile) || /* RemoteApplicationProgram */
 	    !rail_string_to_unicode_string(exec->RemoteApplicationWorkingDir,
@@ -194,18 +198,9 @@
 		length += sysparam->highContrast.colorSchemeLength + 10;
 		break;
 
-	case SPI_SETFILTERKEYS:
-		length += 20;
-		break;
-
-	case SPI_SETSTICKYKEYS:
-	case SPI_SETCARETWIDTH:
-	case SPI_SETTOGGLEKEYS:
-		length += 4;
-		break;
-
 	default:
-		return ERROR_BAD_ARGUMENTS;
+		length += 8;
+		break;
 	}
 
 	s = rail_pdu_init(length);
@@ -216,14 +211,14 @@
 		return CHANNEL_RC_NO_MEMORY;
 	}
 
-	if ((error = rail_write_client_sysparam_order(rail, s, sysparam)))
+	if ((error = rail_write_client_sysparam_order(s, sysparam)))
 	{
 		WLog_ERR(TAG, "rail_write_client_sysparam_order failed with error %" PRIu32 "!", error);
 		Stream_Free(s, TRUE);
 		return error;
 	}
 
-	if ((error = rail_send_pdu(rail, s, TS_RAIL_ORDER_SYSPARAM)))
+	if ((error = rail_send_pdu(rail, s, RDP_RAIL_ORDER_SYSPARAM)))
 	{
 		WLog_ERR(TAG, "rail_send_pdu failed with error %" PRIu32 "!", error);
 	}
@@ -393,7 +388,7 @@
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-static UINT rail_server_handshake_ex(RailClientContext* context,
+static UINT rail_client_handshake_ex(RailClientContext* context,
                                      const RAIL_HANDSHAKE_EX_ORDER* handshakeEx)
 {
 	railPlugin* rail;
@@ -402,7 +397,21 @@
 		return ERROR_INVALID_PARAMETER;
 
 	rail = (railPlugin*)context->handle;
-	return CHANNEL_RC_OK;
+	return rail_send_handshake_ex_order(rail, handshakeEx);
+}
+
+/**
+ * Function description
+ *
+ * @return 0 on success, otherwise a Win32 error code
+ */
+static UINT rail_server_handshake_ex(RailClientContext* context,
+                                     const RAIL_HANDSHAKE_EX_ORDER* handshakeEx)
+{
+	if (!context || !handshakeEx)
+		return ERROR_INVALID_PARAMETER;
+
+	return CHANNEL_RC_OK; /* stub - should be registered by client */
 }
 
 /**
@@ -531,18 +540,6 @@
 	return CHANNEL_RC_OK; /* stub - should be registered by client */
 }
 
-static UINT rail_client_language_ime_info(RailClientContext* context,
-                                          const RAIL_LANGUAGEIME_INFO_ORDER* langImeInfo)
-{
-	railPlugin* rail;
-
-	if (!context || !langImeInfo)
-		return ERROR_INVALID_PARAMETER;
-
-	rail = (railPlugin*)context->handle;
-	return rail_send_client_languageime_info_order(rail, langImeInfo);
-}
-
 /**
  * Function description
  *
@@ -574,28 +571,6 @@
 	return rail_send_client_get_appid_req_order(rail, getAppIdReq);
 }
 
-static UINT rail_client_cloak(RailClientContext* context, const RAIL_CLOAK* cloak)
-{
-	railPlugin* rail;
-
-	if (!context || !cloak || !context->handle)
-		return ERROR_INVALID_PARAMETER;
-
-	rail = (railPlugin*)context->handle;
-	return rail_send_client_order_cloak_order(rail, cloak);
-}
-
-static UINT rail_client_snap_arrange(RailClientContext* context, const RAIL_SNAP_ARRANGE* snap)
-{
-	railPlugin* rail;
-
-	if (!context || !snap || !context->handle)
-		return ERROR_INVALID_PARAMETER;
-
-	rail = (railPlugin*)context->handle;
-	return rail_send_client_order_snap_arrange_order(rail, snap);
-}
-
 /**
  * Function description
  *
@@ -935,6 +910,7 @@
 		context->ClientSystemCommand = rail_client_system_command;
 		context->ClientHandshake = rail_client_handshake;
 		context->ServerHandshake = rail_server_handshake;
+		context->ClientHandshakeEx = rail_client_handshake_ex;
 		context->ServerHandshakeEx = rail_server_handshake_ex;
 		context->ClientNotifyEvent = rail_client_notify_event;
 		context->ClientWindowMove = rail_client_window_move;
@@ -944,12 +920,9 @@
 		context->ClientSystemMenu = rail_client_system_menu;
 		context->ClientLanguageBarInfo = rail_client_language_bar_info;
 		context->ServerLanguageBarInfo = rail_server_language_bar_info;
-		context->ClientLanguageIMEInfo = rail_client_language_ime_info;
 		context->ServerExecuteResult = rail_server_execute_result;
 		context->ClientGetAppIdRequest = rail_client_get_appid_request;
 		context->ServerGetAppIdResponse = rail_server_get_appid_response;
-		context->ClientSnapArrange = rail_client_snap_arrange;
-		context->ClientCloak = rail_client_cloak;
 		rail->rdpcontext = pEntryPointsEx->context;
 		rail->context = context;
 		isFreerdp = TRUE;
diff -urN channels/rail/client/rail_main.h ../../informatimago/FreeRDP/channels/rail/client/rail_main.h
--- channels/rail/client/rail_main.h	2019-07-24 06:11:52.382197152 +0300
+++ ../../informatimago/FreeRDP/channels/rail/client/rail_main.h	2019-07-19 20:00:17.341205921 +0300
@@ -50,13 +50,10 @@
 	DWORD OpenHandle;
 	wMessageQueue* queue;
 	rdpContext* rdpcontext;
-	DWORD channelBuildNumber;
-	DWORD channelFlags;
-	RAIL_CLIENT_STATUS_ORDER clientStatus;
 };
 typedef struct rail_plugin railPlugin;
 
 RailClientContext* rail_get_client_interface(railPlugin* rail);
-UINT rail_send_channel_data(railPlugin* rail, wStream* s);
+UINT rail_send_channel_data(railPlugin* rail, void* data, size_t length);
 
 #endif /* FREERDP_CHANNEL_RAIL_CLIENT_MAIN_H */
diff -urN channels/rail/client/rail_orders.c ../../informatimago/FreeRDP/channels/rail/client/rail_orders.c
--- channels/rail/client/rail_orders.c	2019-07-25 19:50:58.497885700 +0300
+++ ../../informatimago/FreeRDP/channels/rail/client/rail_orders.c	2019-07-25 20:11:22.563955887 +0300
@@ -100,7 +100,7 @@
 	WLog_Print(rail->log, WLOG_DEBUG, "Sending %s PDU, length: %" PRIu16 "",
 	           RAIL_ORDER_TYPE_STRINGS[((orderType & 0xF0) >> 3) + (orderType & 0x0F)],
 	           orderLength);
-	return rail_send_channel_data(rail, s);
+	return rail_send_channel_data(rail, Stream_Buffer(s), orderLength);
 }
 
 /**
@@ -121,19 +121,6 @@
 	return rail_write_unicode_string(s, &highContrast->colorScheme); /* colorScheme */
 }
 
-static UINT rail_write_filterkeys(wStream* s, const TS_FILTERKEYS* filterKeys)
-{
-	if (!s || !filterKeys)
-		return ERROR_INVALID_PARAMETER;
-
-	Stream_Write_UINT32(s, filterKeys->Flags);
-	Stream_Write_UINT32(s, filterKeys->WaitTime);
-	Stream_Write_UINT32(s, filterKeys->DelayTime);
-	Stream_Write_UINT32(s, filterKeys->RepeatTime);
-	Stream_Write_UINT32(s, filterKeys->BounceTime);
-	return CHANNEL_RC_OK;
-}
-
 /**
  * Function description
  *
@@ -182,11 +169,11 @@
 
 	switch (sysparam->param)
 	{
-	case SPI_SETSCREENSAVEACTIVE:
+	case SPI_SET_SCREEN_SAVE_ACTIVE:
 		sysparam->setScreenSaveActive = (body != 0) ? TRUE : FALSE;
 		break;
 
-	case SPI_SETSCREENSAVESECURE:
+	case SPI_SET_SCREEN_SAVE_SECURE:
 		sysparam->setScreenSaveSecure = (body != 0) ? TRUE : FALSE;
 		break;
 
@@ -362,8 +349,7 @@
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-UINT rail_write_client_sysparam_order(railPlugin* rail, wStream* s,
-                                      const RAIL_SYSPARAM_ORDER* sysparam)
+UINT rail_write_client_sysparam_order(wStream* s, const RAIL_SYSPARAM_ORDER* sysparam)
 {
 	BYTE body;
 	UINT error = CHANNEL_RC_OK;
@@ -419,40 +405,6 @@
 	case SPI_SET_HIGH_CONTRAST:
 		error = rail_write_high_contrast(s, &sysparam->highContrast);
 		break;
-
-	case SPI_SETCARETWIDTH:
-		if ((rail->channelFlags & TS_RAIL_ORDER_HANDSHAKE_EX_FLAGS_EXTENDED_SPI_SUPPORTED) == 0)
-			return ERROR_INVALID_DATA;
-
-		if (sysparam->caretWidth < 0x0001)
-			return ERROR_INVALID_DATA;
-
-		Stream_Write_UINT32(s, sysparam->caretWidth);
-		break;
-
-	case SPI_SETSTICKYKEYS:
-		if ((rail->channelFlags & TS_RAIL_ORDER_HANDSHAKE_EX_FLAGS_EXTENDED_SPI_SUPPORTED) == 0)
-			return ERROR_INVALID_DATA;
-
-		Stream_Write_UINT32(s, sysparam->stickyKeys);
-		break;
-
-	case SPI_SETTOGGLEKEYS:
-		if ((rail->channelFlags & TS_RAIL_ORDER_HANDSHAKE_EX_FLAGS_EXTENDED_SPI_SUPPORTED) == 0)
-			return ERROR_INVALID_DATA;
-
-		Stream_Write_UINT32(s, sysparam->toggleKeys);
-		break;
-
-	case SPI_SETFILTERKEYS:
-		if ((rail->channelFlags & TS_RAIL_ORDER_HANDSHAKE_EX_FLAGS_EXTENDED_SPI_SUPPORTED) == 0)
-			return ERROR_INVALID_DATA;
-
-		error = rail_write_filterkeys(s, &sysparam->filterKeys);
-		break;
-
-	default:
-		return ERROR_INVALID_PARAMETER;
 	}
 
 	return error;
@@ -537,53 +489,28 @@
 	return ERROR_SUCCESS;
 }
 
-static UINT rail_write_languageime_info_order(wStream* s,
-                                              const RAIL_LANGUAGEIME_INFO_ORDER* langImeInfo)
-{
-	if (!s || !langImeInfo)
-		return ERROR_INVALID_PARAMETER;
-
-	Stream_Write_UINT32(s, langImeInfo->ProfileType);
-	Stream_Write_UINT32(s, langImeInfo->LanguageID);
-	Stream_Write(s, &langImeInfo->LanguageProfileCLSID, sizeof(langImeInfo->LanguageProfileCLSID));
-	Stream_Write(s, &langImeInfo->ProfileGUID, sizeof(langImeInfo->ProfileGUID));
-	Stream_Write_UINT32(s, langImeInfo->KeyboardLayout);
-	return ERROR_SUCCESS;
-}
-
 /**
  * Function description
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-static UINT rail_recv_handshake_order(railPlugin* rail, wStream* s)
+static UINT rail_recv_handshake_order(railPlugin* rail, RAIL_HANDSHAKE_ORDER* handshake, wStream* s)
 {
 	RailClientContext* context = rail_get_client_interface(rail);
-	RAIL_HANDSHAKE_ORDER serverHandshake = { 0 };
-	RAIL_HANDSHAKE_ORDER clientHandshake = { 0 };
 	UINT error;
 
-	if (!context || !s)
+	if (!context || !handshake || !s)
 		return ERROR_INVALID_PARAMETER;
 
-	if ((error = rail_read_handshake_order(s, &serverHandshake)))
+	if ((error = rail_read_handshake_order(s, handshake)))
 	{
 		WLog_ERR(TAG, "rail_read_handshake_order failed with error %" PRIu32 "!", error);
 		return error;
 	}
 
-	rail->channelBuildNumber = serverHandshake.buildNumber;
-	clientHandshake.buildNumber = 0x00001DB0;
-	/* 2.2.2.2.3 HandshakeEx PDU (TS_RAIL_ORDER_HANDSHAKE_EX)
-	 * Client response is really a Handshake PDU */
-	error = context->ClientHandshake(context, &clientHandshake);
-
-	if (error != CHANNEL_RC_OK)
-		return error;
-
 	if (context->custom)
 	{
-		IFCALLRET(context->ServerHandshake, error, context, &serverHandshake);
+		IFCALLRET(context->ServerHandshake, error, context, handshake);
 
 		if (error)
 			WLog_ERR(TAG, "context.ServerHandshake failed with error %" PRIu32 "", error);
@@ -592,63 +519,32 @@
 	return error;
 }
 
-static BOOL rail_is_feature_supported(const rdpContext* context, UINT32 featureMask)
-{
-	UINT32 supported, masked;
-
-	if (!context || !context->settings)
-		return FALSE;
-
-	supported = context->settings->RemoteApplicationSupportLevel &
-	            context->settings->RemoteApplicationSupportMask;
-	masked = (supported & featureMask);
-
-	if (masked != featureMask)
-		return FALSE;
-
-	return TRUE;
-}
-
 /**
  * Function description
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-static UINT rail_recv_handshake_ex_order(railPlugin* rail, wStream* s)
+static UINT rail_recv_handshake_ex_order(railPlugin* rail, RAIL_HANDSHAKE_EX_ORDER* handshakeEx,
+                                         wStream* s)
 {
 	RailClientContext* context = rail_get_client_interface(rail);
-	RAIL_HANDSHAKE_EX_ORDER serverHandshake = { 0 };
-	RAIL_HANDSHAKE_ORDER clientHandshake = { 0 };
 	UINT error;
 
-	if (!rail || !context || !s)
+	if (!context || !handshakeEx || !s)
 		return ERROR_INVALID_PARAMETER;
 
-	if (!rail_is_feature_supported(rail->rdpcontext, RAIL_LEVEL_HANDSHAKE_EX_SUPPORTED))
-		return ERROR_BAD_CONFIGURATION;
-
-	if ((error = rail_read_handshake_ex_order(s, &serverHandshake)))
+	if ((error = rail_read_handshake_ex_order(s, handshakeEx)))
 	{
 		WLog_ERR(TAG, "rail_read_handshake_ex_order failed with error %" PRIu32 "!", error);
 		return error;
 	}
 
-	rail->channelBuildNumber = serverHandshake.buildNumber;
-	rail->channelFlags = serverHandshake.railHandshakeFlags;
-	clientHandshake.buildNumber = 0x00001DB0;
-	/* 2.2.2.2.3 HandshakeEx PDU (TS_RAIL_ORDER_HANDSHAKE_EX)
-	 * Client response is really a Handshake PDU */
-	error = context->ClientHandshake(context, &clientHandshake);
-
-	if (error != CHANNEL_RC_OK)
-		return error;
-
 	if (context->custom)
 	{
-		IFCALLRET(context->ServerHandshakeEx, error, context, &serverHandshake);
+		IFCALLRET(context->ClientHandshakeEx, error, context, handshakeEx);
 
 		if (error)
-			WLog_ERR(TAG, "context.ServerHandshakeEx failed with error %" PRIu32 "", error);
+			WLog_ERR(TAG, "context.ClientHandshakeEx failed with error %" PRIu32 "", error);
 	}
 
 	return error;
@@ -659,31 +555,31 @@
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-static UINT rail_recv_exec_result_order(railPlugin* rail, wStream* s)
+static UINT rail_recv_exec_result_order(railPlugin* rail, RAIL_EXEC_RESULT_ORDER* execResult,
+                                        wStream* s)
 {
 	RailClientContext* context = rail_get_client_interface(rail);
-	RAIL_EXEC_RESULT_ORDER execResult = { 0 };
 	UINT error;
 
-	if (!context || !s)
+	if (!context || !execResult || !s)
 		return ERROR_INVALID_PARAMETER;
 
-	if ((error = rail_read_server_exec_result_order(s, &execResult)))
+	ZeroMemory(execResult, sizeof(RAIL_EXEC_RESULT_ORDER));
+
+	if ((error = rail_read_server_exec_result_order(s, execResult)))
 	{
 		WLog_ERR(TAG, "rail_read_server_exec_result_order failed with error %" PRIu32 "!", error);
-		goto fail;
+		return error;
 	}
 
 	if (context->custom)
 	{
-		IFCALLRET(context->ServerExecuteResult, error, context, &execResult);
+		IFCALLRET(context->ServerExecuteResult, error, context, execResult);
 
 		if (error)
 			WLog_ERR(TAG, "context.ServerExecuteResult failed with error %" PRIu32 "", error);
 	}
 
-fail:
-	free(execResult.exeOrFile.string);
 	return error;
 }
 
@@ -692,16 +588,16 @@
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-static UINT rail_recv_server_sysparam_order(railPlugin* rail, wStream* s)
+static UINT rail_recv_server_sysparam_order(railPlugin* rail, RAIL_SYSPARAM_ORDER* sysparam,
+                                            wStream* s)
 {
 	RailClientContext* context = rail_get_client_interface(rail);
-	RAIL_SYSPARAM_ORDER sysparam;
 	UINT error;
 
-	if (!context || !s)
+	if (!context || !sysparam || !s)
 		return ERROR_INVALID_PARAMETER;
 
-	if ((error = rail_read_server_sysparam_order(s, &sysparam)))
+	if ((error = rail_read_server_sysparam_order(s, sysparam)))
 	{
 		WLog_ERR(TAG, "rail_read_server_sysparam_order failed with error %" PRIu32 "!", error);
 		return error;
@@ -709,7 +605,7 @@
 
 	if (context->custom)
 	{
-		IFCALLRET(context->ServerSystemParam, error, context, &sysparam);
+		IFCALLRET(context->ServerSystemParam, error, context, sysparam);
 
 		if (error)
 			WLog_ERR(TAG, "context.ServerSystemParam failed with error %" PRIu32 "", error);
@@ -723,16 +619,16 @@
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-static UINT rail_recv_server_minmaxinfo_order(railPlugin* rail, wStream* s)
+static UINT rail_recv_server_minmaxinfo_order(railPlugin* rail, RAIL_MINMAXINFO_ORDER* minMaxInfo,
+                                              wStream* s)
 {
 	RailClientContext* context = rail_get_client_interface(rail);
-	RAIL_MINMAXINFO_ORDER minMaxInfo = { 0 };
 	UINT error;
 
-	if (!context || !s)
+	if (!context || !minMaxInfo || !s)
 		return ERROR_INVALID_PARAMETER;
 
-	if ((error = rail_read_server_minmaxinfo_order(s, &minMaxInfo)))
+	if ((error = rail_read_server_minmaxinfo_order(s, minMaxInfo)))
 	{
 		WLog_ERR(TAG, "rail_read_server_minmaxinfo_order failed with error %" PRIu32 "!", error);
 		return error;
@@ -740,7 +636,7 @@
 
 	if (context->custom)
 	{
-		IFCALLRET(context->ServerMinMaxInfo, error, context, &minMaxInfo);
+		IFCALLRET(context->ServerMinMaxInfo, error, context, minMaxInfo);
 
 		if (error)
 			WLog_ERR(TAG, "context.ServerMinMaxInfo failed with error %" PRIu32 "", error);
@@ -754,16 +650,17 @@
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-static UINT rail_recv_server_localmovesize_order(railPlugin* rail, wStream* s)
+static UINT rail_recv_server_localmovesize_order(railPlugin* rail,
+                                                 RAIL_LOCALMOVESIZE_ORDER* localMoveSize,
+                                                 wStream* s)
 {
 	RailClientContext* context = rail_get_client_interface(rail);
-	RAIL_LOCALMOVESIZE_ORDER localMoveSize = { 0 };
 	UINT error;
 
-	if (!context || !s)
+	if (!context || !localMoveSize || !s)
 		return ERROR_INVALID_PARAMETER;
 
-	if ((error = rail_read_server_localmovesize_order(s, &localMoveSize)))
+	if ((error = rail_read_server_localmovesize_order(s, localMoveSize)))
 	{
 		WLog_ERR(TAG, "rail_read_server_localmovesize_order failed with error %" PRIu32 "!", error);
 		return error;
@@ -771,7 +668,7 @@
 
 	if (context->custom)
 	{
-		IFCALLRET(context->ServerLocalMoveSize, error, context, &localMoveSize);
+		IFCALLRET(context->ServerLocalMoveSize, error, context, localMoveSize);
 
 		if (error)
 			WLog_ERR(TAG, "context.ServerLocalMoveSize failed with error %" PRIu32 "", error);
@@ -785,16 +682,17 @@
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-static UINT rail_recv_server_get_appid_resp_order(railPlugin* rail, wStream* s)
+static UINT rail_recv_server_get_appid_resp_order(railPlugin* rail,
+                                                  RAIL_GET_APPID_RESP_ORDER* getAppIdResp,
+                                                  wStream* s)
 {
 	RailClientContext* context = rail_get_client_interface(rail);
-	RAIL_GET_APPID_RESP_ORDER getAppIdResp = { 0 };
 	UINT error;
 
-	if (!context || !s)
+	if (!context || !getAppIdResp || !s)
 		return ERROR_INVALID_PARAMETER;
 
-	if ((error = rail_read_server_get_appid_resp_order(s, &getAppIdResp)))
+	if ((error = rail_read_server_get_appid_resp_order(s, getAppIdResp)))
 	{
 		WLog_ERR(TAG, "rail_read_server_get_appid_resp_order failed with error %" PRIu32 "!",
 		         error);
@@ -803,7 +701,7 @@
 
 	if (context->custom)
 	{
-		IFCALLRET(context->ServerGetAppIdResponse, error, context, &getAppIdResp);
+		IFCALLRET(context->ServerGetAppIdResponse, error, context, getAppIdResp);
 
 		if (error)
 			WLog_ERR(TAG, "context.ServerGetAppIdResponse failed with error %" PRIu32 "", error);
@@ -817,19 +715,16 @@
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-static UINT rail_recv_langbar_info_order(railPlugin* rail, wStream* s)
+static UINT rail_recv_langbar_info_order(railPlugin* rail, RAIL_LANGBAR_INFO_ORDER* langBarInfo,
+                                         wStream* s)
 {
 	RailClientContext* context = rail_get_client_interface(rail);
-	RAIL_LANGBAR_INFO_ORDER langBarInfo = { 0 };
 	UINT error;
 
-	if (!context)
+	if (!context || !langBarInfo)
 		return ERROR_INVALID_PARAMETER;
 
-	if (!rail_is_feature_supported(rail->rdpcontext, RAIL_LEVEL_DOCKED_LANGBAR_SUPPORTED))
-		return ERROR_BAD_CONFIGURATION;
-
-	if ((error = rail_read_langbar_info_order(s, &langBarInfo)))
+	if ((error = rail_read_langbar_info_order(s, langBarInfo)))
 	{
 		WLog_ERR(TAG, "rail_read_langbar_info_order failed with error %" PRIu32 "!", error);
 		return error;
@@ -837,7 +732,7 @@
 
 	if (context->custom)
 	{
-		IFCALLRET(context->ServerLanguageBarInfo, error, context, &langBarInfo);
+		IFCALLRET(context->ServerLanguageBarInfo, error, context, langBarInfo);
 
 		if (error)
 			WLog_ERR(TAG, "context.ServerLanguageBarInfo failed with error %" PRIu32 "", error);
@@ -846,324 +741,82 @@
 	return error;
 }
 
-static UINT rail_read_taskbar_info_order(wStream* s, RAIL_TASKBAR_INFO_ORDER* taskbarInfo)
-{
-	if (!s || !taskbarInfo)
-		return ERROR_INVALID_PARAMETER;
-
-	if (Stream_GetRemainingLength(s) < 12)
-	{
-		WLog_ERR(TAG, "Stream_GetRemainingLength failed!");
-		return ERROR_INVALID_DATA;
-	}
-
-	Stream_Read_UINT32(s, taskbarInfo->TaskbarMessage);
-	Stream_Read_UINT32(s, taskbarInfo->WindowIdTab);
-	Stream_Read_UINT32(s, taskbarInfo->Body);
-	return CHANNEL_RC_OK;
-}
-
-static UINT rail_recv_taskbar_info_order(railPlugin* rail, wStream* s)
-{
-	RailClientContext* context = rail_get_client_interface(rail);
-	RAIL_TASKBAR_INFO_ORDER taskBarInfo = { 0 };
-	UINT error;
-
-	if (!context)
-		return ERROR_INVALID_PARAMETER;
-
-	/* 2.2.2.14.1 Taskbar Tab Info PDU (TS_RAIL_ORDER_TASKBARINFO)
-	 * server -> client message only supported if announced. */
-	if (!rail_is_feature_supported(rail->rdpcontext, RAIL_LEVEL_SHELL_INTEGRATION_SUPPORTED))
-		return ERROR_BAD_CONFIGURATION;
-
-	if ((error = rail_read_taskbar_info_order(s, &taskBarInfo)))
-	{
-		WLog_ERR(TAG, "rail_read_langbar_info_order failed with error %" PRIu32 "!", error);
-		return error;
-	}
-
-	if (context->custom)
-	{
-		IFCALLRET(context->ServerTaskBarInfo, error, context, &taskBarInfo);
-
-		if (error)
-			WLog_ERR(TAG, "context.ServerLanguageBarInfo failed with error %" PRIu32 "", error);
-	}
-
-	return error;
-}
-
-static UINT rail_read_zorder_sync_order(wStream* s, RAIL_ZORDER_SYNC* zorder)
-{
-	if (!s || !zorder)
-		return ERROR_INVALID_PARAMETER;
-
-	if (Stream_GetRemainingLength(s) < 4)
-	{
-		WLog_ERR(TAG, "Stream_GetRemainingLength failed!");
-		return ERROR_INVALID_DATA;
-	}
-
-	Stream_Read_UINT32(s, zorder->windowIdMarker);
-	return CHANNEL_RC_OK;
-}
-
-static UINT rail_recv_zorder_sync_order(railPlugin* rail, wStream* s)
+/**
+ * Function description
+ *
+ * @return 0 on success, otherwise a Win32 error code
+ */
+UINT rail_order_recv(railPlugin* rail, wStream* s)
 {
-	RailClientContext* context = rail_get_client_interface(rail);
-	RAIL_ZORDER_SYNC zorder = { 0 };
+	UINT16 orderType;
+	UINT16 orderLength;
 	UINT error;
 
-	if (!context)
+	if (!rail || !s)
 		return ERROR_INVALID_PARAMETER;
 
-	if ((rail->clientStatus.flags & TS_RAIL_CLIENTSTATUS_ZORDER_SYNC) == 0)
-		return ERROR_INVALID_DATA;
-
-	if ((error = rail_read_zorder_sync_order(s, &zorder)))
+	if ((error = rail_read_pdu_header(s, &orderType, &orderLength)))
 	{
-		WLog_ERR(TAG, "rail_read_zorder_sync_order failed with error %" PRIu32 "!", error);
+		WLog_ERR(TAG, "rail_read_pdu_header failed with error %" PRIu32 "!", error);
 		return error;
 	}
 
-	if (context->custom)
-	{
-		IFCALLRET(context->ServerZOrderSync, error, context, &zorder);
-
-		if (error)
-			WLog_ERR(TAG, "context.ServerZOrderSync failed with error %" PRIu32 "", error);
-	}
-
-	return error;
-}
-
-static UINT rail_read_order_cloak(wStream* s, RAIL_CLOAK* cloak)
-{
-	if (!s || !cloak)
-		return ERROR_INVALID_PARAMETER;
-
-	if (Stream_GetRemainingLength(s) < 5)
-	{
-		WLog_ERR(TAG, "Stream_GetRemainingLength failed!");
-		return ERROR_INVALID_DATA;
-	}
-
-	Stream_Read_UINT32(s, cloak->windowId);
-	Stream_Read_UINT8(s, cloak->cloak);
-	return CHANNEL_RC_OK;
-}
-
-static UINT rail_recv_order_cloak(railPlugin* rail, wStream* s)
-{
-	RailClientContext* context = rail_get_client_interface(rail);
-	RAIL_CLOAK cloak = { 0 };
-	UINT error;
-
-	if (!context)
-		return ERROR_INVALID_PARAMETER;
-
-	/* 2.2.2.12.1 Window Cloak State Change PDU (TS_RAIL_ORDER_CLOAK)
-	 * server -> client message only supported if announced. */
-	if ((rail->clientStatus.flags & TS_RAIL_CLIENTSTATUS_BIDIRECTIONAL_CLOAK_SUPPORTED) == 0)
-		return ERROR_INVALID_DATA;
+	WLog_Print(rail->log, WLOG_DEBUG, "Received %s PDU, length:%" PRIu16 "",
+	           RAIL_ORDER_TYPE_STRINGS[((orderType & 0xF0) >> 3) + (orderType & 0x0F)],
+	           orderLength);
 
-	if ((error = rail_read_order_cloak(s, &cloak)))
+	switch (orderType)
 	{
-		WLog_ERR(TAG, "rail_read_zorder_sync_order failed with error %" PRIu32 "!", error);
-		return error;
-	}
-
-	if (context->custom)
+	case RDP_RAIL_ORDER_HANDSHAKE:
 	{
-		IFCALLRET(context->ServerCloak, error, context, &cloak);
-
-		if (error)
-			WLog_ERR(TAG, "context.ServerZOrderSync failed with error %" PRIu32 "", error);
+		RAIL_HANDSHAKE_ORDER handshake;
+		return rail_recv_handshake_order(rail, &handshake, s);
 	}
 
-	return error;
-}
-
-static UINT rail_read_power_display_request_order(wStream* s, RAIL_POWER_DISPLAY_REQUEST* power)
-{
-	if (!s || !power)
-		return ERROR_INVALID_PARAMETER;
-
-	if (Stream_GetRemainingLength(s) < 4)
+	case RDP_RAIL_ORDER_HANDSHAKE_EX:
 	{
-		WLog_ERR(TAG, "Stream_GetRemainingLength failed!");
-		return ERROR_INVALID_DATA;
+		RAIL_HANDSHAKE_EX_ORDER handshakeEx;
+		return rail_recv_handshake_ex_order(rail, &handshakeEx, s);
 	}
 
-	Stream_Read_UINT32(s, power->active);
-	return CHANNEL_RC_OK;
-}
-
-static UINT rail_recv_power_display_request_order(railPlugin* rail, wStream* s)
-{
-	RailClientContext* context = rail_get_client_interface(rail);
-	RAIL_POWER_DISPLAY_REQUEST power = { 0 };
-	UINT error;
-
-	if (!context)
-		return ERROR_INVALID_PARAMETER;
-
-	/* 2.2.2.13.1 Power Display Request PDU(TS_RAIL_ORDER_POWER_DISPLAY_REQUEST)
-	 */
-	if ((rail->clientStatus.flags & TS_RAIL_CLIENTSTATUS_POWER_DISPLAY_REQUEST_SUPPORTED) == 0)
-		return ERROR_INVALID_DATA;
-
-	if ((error = rail_read_power_display_request_order(s, &power)))
+	case RDP_RAIL_ORDER_EXEC_RESULT:
 	{
-		WLog_ERR(TAG, "rail_read_zorder_sync_order failed with error %" PRIu32 "!", error);
+		RAIL_EXEC_RESULT_ORDER execResult = { 0 };
+		error = rail_recv_exec_result_order(rail, &execResult, s);
+		free(execResult.exeOrFile.string);
 		return error;
 	}
 
-	if (context->custom)
-	{
-		IFCALLRET(context->ServerPowerDisplayRequest, error, context, &power);
-
-		if (error)
-			WLog_ERR(TAG, "context.ServerPowerDisplayRequest failed with error %" PRIu32 "", error);
-	}
-
-	return error;
-}
-
-static UINT rail_read_get_application_id_extended_response_order(wStream* s,
-                                                                 RAIL_GET_APPID_RESP_EX* id)
-{
-	if (!s || !id)
-		return ERROR_INVALID_PARAMETER;
-
-	if (Stream_GetRemainingLength(s) < 4)
+	case RDP_RAIL_ORDER_SYSPARAM:
 	{
-		WLog_ERR(TAG, "Stream_GetRemainingLength failed!");
-		return ERROR_INVALID_DATA;
+		RAIL_SYSPARAM_ORDER sysparam;
+		return rail_recv_server_sysparam_order(rail, &sysparam, s);
 	}
 
-	Stream_Read_UINT32(s, id->windowID);
-
-	if (!Stream_Read_UTF16_String(s, id->applicationID, ARRAYSIZE(id->applicationID)))
-		return ERROR_INVALID_DATA;
-
-	if (_wcsnlen(id->applicationID, ARRAYSIZE(id->applicationID)) >= ARRAYSIZE(id->applicationID))
-		return ERROR_INVALID_DATA;
-
-	if (Stream_GetRemainingLength(s) < 4)
+	case RDP_RAIL_ORDER_MINMAXINFO:
 	{
-		WLog_ERR(TAG, "Stream_GetRemainingLength failed!");
-		return ERROR_INVALID_DATA;
+		RAIL_MINMAXINFO_ORDER minMaxInfo;
+		return rail_recv_server_minmaxinfo_order(rail, &minMaxInfo, s);
 	}
 
-	Stream_Read_UINT32(s, id->processId);
-
-	if (!Stream_Read_UTF16_String(s, id->processImageName, ARRAYSIZE(id->processImageName)))
-		return ERROR_INVALID_DATA;
-
-	if (_wcsnlen(id->applicationID, ARRAYSIZE(id->processImageName)) >=
-	    ARRAYSIZE(id->processImageName))
-		return ERROR_INVALID_DATA;
-
-	return CHANNEL_RC_OK;
-}
-
-static UINT rail_recv_get_application_id_extended_response_order(railPlugin* rail, wStream* s)
-{
-	RailClientContext* context = rail_get_client_interface(rail);
-	RAIL_GET_APPID_RESP_EX id = { 0 };
-	UINT error;
-
-	if (!context)
-		return ERROR_INVALID_PARAMETER;
-
-	if ((error = rail_read_get_application_id_extended_response_order(s, &id)))
+	case RDP_RAIL_ORDER_LOCALMOVESIZE:
 	{
-		WLog_ERR(TAG,
-		         "rail_read_get_application_id_extended_response_order failed with error %" PRIu32
-		         "!",
-		         error);
-		return error;
+		RAIL_LOCALMOVESIZE_ORDER localMoveSize;
+		return rail_recv_server_localmovesize_order(rail, &localMoveSize, s);
 	}
 
-	if (context->custom)
+	case RDP_RAIL_ORDER_GET_APPID_RESP:
 	{
-		IFCALLRET(context->ServerGetAppidResponseExtended, error, context, &id);
-
-		if (error)
-			WLog_ERR(TAG, "context.ServerGetAppidResponseExtended failed with error %" PRIu32 "",
-			         error);
+		RAIL_GET_APPID_RESP_ORDER getAppIdResp;
+		return rail_recv_server_get_appid_resp_order(rail, &getAppIdResp, s);
 	}
 
-	return error;
-}
-
-/**
- * Function description
- *
- * @return 0 on success, otherwise a Win32 error code
- */
-UINT rail_order_recv(railPlugin* rail, wStream* s)
-{
-	UINT16 orderType;
-	UINT16 orderLength;
-	UINT error;
-
-	if (!rail || !s)
-		return ERROR_INVALID_PARAMETER;
-
-	if ((error = rail_read_pdu_header(s, &orderType, &orderLength)))
+	case RDP_RAIL_ORDER_LANGBARINFO:
 	{
-		WLog_ERR(TAG, "rail_read_pdu_header failed with error %" PRIu32 "!", error);
-		return error;
+		RAIL_LANGBAR_INFO_ORDER langBarInfo;
+		return rail_recv_langbar_info_order(rail, &langBarInfo, s);
 	}
 
-	WLog_Print(rail->log, WLOG_DEBUG, "Received %s PDU, length:%" PRIu16 "",
-	           RAIL_ORDER_TYPE_STRINGS[((orderType & 0xF0) >> 3) + (orderType & 0x0F)],
-	           orderLength);
-
-	switch (orderType)
-	{
-	case TS_RAIL_ORDER_HANDSHAKE:
-		return rail_recv_handshake_order(rail, s);
-
-	case TS_RAIL_ORDER_HANDSHAKE_EX:
-		return rail_recv_handshake_ex_order(rail, s);
-
-	case TS_RAIL_ORDER_EXEC_RESULT:
-		return rail_recv_exec_result_order(rail, s);
-
-	case TS_RAIL_ORDER_SYSPARAM:
-		return rail_recv_server_sysparam_order(rail, s);
-
-	case TS_RAIL_ORDER_MINMAXINFO:
-		return rail_recv_server_minmaxinfo_order(rail, s);
-
-	case TS_RAIL_ORDER_LOCALMOVESIZE:
-		return rail_recv_server_localmovesize_order(rail, s);
-
-	case TS_RAIL_ORDER_GET_APPID_RESP:
-		return rail_recv_server_get_appid_resp_order(rail, s);
-
-	case TS_RAIL_ORDER_LANGBARINFO:
-		return rail_recv_langbar_info_order(rail, s);
-
-	case TS_RAIL_ORDER_TASKBARINFO:
-		return rail_recv_taskbar_info_order(rail, s);
-
-	case TS_RAIL_ORDER_ZORDER_SYNC:
-		return rail_recv_zorder_sync_order(rail, s);
-
-	case TS_RAIL_ORDER_CLOAK:
-		return rail_recv_order_cloak(rail, s);
-
-	case TS_RAIL_ORDER_POWER_DISPLAY_REQUEST:
-		return rail_recv_power_display_request_order(rail, s);
-
-	case TS_RAIL_ORDER_GET_APPID_RESP_EX:
-		return rail_recv_get_application_id_extended_response_order(rail, s);
-
 	default:
 		WLog_ERR(TAG, "Unknown RAIL PDU order reveived.");
 		return ERROR_INVALID_DATA;
@@ -1194,7 +847,7 @@
 	}
 
 	rail_write_handshake_order(s, handshake);
-	error = rail_send_pdu(rail, s, TS_RAIL_ORDER_HANDSHAKE);
+	error = rail_send_pdu(rail, s, RDP_RAIL_ORDER_HANDSHAKE);
 	Stream_Free(s, TRUE);
 	return error;
 }
@@ -1221,7 +874,7 @@
 	}
 
 	rail_write_handshake_ex_order(s, handshakeEx);
-	error = rail_send_pdu(rail, s, TS_RAIL_ORDER_HANDSHAKE_EX);
+	error = rail_send_pdu(rail, s, RDP_RAIL_ORDER_HANDSHAKE_EX);
 	Stream_Free(s, TRUE);
 	return error;
 }
@@ -1239,7 +892,6 @@
 	if (!rail || !clientStatus)
 		return ERROR_INVALID_PARAMETER;
 
-	rail->clientStatus = *clientStatus;
 	s = rail_pdu_init(RAIL_CLIENT_STATUS_ORDER_LENGTH);
 
 	if (!s)
@@ -1251,7 +903,7 @@
 	error = rail_write_client_status_order(s, clientStatus);
 
 	if (error == ERROR_SUCCESS)
-		error = rail_send_pdu(rail, s, TS_RAIL_ORDER_CLIENTSTATUS);
+		error = rail_send_pdu(rail, s, RDP_RAIL_ORDER_CLIENTSTATUS);
 
 	Stream_Free(s, TRUE);
 	return error;
@@ -1289,7 +941,7 @@
 		goto out;
 	}
 
-	if ((error = rail_send_pdu(rail, s, TS_RAIL_ORDER_EXEC)))
+	if ((error = rail_send_pdu(rail, s, RDP_RAIL_ORDER_EXEC)))
 	{
 		WLog_ERR(TAG, "rail_send_pdu failed with error %" PRIu32 "!", error);
 		goto out;
@@ -1323,16 +975,6 @@
 		length += 1;
 		break;
 
-	case SPI_SETCARETWIDTH:
-	case SPI_SETSTICKYKEYS:
-	case SPI_SETTOGGLEKEYS:
-		length += 4;
-		break;
-
-	case SPI_SETFILTERKEYS:
-		length += 20;
-		break;
-
 	case SPI_SET_WORK_AREA:
 	case SPI_DISPLAY_CHANGE:
 	case SPI_TASKBAR_POS:
@@ -1356,13 +998,13 @@
 		return CHANNEL_RC_NO_MEMORY;
 	}
 
-	if ((error = rail_write_client_sysparam_order(rail, s, sysparam)))
+	if ((error = rail_write_client_sysparam_order(s, sysparam)))
 	{
 		WLog_ERR(TAG, "rail_write_client_sysparam_order failed with error %" PRIu32 "!", error);
 		goto out;
 	}
 
-	if ((error = rail_send_pdu(rail, s, TS_RAIL_ORDER_SYSPARAM)))
+	if ((error = rail_send_pdu(rail, s, RDP_RAIL_ORDER_SYSPARAM)))
 	{
 		WLog_ERR(TAG, "rail_send_pdu failed with error %" PRIu32 "!", error);
 		goto out;
@@ -1462,50 +1104,6 @@
 		}
 	}
 
-	if (sysparam->params & SPI_MASK_SET_CARET_WIDTH)
-	{
-		sysparam->param = SPI_SETCARETWIDTH;
-
-		if ((error = rail_send_client_sysparam_order(rail, sysparam)))
-		{
-			WLog_ERR(TAG, "rail_send_client_sysparam_order failed with error %" PRIu32 "!", error);
-			return error;
-		}
-	}
-
-	if (sysparam->params & SPI_MASK_SET_STICKY_KEYS)
-	{
-		sysparam->param = SPI_SETSTICKYKEYS;
-
-		if ((error = rail_send_client_sysparam_order(rail, sysparam)))
-		{
-			WLog_ERR(TAG, "rail_send_client_sysparam_order failed with error %" PRIu32 "!", error);
-			return error;
-		}
-	}
-
-	if (sysparam->params & SPI_MASK_SET_TOGGLE_KEYS)
-	{
-		sysparam->param = SPI_SETTOGGLEKEYS;
-
-		if ((error = rail_send_client_sysparam_order(rail, sysparam)))
-		{
-			WLog_ERR(TAG, "rail_send_client_sysparam_order failed with error %" PRIu32 "!", error);
-			return error;
-		}
-	}
-
-	if (sysparam->params & SPI_MASK_SET_FILTER_KEYS)
-	{
-		sysparam->param = SPI_SETFILTERKEYS;
-
-		if ((error = rail_send_client_sysparam_order(rail, sysparam)))
-		{
-			WLog_ERR(TAG, "rail_send_client_sysparam_order failed with error %" PRIu32 "!", error);
-			return error;
-		}
-	}
-
 	return error;
 }
 
@@ -1533,7 +1131,7 @@
 	error = rail_write_client_activate_order(s, activate);
 
 	if (error == ERROR_SUCCESS)
-		error = rail_send_pdu(rail, s, TS_RAIL_ORDER_ACTIVATE);
+		error = rail_send_pdu(rail, s, RDP_RAIL_ORDER_ACTIVATE);
 
 	Stream_Free(s, TRUE);
 	return error;
@@ -1563,7 +1161,7 @@
 	error = rail_write_client_sysmenu_order(s, sysmenu);
 
 	if (error == ERROR_SUCCESS)
-		error = rail_send_pdu(rail, s, TS_RAIL_ORDER_SYSMENU);
+		error = rail_send_pdu(rail, s, RDP_RAIL_ORDER_SYSMENU);
 
 	Stream_Free(s, TRUE);
 	return error;
@@ -1593,7 +1191,7 @@
 	error = rail_write_client_syscommand_order(s, syscommand);
 
 	if (error == ERROR_SUCCESS)
-		error = rail_send_pdu(rail, s, TS_RAIL_ORDER_SYSCOMMAND);
+		error = rail_send_pdu(rail, s, RDP_RAIL_ORDER_SYSCOMMAND);
 
 	Stream_Free(s, TRUE);
 	return error;
@@ -1624,7 +1222,7 @@
 	error = rail_write_client_notify_event_order(s, notifyEvent);
 
 	if (ERROR_SUCCESS == error)
-		error = rail_send_pdu(rail, s, TS_RAIL_ORDER_NOTIFY_EVENT);
+		error = rail_send_pdu(rail, s, RDP_RAIL_ORDER_NOTIFY_EVENT);
 
 	Stream_Free(s, TRUE);
 	return error;
@@ -1654,7 +1252,7 @@
 	error = rail_write_client_window_move_order(s, windowMove);
 
 	if (error == ERROR_SUCCESS)
-		error = rail_send_pdu(rail, s, TS_RAIL_ORDER_WINDOWMOVE);
+		error = rail_send_pdu(rail, s, RDP_RAIL_ORDER_WINDOWMOVE);
 
 	Stream_Free(s, TRUE);
 	return error;
@@ -1685,7 +1283,7 @@
 	error = rail_write_client_get_appid_req_order(s, getAppIdReq);
 
 	if (error == ERROR_SUCCESS)
-		error = rail_send_pdu(rail, s, TS_RAIL_ORDER_GET_APPID_REQ);
+		error = rail_send_pdu(rail, s, RDP_RAIL_ORDER_GET_APPID_REQ);
 
 	Stream_Free(s, TRUE);
 	return error;
@@ -1705,9 +1303,6 @@
 	if (!rail || !langBarInfo)
 		return ERROR_INVALID_PARAMETER;
 
-	if (!rail_is_feature_supported(rail->rdpcontext, RAIL_LEVEL_DOCKED_LANGBAR_SUPPORTED))
-		return ERROR_BAD_CONFIGURATION;
-
 	s = rail_pdu_init(RAIL_LANGBAR_INFO_ORDER_LENGTH);
 
 	if (!s)
@@ -1719,98 +1314,8 @@
 	error = rail_write_langbar_info_order(s, langBarInfo);
 
 	if (ERROR_SUCCESS == error)
-		error = rail_send_pdu(rail, s, TS_RAIL_ORDER_LANGBARINFO);
-
-	Stream_Free(s, TRUE);
-	return error;
-}
-
-UINT rail_send_client_languageime_info_order(railPlugin* rail,
-                                             const RAIL_LANGUAGEIME_INFO_ORDER* langImeInfo)
-{
-	wStream* s;
-	UINT error;
-
-	if (!rail || !langImeInfo)
-		return ERROR_INVALID_PARAMETER;
-
-	if (!rail_is_feature_supported(rail->rdpcontext, RAIL_LEVEL_LANGUAGE_IME_SYNC_SUPPORTED))
-		return ERROR_BAD_CONFIGURATION;
-
-	s = rail_pdu_init(RAIL_LANGUAGEIME_INFO_ORDER_LENGTH);
-
-	if (!s)
-	{
-		WLog_ERR(TAG, "rail_pdu_init failed!");
-		return CHANNEL_RC_NO_MEMORY;
-	}
-
-	error = rail_write_languageime_info_order(s, langImeInfo);
-
-	if (ERROR_SUCCESS == error)
-		error = rail_send_pdu(rail, s, TS_RAIL_ORDER_LANGUAGEIMEINFO);
-
-	Stream_Free(s, TRUE);
-	return error;
-}
-
-UINT rail_send_client_order_cloak_order(railPlugin* rail, const RAIL_CLOAK* cloak)
-{
-	wStream* s;
-	UINT error;
-
-	if (!rail || !cloak)
-		return ERROR_INVALID_PARAMETER;
-
-	s = rail_pdu_init(5);
-
-	if (!s)
-	{
-		WLog_ERR(TAG, "rail_pdu_init failed!");
-		return CHANNEL_RC_NO_MEMORY;
-	}
-
-	Stream_Write_UINT32(s, cloak->windowId);
-	Stream_Write_UINT8(s, cloak->cloak ? 1 : 0);
-	error = rail_send_pdu(rail, s, TS_RAIL_ORDER_CLOAK);
-	Stream_Free(s, TRUE);
-	return error;
-}
-
-UINT rail_send_client_order_snap_arrange_order(railPlugin* rail, const RAIL_SNAP_ARRANGE* snap)
-{
-	wStream* s;
-	UINT error;
-
-	if (!rail)
-		return ERROR_INVALID_PARAMETER;
-
-	/* 2.2.2.7.5 Client Window Snap PDU (TS_RAIL_ORDER_SNAP_ARRANGE) */
-	if ((rail->channelFlags & TS_RAIL_ORDER_HANDSHAKE_EX_FLAGS_SNAP_ARRANGE_SUPPORTED) == 0)
-	{
-		RAIL_WINDOW_MOVE_ORDER move = { 0 };
-		move.top = snap->top;
-		move.left = snap->left;
-		move.right = snap->right;
-		move.bottom = snap->bottom;
-		move.windowId = snap->windowId;
-		return rail_send_client_window_move_order(rail, &move);
-	}
-
-	s = rail_pdu_init(12);
-
-	if (!s)
-	{
-		WLog_ERR(TAG, "rail_pdu_init failed!");
-		return CHANNEL_RC_NO_MEMORY;
-	}
+		error = rail_send_pdu(rail, s, RDP_RAIL_ORDER_LANGBARINFO);
 
-	Stream_Write_UINT32(s, snap->windowId);
-	Stream_Write_UINT16(s, snap->left);
-	Stream_Write_UINT16(s, snap->top);
-	Stream_Write_UINT16(s, snap->right);
-	Stream_Write_UINT16(s, snap->bottom);
-	error = rail_send_pdu(rail, s, TS_RAIL_ORDER_SNAP_ARRANGE);
 	Stream_Free(s, TRUE);
 	return error;
 }
diff -urN channels/rail/client/rail_orders.h ../../informatimago/FreeRDP/channels/rail/client/rail_orders.h
--- channels/rail/client/rail_orders.h	2019-07-25 19:50:58.497885700 +0300
+++ ../../informatimago/FreeRDP/channels/rail/client/rail_orders.h	2019-07-25 20:11:22.567955906 +0300
@@ -29,8 +29,7 @@
 
 #define TAG CHANNELS_TAG("rail.client")
 
-UINT rail_write_client_sysparam_order(railPlugin* rail, wStream* s,
-                                      const RAIL_SYSPARAM_ORDER* sysparam);
+UINT rail_write_client_sysparam_order(wStream* s, const RAIL_SYSPARAM_ORDER* sysparam);
 
 UINT rail_order_recv(railPlugin* rail, wStream* s);
 UINT rail_send_pdu(railPlugin* rail, wStream* s, UINT16 orderType);
@@ -53,9 +52,5 @@
                                           const RAIL_GET_APPID_REQ_ORDER* getAppIdReq);
 UINT rail_send_client_langbar_info_order(railPlugin* rail,
                                          const RAIL_LANGBAR_INFO_ORDER* langBarInfo);
-UINT rail_send_client_languageime_info_order(railPlugin* rail,
-                                             const RAIL_LANGUAGEIME_INFO_ORDER* langImeInfo);
-UINT rail_send_client_order_cloak_order(railPlugin* rail, const RAIL_CLOAK* cloak);
-UINT rail_send_client_order_snap_arrange_order(railPlugin* rail, const RAIL_SNAP_ARRANGE* snap);
 
 #endif /* FREERDP_CHANNEL_RAIL_CLIENT_ORDERS_H */
diff -urN channels/rail/rail_common.h ../../informatimago/FreeRDP/channels/rail/rail_common.h
--- channels/rail/rail_common.h	2019-07-25 19:50:58.501885719 +0300
+++ ../../informatimago/FreeRDP/channels/rail/rail_common.h	2019-07-25 20:11:22.571955926 +0300
@@ -31,19 +31,18 @@
 #define RAIL_PDU_HEADER_LENGTH 4
 
 /* Fixed length of PDUs, excluding variable lengths */
-#define RAIL_HANDSHAKE_ORDER_LENGTH 4         /* fixed */
-#define RAIL_HANDSHAKE_EX_ORDER_LENGTH 8      /* fixed */
-#define RAIL_CLIENT_STATUS_ORDER_LENGTH 4     /* fixed */
-#define RAIL_EXEC_ORDER_LENGTH 8              /* variable */
-#define RAIL_SYSPARAM_ORDER_LENGTH 4          /* variable */
-#define RAIL_ACTIVATE_ORDER_LENGTH 5          /* fixed */
-#define RAIL_SYSMENU_ORDER_LENGTH 8           /* fixed */
-#define RAIL_SYSCOMMAND_ORDER_LENGTH 6        /* fixed */
-#define RAIL_NOTIFY_EVENT_ORDER_LENGTH 12     /* fixed */
-#define RAIL_WINDOW_MOVE_ORDER_LENGTH 12      /* fixed */
-#define RAIL_GET_APPID_REQ_ORDER_LENGTH 4     /* fixed */
-#define RAIL_LANGBAR_INFO_ORDER_LENGTH 4      /* fixed */
-#define RAIL_LANGUAGEIME_INFO_ORDER_LENGTH 44 /* fixed */
+#define RAIL_HANDSHAKE_ORDER_LENGTH 4     /* fixed */
+#define RAIL_HANDSHAKE_EX_ORDER_LENGTH 8  /* fixed */
+#define RAIL_CLIENT_STATUS_ORDER_LENGTH 4 /* fixed */
+#define RAIL_EXEC_ORDER_LENGTH 8          /* variable */
+#define RAIL_SYSPARAM_ORDER_LENGTH 4      /* variable */
+#define RAIL_ACTIVATE_ORDER_LENGTH 5      /* fixed */
+#define RAIL_SYSMENU_ORDER_LENGTH 8       /* fixed */
+#define RAIL_SYSCOMMAND_ORDER_LENGTH 6    /* fixed */
+#define RAIL_NOTIFY_EVENT_ORDER_LENGTH 12 /* fixed */
+#define RAIL_WINDOW_MOVE_ORDER_LENGTH 12  /* fixed */
+#define RAIL_GET_APPID_REQ_ORDER_LENGTH 4 /* fixed */
+#define RAIL_LANGBAR_INFO_ORDER_LENGTH 4  /* fixed */
 
 BOOL rail_string_to_unicode_string(const char* string, RAIL_UNICODE_STRING* unicode_string);
 UINT rail_read_handshake_order(wStream* s, RAIL_HANDSHAKE_ORDER* handshake);
diff -urN channels/rdp2tcp/ChannelOptions.cmake ../../informatimago/FreeRDP/channels/rdp2tcp/ChannelOptions.cmake
--- channels/rdp2tcp/ChannelOptions.cmake	2019-07-24 06:11:52.382197152 +0300
+++ ../../informatimago/FreeRDP/channels/rdp2tcp/ChannelOptions.cmake	1970-01-01 03:00:00.000000000 +0300
@@ -1,10 +0,0 @@
-set(OPTION_DEFAULT OFF)
-set(OPTION_CLIENT_DEFAULT ON)
-set(OPTION_SERVER_DEFAULT OFF)
-
-define_channel_options(NAME "rdp2tcp" TYPE "static"
-	DESCRIPTION "Tunneling TCP over RDP"
-	DEFAULT ${OPTION_DEFAULT})
-
-define_channel_client_options(${OPTION_CLIENT_DEFAULT})
-define_channel_server_options(${OPTION_SERVER_DEFAULT})
diff -urN channels/rdp2tcp/client/CMakeLists.txt ../../informatimago/FreeRDP/channels/rdp2tcp/client/CMakeLists.txt
--- channels/rdp2tcp/client/CMakeLists.txt	2019-07-24 06:11:52.382197152 +0300
+++ ../../informatimago/FreeRDP/channels/rdp2tcp/client/CMakeLists.txt	1970-01-01 03:00:00.000000000 +0300
@@ -1,27 +0,0 @@
-# FreeRDP: A Remote Desktop Protocol Implementation
-# FreeRDP cmake build script
-#
-# Copyright 2012 Marc-Andre Moreau <marcandre.moreau@gmail.com>
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-define_channel_client("rdp2tcp")
-
-set(${MODULE_PREFIX}_SRCS
-	rdp2tcp_main.c)
-
-add_channel_client_library(${MODULE_PREFIX} ${MODULE_NAME} ${CHANNEL_NAME} TRUE "VirtualChannelEntryEx")
-set(${MODULE_PREFIX}_LIBS ${${MODULE_PREFIX}_LIBS} winpr freerdp)
-target_link_libraries(${MODULE_NAME} freerdp)
-install(TARGETS ${MODULE_NAME} DESTINATION ${FREERDP_ADDIN_PATH} EXPORT FreeRDPTargets)
-set_property(TARGET ${MODULE_NAME} PROPERTY FOLDER "Channels/${CHANNEL_NAME}/Client")
diff -urN channels/rdp2tcp/client/rdp2tcp_main.c ../../informatimago/FreeRDP/channels/rdp2tcp/client/rdp2tcp_main.c
--- channels/rdp2tcp/client/rdp2tcp_main.c	2019-07-25 19:50:58.509885760 +0300
+++ ../../informatimago/FreeRDP/channels/rdp2tcp/client/rdp2tcp_main.c	1970-01-01 03:00:00.000000000 +0300
@@ -1,317 +0,0 @@
-/**
- * FreeRDP: A Remote Desktop Protocol Implementation
- * rdp2tcp Virtual Channel Extension
- *
- * Copyright 2017 Artur Zaprzala
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <stdio.h>
-#include <assert.h>
-
-#include <winpr/file.h>
-#include <winpr/pipe.h>
-#include <winpr/thread.h>
-
-#include <freerdp/svc.h>
-
-#define RDP2TCP_CHAN_NAME "rdp2tcp"
-
-#include <freerdp/log.h>
-#define TAG CLIENT_TAG(RDP2TCP_CHAN_NAME)
-
-static int const debug = 0;
-
-typedef struct
-{
-	HANDLE hStdOutputRead;
-	HANDLE hStdInputWrite;
-	HANDLE hProcess;
-	HANDLE copyThread;
-	HANDLE writeComplete;
-	DWORD openHandle;
-	void* initHandle;
-	CHANNEL_ENTRY_POINTS_FREERDP_EX channelEntryPoints;
-	char buffer[16 * 1024];
-} Plugin;
-
-static int init_external_addin(Plugin* plugin)
-{
-	SECURITY_ATTRIBUTES saAttr;
-	STARTUPINFO siStartInfo;
-	PROCESS_INFORMATION procInfo;
-	saAttr.nLength = sizeof(SECURITY_ATTRIBUTES);
-	saAttr.bInheritHandle = TRUE;
-	saAttr.lpSecurityDescriptor = NULL;
-	siStartInfo.cb = sizeof(STARTUPINFO);
-	siStartInfo.hStdError = GetStdHandle(STD_ERROR_HANDLE);
-	siStartInfo.dwFlags = STARTF_USESTDHANDLES;
-
-	// Create pipes
-	if (!CreatePipe(&plugin->hStdOutputRead, &siStartInfo.hStdOutput, &saAttr, 0))
-	{
-		WLog_ERR(TAG, "stdout CreatePipe");
-		return -1;
-	}
-
-	if (!SetHandleInformation(plugin->hStdOutputRead, HANDLE_FLAG_INHERIT, 0))
-	{
-		WLog_ERR(TAG, "stdout SetHandleInformation");
-		return -1;
-	}
-
-	if (!CreatePipe(&siStartInfo.hStdInput, &plugin->hStdInputWrite, &saAttr, 0))
-	{
-		WLog_ERR(TAG, "stdin CreatePipe");
-		return -1;
-	}
-
-	if (!SetHandleInformation(plugin->hStdInputWrite, HANDLE_FLAG_INHERIT, 0))
-	{
-		WLog_ERR(TAG, "stdin SetHandleInformation");
-		return -1;
-	}
-
-	// Execute plugin
-	if (!CreateProcess(NULL,
-	                   plugin->channelEntryPoints.pExtendedData, // command line
-	                   NULL,                                     // process security attributes
-	                   NULL,         // primary thread security attributes
-	                   TRUE,         // handles are inherited
-	                   0,            // creation flags
-	                   NULL,         // use parent's environment
-	                   NULL,         // use parent's current directory
-	                   &siStartInfo, // STARTUPINFO pointer
-	                   &procInfo     // receives PROCESS_INFORMATION
-	                   ))
-	{
-		WLog_ERR(TAG, "fork for addin");
-		return -1;
-	}
-
-	plugin->hProcess = procInfo.hProcess;
-	CloseHandle(procInfo.hThread);
-	CloseHandle(siStartInfo.hStdOutput);
-	CloseHandle(siStartInfo.hStdInput);
-	return 0;
-}
-
-static void dumpData(char* data, unsigned length)
-{
-	unsigned const limit = 98;
-	unsigned l = length > limit ? limit / 2 : length;
-	unsigned i;
-
-	for (i = 0; i < l; ++i)
-	{
-		printf("%02hhx", data[i]);
-	}
-
-	if (length > limit)
-	{
-		printf("...");
-
-		for (i = length - l; i < length; ++i)
-			printf("%02hhx", data[i]);
-	}
-
-	puts("");
-}
-
-static DWORD WINAPI copyThread(void* data)
-{
-	Plugin* plugin = (Plugin*)data;
-	size_t const bufsize = 16 * 1024;
-
-	while (1)
-	{
-		DWORD dwRead;
-		char* buffer = malloc(bufsize);
-
-		if (!buffer)
-		{
-			fprintf(stderr, "rdp2tcp copyThread: malloc failed\n");
-			return -1;
-		}
-
-		// if (!ReadFile(plugin->hStdOutputRead, plugin->buffer, sizeof plugin->buffer, &dwRead,
-		// NULL))
-		if (!ReadFile(plugin->hStdOutputRead, buffer, bufsize, &dwRead, NULL))
-			return -1;
-
-		if (debug > 1)
-		{
-			printf(">%8u ", (unsigned)dwRead);
-			dumpData(buffer, dwRead);
-		}
-
-		if (plugin->channelEntryPoints.pVirtualChannelWriteEx(
-		        plugin->initHandle, plugin->openHandle, buffer, dwRead, NULL) != CHANNEL_RC_OK)
-		{
-			fprintf(stderr, "rdp2tcp copyThread failed %i\n", (int)dwRead);
-			return -1;
-		}
-
-		WaitForSingleObject(plugin->writeComplete, INFINITE);
-		ResetEvent(plugin->writeComplete);
-	}
-
-	return 0;
-}
-
-static void closeChannel(Plugin* plugin)
-{
-	if (debug)
-		puts("rdp2tcp closing channel");
-
-	plugin->channelEntryPoints.pVirtualChannelCloseEx(plugin->initHandle, plugin->openHandle);
-}
-
-static void dataReceived(Plugin* plugin, void* pData, UINT32 dataLength, UINT32 totalLength,
-                         UINT32 dataFlags)
-{
-	DWORD dwWritten;
-
-	if (dataFlags & CHANNEL_FLAG_SUSPEND)
-	{
-		if (debug)
-			puts("rdp2tcp Channel Suspend");
-
-		return;
-	}
-
-	if (dataFlags & CHANNEL_FLAG_RESUME)
-	{
-		if (debug)
-			puts("rdp2tcp Channel Resume");
-
-		return;
-	}
-
-	if (debug > 1)
-	{
-		printf("<%c%3u/%3u ", dataFlags & CHANNEL_FLAG_FIRST ? ' ' : '+', totalLength, dataLength);
-		dumpData(pData, dataLength);
-	}
-
-	if (dataFlags & CHANNEL_FLAG_FIRST)
-	{
-		if (!WriteFile(plugin->hStdInputWrite, &totalLength, sizeof(totalLength), &dwWritten, NULL))
-			closeChannel(plugin);
-	}
-
-	if (!WriteFile(plugin->hStdInputWrite, pData, dataLength, &dwWritten, NULL))
-		closeChannel(plugin);
-}
-
-static void VCAPITYPE VirtualChannelOpenEventEx(LPVOID lpUserParam, DWORD openHandle, UINT event,
-                                                LPVOID pData, UINT32 dataLength, UINT32 totalLength,
-                                                UINT32 dataFlags)
-{
-	Plugin* plugin = (Plugin*)lpUserParam;
-
-	switch (event)
-	{
-	case CHANNEL_EVENT_DATA_RECEIVED:
-		dataReceived(plugin, pData, dataLength, totalLength, dataFlags);
-		break;
-
-	case CHANNEL_EVENT_WRITE_COMPLETE:
-		SetEvent(plugin->writeComplete);
-		break;
-	}
-}
-
-static VOID VCAPITYPE VirtualChannelInitEventEx(LPVOID lpUserParam, LPVOID pInitHandle, UINT event,
-                                                LPVOID pData, UINT dataLength)
-{
-	Plugin* plugin = (Plugin*)lpUserParam;
-
-	switch (event)
-	{
-	case CHANNEL_EVENT_CONNECTED:
-		if (debug)
-			puts("rdp2tcp connected");
-
-		plugin->writeComplete = CreateEvent(NULL, TRUE, FALSE, NULL);
-		plugin->copyThread = CreateThread(NULL, 0, copyThread, plugin, 0, NULL);
-
-		if (plugin->channelEntryPoints.pVirtualChannelOpenEx(
-		        pInitHandle, &plugin->openHandle, RDP2TCP_CHAN_NAME, VirtualChannelOpenEventEx) !=
-		    CHANNEL_RC_OK)
-			return;
-
-		break;
-
-	case CHANNEL_EVENT_DISCONNECTED:
-		if (debug)
-			puts("rdp2tcp disconnected");
-
-		break;
-
-	case CHANNEL_EVENT_TERMINATED:
-		if (debug)
-			puts("rdp2tcp terminated");
-
-		if (plugin->copyThread)
-		{
-			TerminateThread(plugin->copyThread, 0);
-			CloseHandle(plugin->writeComplete);
-		}
-
-		CloseHandle(plugin->hStdInputWrite);
-		CloseHandle(plugin->hStdOutputRead);
-		TerminateProcess(plugin->hProcess, 0);
-		CloseHandle(plugin->hProcess);
-		free(plugin);
-		break;
-	}
-}
-
-#if 1
-#	define VirtualChannelEntryEx rdp2tcp_VirtualChannelEntryEx
-#else
-#	define VirtualChannelEntryEx FREERDP_API VirtualChannelEntryEx
-#endif
-BOOL VCAPITYPE VirtualChannelEntryEx(PCHANNEL_ENTRY_POINTS pEntryPoints, PVOID pInitHandle)
-{
-	CHANNEL_ENTRY_POINTS_FREERDP_EX* pEntryPointsEx;
-	CHANNEL_DEF channelDef;
-	Plugin* plugin = (Plugin*)calloc(1, sizeof(Plugin));
-
-	if (!plugin)
-		return FALSE;
-
-	pEntryPointsEx = (CHANNEL_ENTRY_POINTS_FREERDP_EX*)pEntryPoints;
-	assert(pEntryPointsEx->cbSize >= sizeof(CHANNEL_ENTRY_POINTS_FREERDP_EX) &&
-	       pEntryPointsEx->MagicNumber == FREERDP_CHANNEL_MAGIC_NUMBER);
-	plugin->initHandle = pInitHandle;
-	plugin->channelEntryPoints = *pEntryPointsEx;
-
-	if (init_external_addin(plugin) < 0)
-		return FALSE;
-
-	strcpy(channelDef.name, RDP2TCP_CHAN_NAME);
-	channelDef.options =
-	    CHANNEL_OPTION_INITIALIZED | CHANNEL_OPTION_ENCRYPT_RDP | CHANNEL_OPTION_COMPRESS_RDP;
-
-	if (pEntryPointsEx->pVirtualChannelInitEx(plugin, NULL, pInitHandle, &channelDef, 1,
-	                                          VIRTUAL_CHANNEL_VERSION_WIN2000,
-	                                          VirtualChannelInitEventEx) != CHANNEL_RC_OK)
-		return FALSE;
-
-	return TRUE;
-}
-
-// vim:ts=4
diff -urN channels/rdp2tcp/CMakeLists.txt ../../informatimago/FreeRDP/channels/rdp2tcp/CMakeLists.txt
--- channels/rdp2tcp/CMakeLists.txt	2019-07-24 06:11:52.382197152 +0300
+++ ../../informatimago/FreeRDP/channels/rdp2tcp/CMakeLists.txt	1970-01-01 03:00:00.000000000 +0300
@@ -1,22 +0,0 @@
-# FreeRDP: A Remote Desktop Protocol Implementation
-# FreeRDP cmake build script
-#
-# Copyright 2012 Marc-Andre Moreau <marcandre.moreau@gmail.com>
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-define_channel("rdp2tcp")
-
-if(WITH_CLIENT_CHANNELS)
-	add_channel_client(${MODULE_PREFIX} ${CHANNEL_NAME})
-endif()
diff -urN channels/rdpdr/client/devman.c ../../informatimago/FreeRDP/channels/rdpdr/client/devman.c
--- channels/rdpdr/client/devman.c	2019-07-25 19:50:58.513885779 +0300
+++ ../../informatimago/FreeRDP/channels/rdpdr/client/devman.c	2019-07-25 20:11:22.575955946 +0300
@@ -136,37 +136,6 @@
 	return device;
 }
 
-DEVICE* devman_get_device_by_type(DEVMAN* devman, UINT32 type)
-{
-	DEVICE* device = NULL;
-	ULONG_PTR* keys;
-	int count, x;
-
-	if (!devman)
-		return NULL;
-
-	ListDictionary_Lock(devman->devices);
-	count = ListDictionary_GetKeys(devman->devices, &keys);
-
-	for (x = 0; x < count; x++)
-	{
-		DEVICE* cur = (DEVICE*)ListDictionary_GetItemValue(devman->devices, (void*)keys[x]);
-
-		if (!cur)
-			continue;
-
-		if (cur->type != type)
-			continue;
-
-		device = cur;
-		break;
-	}
-
-	free(keys);
-	ListDictionary_Unlock(devman->devices);
-	return device;
-}
-
 static char DRIVE_SERVICE_NAME[] = "drive";
 static char PRINTER_SERVICE_NAME[] = "printer";
 static char SMARTCARD_SERVICE_NAME[] = "smartcard";
diff -urN channels/rdpdr/client/devman.h ../../informatimago/FreeRDP/channels/rdpdr/client/devman.h
--- channels/rdpdr/client/devman.h	2019-07-24 06:11:52.386197172 +0300
+++ ../../informatimago/FreeRDP/channels/rdpdr/client/devman.h	2019-07-19 20:00:34.101156441 +0300
@@ -28,7 +28,6 @@
 void devman_unregister_device(DEVMAN* devman, void* key);
 UINT devman_load_device_service(DEVMAN* devman, RDPDR_DEVICE* device, rdpContext* rdpcontext);
 DEVICE* devman_get_device_by_id(DEVMAN* devman, UINT32 id);
-DEVICE* devman_get_device_by_type(DEVMAN* devman, UINT32 type);
 
 DEVMAN* devman_new(rdpdrPlugin* rdpdr);
 void devman_free(DEVMAN* devman);
diff -urN channels/rdpdr/client/rdpdr_capabilities.c ../../informatimago/FreeRDP/channels/rdpdr/client/rdpdr_capabilities.c
--- channels/rdpdr/client/rdpdr_capabilities.c	2019-07-25 19:50:58.521885819 +0300
+++ ../../informatimago/FreeRDP/channels/rdpdr/client/rdpdr_capabilities.c	2019-07-25 20:11:22.583955986 +0300
@@ -47,7 +47,6 @@
 /* Output device direction general capability set */
 static void rdpdr_write_general_capset(rdpdrPlugin* rdpdr, wStream* s)
 {
-	WINPR_UNUSED(rdpdr);
 	rdpdr_write_capset_header(s, CAP_GENERAL_TYPE, 44, GENERAL_CAPABILITY_VERSION_02);
 	Stream_Write_UINT32(s, 0); /* osType, ignored on receipt */
 	Stream_Write_UINT32(s, 0); /* osVersion, unused and must be set to zero */
@@ -67,27 +66,22 @@
 static UINT rdpdr_process_general_capset(rdpdrPlugin* rdpdr, wStream* s)
 {
 	UINT16 capabilityLength;
-	WINPR_UNUSED(rdpdr);
 
 	if (Stream_GetRemainingLength(s) < 2)
 		return ERROR_INVALID_DATA;
 
 	Stream_Read_UINT16(s, capabilityLength);
 
-	if (capabilityLength < 4)
+	if (Stream_GetRemainingLength(s) < capabilityLength - 4)
 		return ERROR_INVALID_DATA;
 
-	if (Stream_GetRemainingLength(s) < capabilityLength - 4U)
-		return ERROR_INVALID_DATA;
-
-	Stream_Seek(s, capabilityLength - 4U);
+	Stream_Seek(s, capabilityLength - 4);
 	return CHANNEL_RC_OK;
 }
 
 /* Output printer direction capability set */
 static void rdpdr_write_printer_capset(rdpdrPlugin* rdpdr, wStream* s)
 {
-	WINPR_UNUSED(rdpdr);
 	rdpdr_write_capset_header(s, CAP_PRINTER_TYPE, 8, PRINT_CAPABILITY_VERSION_01);
 }
 
@@ -95,27 +89,22 @@
 static UINT rdpdr_process_printer_capset(rdpdrPlugin* rdpdr, wStream* s)
 {
 	UINT16 capabilityLength;
-	WINPR_UNUSED(rdpdr);
 
 	if (Stream_GetRemainingLength(s) < 2)
 		return ERROR_INVALID_DATA;
 
 	Stream_Read_UINT16(s, capabilityLength);
 
-	if (capabilityLength < 4)
+	if (Stream_GetRemainingLength(s) < capabilityLength - 4)
 		return ERROR_INVALID_DATA;
 
-	if (Stream_GetRemainingLength(s) < capabilityLength - 4U)
-		return ERROR_INVALID_DATA;
-
-	Stream_Seek(s, capabilityLength - 4U);
+	Stream_Seek(s, capabilityLength - 4);
 	return CHANNEL_RC_OK;
 }
 
 /* Output port redirection capability set */
 static void rdpdr_write_port_capset(rdpdrPlugin* rdpdr, wStream* s)
 {
-	WINPR_UNUSED(rdpdr);
 	rdpdr_write_capset_header(s, CAP_PORT_TYPE, 8, PORT_CAPABILITY_VERSION_01);
 }
 
@@ -123,27 +112,22 @@
 static UINT rdpdr_process_port_capset(rdpdrPlugin* rdpdr, wStream* s)
 {
 	UINT16 capabilityLength;
-	WINPR_UNUSED(rdpdr);
 
 	if (Stream_GetRemainingLength(s) < 2)
 		return ERROR_INVALID_DATA;
 
 	Stream_Read_UINT16(s, capabilityLength);
 
-	if (capabilityLength < 4U)
-		return ERROR_INVALID_DATA;
-
-	if (Stream_GetRemainingLength(s) < capabilityLength - 4U)
+	if (Stream_GetRemainingLength(s) < capabilityLength - 4)
 		return ERROR_INVALID_DATA;
 
-	Stream_Seek(s, capabilityLength - 4U);
+	Stream_Seek(s, capabilityLength - 4);
 	return CHANNEL_RC_OK;
 }
 
 /* Output drive redirection capability set */
 static void rdpdr_write_drive_capset(rdpdrPlugin* rdpdr, wStream* s)
 {
-	WINPR_UNUSED(rdpdr);
 	rdpdr_write_capset_header(s, CAP_DRIVE_TYPE, 8, DRIVE_CAPABILITY_VERSION_02);
 }
 
@@ -151,27 +135,22 @@
 static UINT rdpdr_process_drive_capset(rdpdrPlugin* rdpdr, wStream* s)
 {
 	UINT16 capabilityLength;
-	WINPR_UNUSED(rdpdr);
 
 	if (Stream_GetRemainingLength(s) < 2)
 		return ERROR_INVALID_DATA;
 
 	Stream_Read_UINT16(s, capabilityLength);
 
-	if (capabilityLength < 4)
-		return ERROR_INVALID_DATA;
-
-	if (Stream_GetRemainingLength(s) < capabilityLength - 4U)
+	if (Stream_GetRemainingLength(s) < capabilityLength - 4)
 		return ERROR_INVALID_DATA;
 
-	Stream_Seek(s, capabilityLength - 4U);
+	Stream_Seek(s, capabilityLength - 4);
 	return CHANNEL_RC_OK;
 }
 
 /* Output smart card redirection capability set */
 static void rdpdr_write_smartcard_capset(rdpdrPlugin* rdpdr, wStream* s)
 {
-	WINPR_UNUSED(rdpdr);
 	rdpdr_write_capset_header(s, CAP_SMARTCARD_TYPE, 8, SMARTCARD_CAPABILITY_VERSION_01);
 }
 
@@ -179,20 +158,16 @@
 static UINT rdpdr_process_smartcard_capset(rdpdrPlugin* rdpdr, wStream* s)
 {
 	UINT16 capabilityLength;
-	WINPR_UNUSED(rdpdr);
 
 	if (Stream_GetRemainingLength(s) < 2)
 		return ERROR_INVALID_DATA;
 
 	Stream_Read_UINT16(s, capabilityLength);
 
-	if (capabilityLength < 4)
-		return ERROR_INVALID_DATA;
-
-	if (Stream_GetRemainingLength(s) < capabilityLength - 4U)
+	if (Stream_GetRemainingLength(s) < capabilityLength - 4)
 		return ERROR_INVALID_DATA;
 
-	Stream_Seek(s, capabilityLength - 4U);
+	Stream_Seek(s, capabilityLength - 4);
 	return CHANNEL_RC_OK;
 }
 
diff -urN channels/rdpdr/client/rdpdr_main.c ../../informatimago/FreeRDP/channels/rdpdr/client/rdpdr_main.c
--- channels/rdpdr/client/rdpdr_main.c	2019-07-25 19:50:58.557885998 +0300
+++ ../../informatimago/FreeRDP/channels/rdpdr/client/rdpdr_main.c	2019-07-25 20:11:22.619956164 +0300
@@ -535,7 +535,7 @@
                                            const FSEventStreamEventId eventIds[])
 {
 	rdpdrPlugin* rdpdr;
-	size_t i;
+	int i;
 	UINT error;
 	char** paths = (char**)eventPaths;
 	rdpdr = (rdpdrPlugin*)clientCallBackInfo;
@@ -589,6 +589,32 @@
 	return CHANNEL_RC_OK;
 }
 
+/**
+ * Function description
+ *
+ * @return 0 on success, otherwise a Win32 error code
+ */
+static UINT drive_hotplug_thread_terminate(rdpdrPlugin* rdpdr)
+{
+	UINT error;
+
+	if (rdpdr->hotplugThread)
+	{
+		CFRunLoopStop(rdpdr->runLoop);
+
+		if (WaitForSingleObject(rdpdr->hotplugThread, INFINITE) == WAIT_FAILED)
+		{
+			error = GetLastError();
+			WLog_ERR(TAG, "WaitForSingleObject failed with error %" PRIu32 "!", error);
+			return error;
+		}
+
+		rdpdr->hotplugThread = NULL;
+	}
+
+	return CHANNEL_RC_OK;
+}
+
 #else
 
 #	define MAX_USB_DEVICES 100
@@ -654,7 +680,7 @@
 	int c;
 	char* newbuf;
 	char* lrbuf;
-	size_t lrsiz;
+	int lrsiz;
 	*len = 0;
 	lrsiz = 0;
 	lrbuf = NULL;
@@ -912,6 +938,14 @@
 	UINT error = 0;
 	DWORD status;
 	rdpdr = (rdpdrPlugin*)arg;
+
+	if (!(rdpdr->stopEvent = CreateEvent(NULL, TRUE, FALSE, NULL)))
+	{
+		WLog_ERR(TAG, "CreateEvent failed!");
+		error = ERROR_INTERNAL_ERROR;
+		goto out;
+	}
+
 	mfd = open("/proc/mounts", O_RDONLY, 0);
 
 	if (mfd < 0)
@@ -963,13 +997,11 @@
 	if (error && rdpdr->rdpcontext)
 		setChannelError(rdpdr->rdpcontext, error, "drive_hotplug_thread_func reported an error");
 
+	CloseHandle(rdpdr->stopEvent);
 	ExitThread(error);
 	return error;
 }
 
-#endif
-
-#ifndef _WIN32
 /**
  * Function description
  *
@@ -981,10 +1013,8 @@
 
 	if (rdpdr->hotplugThread)
 	{
-		SetEvent(rdpdr->stopEvent);
-#	ifdef __MACOSX__
-		CFRunLoopStop(rdpdr->runLoop);
-#	endif
+		if (rdpdr->stopEvent)
+			SetEvent(rdpdr->stopEvent);
 
 		if (WaitForSingleObject(rdpdr->hotplugThread, INFINITE) == WAIT_FAILED)
 		{
@@ -993,9 +1023,6 @@
 			return error;
 		}
 
-		CloseHandle(rdpdr->hotplugThread);
-		CloseHandle(rdpdr->stopEvent);
-		rdpdr->stopEvent = NULL;
 		rdpdr->hotplugThread = NULL;
 	}
 
@@ -1041,24 +1068,11 @@
 			if (drive->Path && (strcmp(drive->Path, "*") == 0))
 			{
 				first_hotplug(rdpdr);
-#ifndef _WIN32
-
-				if (!(rdpdr->stopEvent = CreateEvent(NULL, TRUE, FALSE, NULL)))
-				{
-					WLog_ERR(TAG, "CreateEvent failed!");
-					return ERROR_INTERNAL_ERROR;
-				}
-
-#endif
 
 				if (!(rdpdr->hotplugThread =
 				          CreateThread(NULL, 0, drive_hotplug_thread_func, rdpdr, 0, NULL)))
 				{
 					WLog_ERR(TAG, "CreateThread failed!");
-#ifndef _WIN32
-					CloseHandle(rdpdr->stopEvent);
-					rdpdr->stopEvent = NULL;
-#endif
 					return ERROR_INTERNAL_ERROR;
 				}
 
@@ -1289,31 +1303,6 @@
 	return error;
 }
 
-static UINT rdpdr_process_component(rdpdrPlugin* rdpdr, UINT16 component, UINT16 packetId,
-                                    wStream* s)
-{
-	UINT32 type;
-	DEVICE* device;
-
-	switch (component)
-	{
-	case RDPDR_CTYP_PRN:
-		type = RDPDR_DTYP_PRINT;
-		break;
-
-	default:
-		return ERROR_INVALID_DATA;
-	}
-
-	device = devman_get_device_by_type(rdpdr->devman, type);
-
-	if (!device)
-		return ERROR_INVALID_PARAMETER;
-
-	return IFCALLRESULT(ERROR_INVALID_PARAMETER, device->CustomComponentRequest, device, component,
-	                    packetId, s);
-}
-
 /**
  * Function description
  *
@@ -1357,122 +1346,147 @@
 	UINT16 packetId;
 	UINT32 deviceId;
 	UINT32 status;
-	UINT error = ERROR_INVALID_DATA;
+	UINT error;
 
 	if (!rdpdr || !s)
 		return CHANNEL_RC_NULL_DATA;
 
-	if (Stream_GetRemainingLength(s) >= 4)
-	{
-		Stream_Read_UINT16(s, component); /* Component (2 bytes) */
-		Stream_Read_UINT16(s, packetId);  /* PacketId (2 bytes) */
+	if (Stream_GetRemainingLength(s) < 4)
+		return ERROR_INVALID_DATA;
+
+	Stream_Read_UINT16(s, component); /* Component (2 bytes) */
+	Stream_Read_UINT16(s, packetId);  /* PacketId (2 bytes) */
 
-		if (component == RDPDR_CTYP_CORE)
+	if (component == RDPDR_CTYP_CORE)
+	{
+		switch (packetId)
 		{
-			switch (packetId)
+		case PAKID_CORE_SERVER_ANNOUNCE:
+			if ((error = rdpdr_process_server_announce_request(rdpdr, s)))
+				return error;
+
+			if ((error = rdpdr_send_client_announce_reply(rdpdr)))
 			{
-			case PAKID_CORE_SERVER_ANNOUNCE:
-				if ((error = rdpdr_process_server_announce_request(rdpdr, s)))
-				{
-				}
-				else if ((error = rdpdr_send_client_announce_reply(rdpdr)))
-				{
-					WLog_ERR(TAG, "rdpdr_send_client_announce_reply failed with error %" PRIu32 "",
-					         error);
-				}
-				else if ((error = rdpdr_send_client_name_request(rdpdr)))
-				{
-					WLog_ERR(TAG, "rdpdr_send_client_name_request failed with error %" PRIu32 "",
-					         error);
-				}
-				else if ((error = rdpdr_process_init(rdpdr)))
-				{
-					WLog_ERR(TAG, "rdpdr_process_init failed with error %" PRIu32 "", error);
-				}
+				WLog_ERR(TAG, "rdpdr_send_client_announce_reply failed with error %" PRIu32 "",
+				         error);
+				return error;
+			}
 
-				break;
+			if ((error = rdpdr_send_client_name_request(rdpdr)))
+			{
+				WLog_ERR(TAG, "rdpdr_send_client_name_request failed with error %" PRIu32 "",
+				         error);
+				return error;
+			}
 
-			case PAKID_CORE_SERVER_CAPABILITY:
-				if ((error = rdpdr_process_capability_request(rdpdr, s)))
-				{
-				}
-				else if ((error = rdpdr_send_capability_response(rdpdr)))
-				{
-					WLog_ERR(TAG, "rdpdr_send_capability_response failed with error %" PRIu32 "",
-					         error);
-				}
+			if ((error = rdpdr_process_init(rdpdr)))
+			{
+				WLog_ERR(TAG, "rdpdr_process_init failed with error %" PRIu32 "", error);
+				return error;
+			}
 
-				break;
+			break;
 
-			case PAKID_CORE_CLIENTID_CONFIRM:
-				if ((error = rdpdr_process_server_clientid_confirm(rdpdr, s)))
-				{
-				}
-				else if ((error = rdpdr_send_device_list_announce_request(rdpdr, FALSE)))
-				{
-					WLog_ERR(TAG,
-					         "rdpdr_send_device_list_announce_request failed with error %" PRIu32
-					         "",
-					         error);
-				}
+		case PAKID_CORE_SERVER_CAPABILITY:
+			if ((error = rdpdr_process_capability_request(rdpdr, s)))
+				return error;
 
-				break;
+			if ((error = rdpdr_send_capability_response(rdpdr)))
+			{
+				WLog_ERR(TAG, "rdpdr_send_capability_response failed with error %" PRIu32 "",
+				         error);
+				return error;
+			}
 
-			case PAKID_CORE_USER_LOGGEDON:
-				if ((error = rdpdr_send_device_list_announce_request(rdpdr, TRUE)))
-				{
-					WLog_ERR(TAG,
-					         "rdpdr_send_device_list_announce_request failed with error %" PRIu32
-					         "",
-					         error);
-				}
+			break;
 
-				break;
+		case PAKID_CORE_CLIENTID_CONFIRM:
+			if ((error = rdpdr_process_server_clientid_confirm(rdpdr, s)))
+				return error;
 
-			case PAKID_CORE_DEVICE_REPLY:
+			if ((error = rdpdr_send_device_list_announce_request(rdpdr, FALSE)))
+			{
+				WLog_ERR(TAG,
+				         "rdpdr_send_device_list_announce_request failed with error %" PRIu32 "",
+				         error);
+				return error;
+			}
 
-				/* connect to a specific resource */
-				if (Stream_GetRemainingLength(s) >= 8)
-				{
-					Stream_Read_UINT32(s, deviceId);
-					Stream_Read_UINT32(s, status);
-					error = CHANNEL_RC_OK;
-				}
+			break;
+
+		case PAKID_CORE_USER_LOGGEDON:
+			if ((error = rdpdr_send_device_list_announce_request(rdpdr, TRUE)))
+			{
+				WLog_ERR(TAG,
+				         "rdpdr_send_device_list_announce_request failed with error %" PRIu32 "",
+				         error);
+				return error;
+			}
 
-				break;
+			break;
 
-			case PAKID_CORE_DEVICE_IOREQUEST:
-				if ((error = rdpdr_process_irp(rdpdr, s)))
-				{
-					WLog_ERR(TAG, "rdpdr_process_irp failed with error %" PRIu32 "", error);
-					return error;
-				}
-				else
-					s = NULL;
+		case PAKID_CORE_DEVICE_REPLY:
+
+			/* connect to a specific resource */
+			if (Stream_GetRemainingLength(s) < 8)
+				return ERROR_INVALID_DATA;
 
-				break;
+			Stream_Read_UINT32(s, deviceId);
+			Stream_Read_UINT32(s, status);
+			break;
 
-			default:
-				WLog_ERR(TAG, "RDPDR_CTYP_CORE unknown PacketId: 0x%04" PRIX16 "", packetId);
-				error = ERROR_INVALID_DATA;
-				break;
+		case PAKID_CORE_DEVICE_IOREQUEST:
+			if ((error = rdpdr_process_irp(rdpdr, s)))
+			{
+				WLog_ERR(TAG, "rdpdr_process_irp failed with error %" PRIu32 "", error);
+				return error;
 			}
+
+			s = NULL;
+			break;
+
+		default:
+			WLog_ERR(TAG, "RDPDR_CTYP_CORE unknown PacketId: 0x%04" PRIX16 "", packetId);
+			return ERROR_INVALID_DATA;
+			break;
 		}
-		else
+	}
+	else if (component == RDPDR_CTYP_PRN)
+	{
+		switch (packetId)
 		{
-			error = rdpdr_process_component(rdpdr, component, packetId, s);
+		case PAKID_PRN_CACHE_DATA:
+		{
+			UINT32 eventID;
 
-			if (error != CHANNEL_RC_OK)
-			{
-				WLog_ERR(TAG,
-				         "Unknown message: Component: 0x%04" PRIX16 " PacketId: 0x%04" PRIX16 "",
-				         component, packetId);
-			}
+			if (Stream_GetRemainingLength(s) < 4)
+				return ERROR_INVALID_DATA;
+
+			Stream_Read_UINT32(s, eventID);
+			WLog_ERR(TAG,
+			         "Ignoring unhandled message PAKID_PRN_CACHE_DATA (EventID: 0x%08" PRIX32 ")",
+			         eventID);
 		}
+		break;
+
+		case PAKID_PRN_USING_XPS:
+			WLog_ERR(TAG, "Ignoring unhandled message PAKID_PRN_USING_XPS");
+			break;
+
+		default:
+			WLog_ERR(TAG, "Unknown printing component packetID: 0x%04" PRIX16 "", packetId);
+			return ERROR_INVALID_DATA;
+		}
+	}
+	else
+	{
+		WLog_ERR(TAG, "Unknown message: Component: 0x%04" PRIX16 " PacketId: 0x%04" PRIX16 "",
+		         component, packetId);
+		return ERROR_INVALID_DATA;
 	}
 
 	Stream_Free(s, TRUE);
-	return error;
+	return CHANNEL_RC_OK;
 }
 
 /**
diff -urN channels/rdpdr/client/rdpdr_main.h ../../informatimago/FreeRDP/channels/rdpdr/client/rdpdr_main.h
--- channels/rdpdr/client/rdpdr_main.h	2019-07-25 19:50:58.561886017 +0300
+++ ../../informatimago/FreeRDP/channels/rdpdr/client/rdpdr_main.h	2019-07-25 20:11:22.623956184 +0300
@@ -70,11 +70,9 @@
 	HANDLE hotplugThread;
 #ifdef _WIN32
 	HWND hotplug_wnd;
-#endif
-#ifdef __MACOSX__
+#elif __MACOSX__
 	CFRunLoopRef runLoop;
-#endif
-#ifndef _WIN32
+#else
 	HANDLE stopEvent;
 #endif
 	rdpContext* rdpcontext;
diff -urN channels/rdpdr/server/rdpdr_main.c ../../informatimago/FreeRDP/channels/rdpdr/server/rdpdr_main.c
--- channels/rdpdr/server/rdpdr_main.c	2019-07-25 19:50:58.601886216 +0300
+++ ../../informatimago/FreeRDP/channels/rdpdr/server/rdpdr_main.c	2019-07-25 20:11:22.663956382 +0300
@@ -739,7 +739,7 @@
 static UINT rdpdr_server_receive_device_list_announce_request(RdpdrServerContext* context,
                                                               wStream* s, RDPDR_HEADER* header)
 {
-	UINT32 i;
+	int i;
 	UINT32 DeviceCount;
 	UINT32 DeviceType;
 	UINT32 DeviceId;
@@ -832,7 +832,7 @@
 static UINT rdpdr_server_receive_device_list_remove_request(RdpdrServerContext* context, wStream* s,
                                                             RDPDR_HEADER* header)
 {
-	UINT32 i;
+	int i;
 	UINT32 DeviceCount;
 	UINT32 DeviceType;
 	UINT32 DeviceId;
diff -urN channels/rdpei/server/rdpei_main.c ../../informatimago/FreeRDP/channels/rdpei/server/rdpei_main.c
--- channels/rdpei/server/rdpei_main.c	2019-07-25 19:50:58.641886413 +0300
+++ ../../informatimago/FreeRDP/channels/rdpei/server/rdpei_main.c	2019-07-25 20:11:22.703956581 +0300
@@ -261,7 +261,7 @@
  */
 static UINT read_touch_frame(RdpeiServerContext* context, wStream* s, RDPINPUT_TOUCH_FRAME* frame)
 {
-	UINT32 i;
+	int i;
 	RDPINPUT_CONTACT_DATA* contact;
 	UINT error;
 
@@ -302,7 +302,7 @@
 static UINT read_touch_event(RdpeiServerContext* context, wStream* s)
 {
 	UINT32 frameCount;
-	UINT32 i;
+	int i;
 	RDPINPUT_TOUCH_EVENT* event = &context->priv->touchEvent;
 	RDPINPUT_TOUCH_FRAME* frame;
 	UINT error = CHANNEL_RC_OK;
diff -urN channels/rdpgfx/client/rdpgfx_codec.c ../../informatimago/FreeRDP/channels/rdpgfx/client/rdpgfx_codec.c
--- channels/rdpgfx/client/rdpgfx_codec.c	2019-07-25 19:50:58.645886434 +0300
+++ ../../informatimago/FreeRDP/channels/rdpgfx/client/rdpgfx_codec.c	2019-07-25 20:11:22.707956600 +0300
@@ -245,7 +245,10 @@
 		h264.bitstream[1].length = Stream_GetRemainingLength(s);
 	}
 	else
+	{
 		h264.bitstream[0].length = Stream_GetRemainingLength(s);
+		memset(&h264.bitstream[1], 0, sizeof(h264.bitstream[1]));
+	}
 
 	cmd->extra = (void*)&h264;
 
diff -urN channels/rdpgfx/client/rdpgfx_main.c ../../informatimago/FreeRDP/channels/rdpgfx/client/rdpgfx_main.c
--- channels/rdpgfx/client/rdpgfx_main.c	2019-07-25 19:50:58.693886672 +0300
+++ ../../informatimago/FreeRDP/channels/rdpgfx/client/rdpgfx_main.c	2019-07-25 20:11:22.747956799 +0300
@@ -52,226 +52,104 @@
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-static UINT rdpgfx_send_caps_advertise_pdu(RdpgfxClientContext* context,
-                                           const RDPGFX_CAPS_ADVERTISE_PDU* pdu)
+static UINT rdpgfx_send_caps_advertise_pdu(RDPGFX_CHANNEL_CALLBACK* callback)
 {
-	UINT error = CHANNEL_RC_OK;
-	UINT16 index;
-	RDPGFX_HEADER header;
-	RDPGFX_CAPSET* capsSet;
-	RDPGFX_PLUGIN* gfx;
-	RDPGFX_CHANNEL_CALLBACK* callback;
+	UINT error;
 	wStream* s;
-	gfx = (RDPGFX_PLUGIN*)context->handle;
-	callback = gfx->listener_callback->channel_callback;
-	header.flags = 0;
-	header.cmdId = RDPGFX_CMDID_CAPSADVERTISE;
-	header.pduLength = RDPGFX_HEADER_SIZE + 2;
-
-	for (index = 0; index < pdu->capsSetCount; index++)
-	{
-		capsSet = &(pdu->capsSets[index]);
-		header.pduLength += RDPGFX_CAPSET_BASE_SIZE + capsSet->length;
-	}
-
-	DEBUG_RDPGFX(gfx->log, "SendCapsAdvertisePdu %" PRIu16 "", pdu->capsSetCount);
-	s = Stream_New(NULL, header.pduLength);
-
-	if (!s)
-	{
-		WLog_ERR(TAG, "Stream_New failed!");
-		return CHANNEL_RC_NO_MEMORY;
-	}
-
-	if ((error = rdpgfx_write_header(s, &header)))
-		goto fail;
-
-	/* RDPGFX_CAPS_ADVERTISE_PDU */
-	Stream_Write_UINT16(s, pdu->capsSetCount); /* capsSetCount (2 bytes) */
-
-	for (index = 0; index < pdu->capsSetCount; index++)
-	{
-		capsSet = &(pdu->capsSets[index]);
-		Stream_Write_UINT32(s, capsSet->version); /* version (4 bytes) */
-		Stream_Write_UINT32(s, capsSet->length);  /* capsDataLength (4 bytes) */
-		Stream_Write_UINT32(s, capsSet->flags);   /* capsData (4 bytes) */
-		Stream_Zero(s, capsSet->length - 4);
-	}
-
-	Stream_SealLength(s);
-	error = callback->channel->Write(callback->channel, (UINT32)Stream_Length(s), Stream_Buffer(s),
-	                                 NULL);
-fail:
-	Stream_Free(s, TRUE);
-	return error;
-}
-
-static BOOL rdpgfx_is_capability_filtered(RDPGFX_PLUGIN* gfx, UINT32 caps)
-{
-	const UINT32 filter = gfx->capsFilter;
-	const UINT32 capList[] = {
-		RDPGFX_CAPVERSION_8,   RDPGFX_CAPVERSION_81,  RDPGFX_CAPVERSION_10,
-		RDPGFX_CAPVERSION_101, RDPGFX_CAPVERSION_102, RDPGFX_CAPVERSION_103,
-		RDPGFX_CAPVERSION_104, RDPGFX_CAPVERSION_105, RDPGFX_CAPVERSION_106
-	};
-	UINT32 x;
-
-	for (x = 0; x < ARRAYSIZE(capList); x++)
-	{
-		if (caps == capList[x])
-			return (filter & (1 << x)) != 0;
-	}
-
-	return TRUE;
-}
-
-/**
- * Function description
- *
- * @return 0 on success, otherwise a Win32 error code
- */
-static UINT rdpgfx_send_supported_caps(RDPGFX_CHANNEL_CALLBACK* callback)
-{
+	UINT16 index;
 	RDPGFX_PLUGIN* gfx;
-	RdpgfxClientContext* context;
+	RDPGFX_HEADER header;
 	RDPGFX_CAPSET* capsSet;
-	RDPGFX_CAPSET capsSets[RDPGFX_NUMBER_CAPSETS] = { 0 };
+	RDPGFX_CAPSET capsSets[RDPGFX_NUMBER_CAPSETS];
 	RDPGFX_CAPS_ADVERTISE_PDU pdu;
-
-	if (!callback)
-		return ERROR_BAD_ARGUMENTS;
-
 	gfx = (RDPGFX_PLUGIN*)callback->plugin;
-
-	if (!gfx)
-		return ERROR_BAD_CONFIGURATION;
-
-	context = (RdpgfxClientContext*)gfx->iface.pInterface;
-
-	if (!context)
-		return ERROR_BAD_CONFIGURATION;
-
+	header.flags = 0;
+	header.cmdId = RDPGFX_CMDID_CAPSADVERTISE;
 	pdu.capsSetCount = 0;
 	pdu.capsSets = (RDPGFX_CAPSET*)capsSets;
+	capsSet = &capsSets[pdu.capsSetCount++];
+	capsSet->version = RDPGFX_CAPVERSION_8;
+	capsSet->flags = 0;
+
+	if (gfx->ThinClient)
+		capsSet->flags |= RDPGFX_CAPS_FLAG_THINCLIENT;
+
+	/* in CAPVERSION_8 the spec says that we should not have both
+	 * thinclient and smallcache (and thinclient implies a small cache)
+	 */
+	if (gfx->SmallCache && !gfx->ThinClient)
+		capsSet->flags |= RDPGFX_CAPS_FLAG_SMALL_CACHE;
+
+	capsSet = &capsSets[pdu.capsSetCount++];
+	capsSet->version = RDPGFX_CAPVERSION_81;
+	capsSet->flags = 0;
 
-	if (!rdpgfx_is_capability_filtered(gfx, RDPGFX_CAPVERSION_8))
-	{
-		capsSet = &capsSets[pdu.capsSetCount++];
-		capsSet->version = RDPGFX_CAPVERSION_8;
-		capsSet->length = 4;
-		capsSet->flags = 0;
-
-		if (gfx->ThinClient)
-			capsSet->flags |= RDPGFX_CAPS_FLAG_THINCLIENT;
-
-		/* in CAPVERSION_8 the spec says that we should not have both
-		 * thinclient and smallcache (and thinclient implies a small cache)
-		 */
-		if (gfx->SmallCache && !gfx->ThinClient)
-			capsSet->flags |= RDPGFX_CAPS_FLAG_SMALL_CACHE;
-	}
-
-	if (!rdpgfx_is_capability_filtered(gfx, RDPGFX_CAPVERSION_81))
-	{
-		capsSet = &capsSets[pdu.capsSetCount++];
-		capsSet->version = RDPGFX_CAPVERSION_81;
-		capsSet->length = 4;
-		capsSet->flags = 0;
-
-		if (gfx->ThinClient)
-			capsSet->flags |= RDPGFX_CAPS_FLAG_THINCLIENT;
+	if (gfx->ThinClient)
+		capsSet->flags |= RDPGFX_CAPS_FLAG_THINCLIENT;
 
-		if (gfx->SmallCache)
-			capsSet->flags |= RDPGFX_CAPS_FLAG_SMALL_CACHE;
+	if (gfx->SmallCache)
+		capsSet->flags |= RDPGFX_CAPS_FLAG_SMALL_CACHE;
 
 #ifdef WITH_GFX_H264
 
-		if (gfx->H264)
-			capsSet->flags |= RDPGFX_CAPS_FLAG_AVC420_ENABLED;
+	if (gfx->H264)
+		capsSet->flags |= RDPGFX_CAPS_FLAG_AVC420_ENABLED;
 
 #endif
-	}
 
 	if (!gfx->H264 || gfx->AVC444)
 	{
-		UINT32 caps10Flags = 0;
+		capsSet = &capsSets[pdu.capsSetCount++];
+		capsSet->version = RDPGFX_CAPVERSION_10;
+		capsSet->flags = 0;
 
 		if (gfx->SmallCache)
-			caps10Flags |= RDPGFX_CAPS_FLAG_SMALL_CACHE;
+			capsSet->flags |= RDPGFX_CAPS_FLAG_SMALL_CACHE;
 
 #ifdef WITH_GFX_H264
 
 		if (!gfx->AVC444)
-			caps10Flags |= RDPGFX_CAPS_FLAG_AVC_DISABLED;
+			capsSet->flags |= RDPGFX_CAPS_FLAG_AVC_DISABLED;
 
 #else
-		caps10Flags |= RDPGFX_CAPS_FLAG_AVC_DISABLED;
+		capsSet->flags |= RDPGFX_CAPS_FLAG_AVC_DISABLED;
 #endif
+		capsSets[pdu.capsSetCount] = *capsSet;
+		capsSets[pdu.capsSetCount++].version = RDPGFX_CAPVERSION_102;
+		capsSets[pdu.capsSetCount] = *capsSet;
+		capsSets[pdu.capsSetCount++].version = RDPGFX_CAPVERSION_103;
+	}
 
-		if (!rdpgfx_is_capability_filtered(gfx, RDPGFX_CAPVERSION_10))
-		{
-			capsSet = &capsSets[pdu.capsSetCount++];
-			capsSet->version = RDPGFX_CAPVERSION_10;
-			capsSet->length = 4;
-			capsSet->flags = caps10Flags;
-		}
-
-		if (!rdpgfx_is_capability_filtered(gfx, RDPGFX_CAPVERSION_101))
-		{
-			capsSet = &capsSets[pdu.capsSetCount++];
-			capsSet->version = RDPGFX_CAPVERSION_101;
-			capsSet->length = 0x10;
-			capsSet->flags = 0;
-		}
-
-		if (!rdpgfx_is_capability_filtered(gfx, RDPGFX_CAPVERSION_102))
-		{
-			capsSet = &capsSets[pdu.capsSetCount++];
-			capsSet->version = RDPGFX_CAPVERSION_102;
-			capsSet->length = 0x4;
-			capsSet->flags = caps10Flags;
-		}
-
-		if (gfx->ThinClient)
-		{
-			if ((caps10Flags & RDPGFX_CAPS_FLAG_AVC_DISABLED) == 0)
-				caps10Flags |= RDPGFX_CAPS_FLAG_AVC_THINCLIENT;
-		}
+	header.pduLength = RDPGFX_HEADER_SIZE + 2 + (pdu.capsSetCount * RDPGFX_CAPSET_SIZE);
+	WLog_Print(gfx->log, WLOG_DEBUG, "SendCapsAdvertisePdu %" PRIu16 "", pdu.capsSetCount);
+	s = Stream_New(NULL, header.pduLength);
 
-		if (!rdpgfx_is_capability_filtered(gfx, RDPGFX_CAPVERSION_103))
-		{
-			capsSet = &capsSets[pdu.capsSetCount++];
-			capsSet->version = RDPGFX_CAPVERSION_103;
-			capsSet->length = 0x4;
-			capsSet->flags = caps10Flags & ~RDPGFX_CAPS_FLAG_SMALL_CACHE;
-		}
+	if (!s)
+	{
+		WLog_ERR(TAG, "Stream_New failed!");
+		return CHANNEL_RC_NO_MEMORY;
+	}
 
-		if (!rdpgfx_is_capability_filtered(gfx, RDPGFX_CAPVERSION_104))
-		{
-			capsSet = &capsSets[pdu.capsSetCount++];
-			capsSet->version = RDPGFX_CAPVERSION_104;
-			capsSet->length = 0x4;
-			capsSet->flags = caps10Flags;
-		}
+	if ((error = rdpgfx_write_header(s, &header)))
+		goto fail;
 
-		if (!rdpgfx_is_capability_filtered(gfx, RDPGFX_CAPVERSION_105))
-		{
-			capsSet = &capsSets[pdu.capsSetCount++];
-			capsSet->version = RDPGFX_CAPVERSION_105;
-			capsSet->length = 0x4;
-			capsSet->flags = caps10Flags;
-		}
+	/* RDPGFX_CAPS_ADVERTISE_PDU */
+	Stream_Write_UINT16(s, pdu.capsSetCount); /* capsSetCount (2 bytes) */
 
-		if (!rdpgfx_is_capability_filtered(gfx, RDPGFX_CAPVERSION_106))
-		{
-			capsSet = &capsSets[pdu.capsSetCount++];
-			capsSet->version = RDPGFX_CAPVERSION_106;
-			capsSet->length = 0x4;
-			capsSet->flags = caps10Flags;
-		}
+	for (index = 0; index < pdu.capsSetCount; index++)
+	{
+		capsSet = &(pdu.capsSets[index]);
+		Stream_Write_UINT32(s, capsSet->version); /* version (4 bytes) */
+		Stream_Write_UINT32(s, 4);                /* capsDataLength (4 bytes) */
+		Stream_Write_UINT32(s, capsSet->flags);   /* capsData (4 bytes) */
 	}
 
-	return IFCALLRESULT(ERROR_BAD_CONFIGURATION, context->CapsAdvertise, context, &pdu);
+	Stream_SealLength(s);
+	error = callback->channel->Write(callback->channel, (UINT32)Stream_Length(s), Stream_Buffer(s),
+	                                 NULL);
+fail:
+	Stream_Free(s, TRUE);
+	return error;
 }
 
 /**
@@ -282,9 +160,9 @@
 static UINT rdpgfx_recv_caps_confirm_pdu(RDPGFX_CHANNEL_CALLBACK* callback, wStream* s)
 {
 	RDPGFX_CAPSET capsSet;
+	UINT32 capsDataLength;
 	RDPGFX_CAPS_CONFIRM_PDU pdu;
 	RDPGFX_PLUGIN* gfx = (RDPGFX_PLUGIN*)callback->plugin;
-	RdpgfxClientContext* context = (RdpgfxClientContext*)gfx->iface.pInterface;
 	pdu.capsSet = &capsSet;
 
 	if (Stream_GetRemainingLength(s) < 12)
@@ -294,16 +172,13 @@
 	}
 
 	Stream_Read_UINT32(s, capsSet.version); /* version (4 bytes) */
-	Stream_Read_UINT32(s, capsSet.length);  /* capsDataLength (4 bytes) */
+	Stream_Read_UINT32(s, capsDataLength);  /* capsDataLength (4 bytes) */
 	Stream_Read_UINT32(s, capsSet.flags);   /* capsData (4 bytes) */
 	gfx->ConnectionCaps = capsSet;
-	DEBUG_RDPGFX(gfx->log, "RecvCapsConfirmPdu: version: 0x%08" PRIX32 " flags: 0x%08" PRIX32 "",
-	             capsSet.version, capsSet.flags);
-
-	if (!context)
-		return ERROR_BAD_CONFIGURATION;
-
-	return IFCALLRESULT(CHANNEL_RC_OK, context->CapsConfirm, context, &pdu);
+	WLog_Print(gfx->log, WLOG_DEBUG,
+	           "RecvCapsConfirmPdu: version: 0x%08" PRIX32 " flags: 0x%08" PRIX32 "",
+	           capsSet.version, capsSet.flags);
+	return CHANNEL_RC_OK;
 }
 
 /**
@@ -311,32 +186,17 @@
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-static UINT rdpgfx_send_frame_acknowledge_pdu(RdpgfxClientContext* context,
-                                              const RDPGFX_FRAME_ACKNOWLEDGE_PDU* pdu)
+static UINT rdpgfx_send_frame_acknowledge_pdu(RDPGFX_CHANNEL_CALLBACK* callback,
+                                              RDPGFX_FRAME_ACKNOWLEDGE_PDU* pdu)
 {
 	UINT error;
 	wStream* s;
 	RDPGFX_HEADER header;
-	RDPGFX_PLUGIN* gfx;
-	RDPGFX_CHANNEL_CALLBACK* callback;
-
-	if (!context || !pdu)
-		return ERROR_BAD_ARGUMENTS;
-
-	gfx = (RDPGFX_PLUGIN*)context->handle;
-
-	if (!gfx)
-		return ERROR_BAD_CONFIGURATION;
-
-	callback = gfx->listener_callback->channel_callback;
-
-	if (!callback)
-		return ERROR_BAD_CONFIGURATION;
-
+	RDPGFX_PLUGIN* gfx = (RDPGFX_PLUGIN*)callback->plugin;
 	header.flags = 0;
 	header.cmdId = RDPGFX_CMDID_FRAMEACKNOWLEDGE;
 	header.pduLength = RDPGFX_HEADER_SIZE + 12;
-	DEBUG_RDPGFX(gfx->log, "SendFrameAcknowledgePdu: %" PRIu32 "", pdu->frameId);
+	WLog_Print(gfx->log, WLOG_DEBUG, "SendFrameAcknowledgePdu: %" PRIu32 "", pdu->frameId);
 	s = Stream_New(NULL, header.pduLength);
 
 	if (!s)
@@ -354,41 +214,22 @@
 	Stream_Write_UINT32(s, pdu->totalFramesDecoded); /* totalFramesDecoded (4 bytes) */
 	error = callback->channel->Write(callback->channel, (UINT32)Stream_Length(s), Stream_Buffer(s),
 	                                 NULL);
-
-	if (error == CHANNEL_RC_OK) /* frame successfully acked */
-		gfx->UnacknowledgedFrames--;
-
 fail:
 	Stream_Free(s, TRUE);
 	return error;
 }
 
-static UINT rdpgfx_send_qoe_frame_acknowledge_pdu(RdpgfxClientContext* context,
+static UINT rdpgfx_send_qoe_frame_acknowledge_pdu(RDPGFX_CHANNEL_CALLBACK* callback,
                                                   const RDPGFX_QOE_FRAME_ACKNOWLEDGE_PDU* pdu)
 {
 	UINT error;
 	wStream* s;
 	RDPGFX_HEADER header;
-	RDPGFX_CHANNEL_CALLBACK* callback;
-	RDPGFX_PLUGIN* gfx;
+	RDPGFX_PLUGIN* gfx = (RDPGFX_PLUGIN*)callback->plugin;
 	header.flags = 0;
 	header.cmdId = RDPGFX_CMDID_QOEFRAMEACKNOWLEDGE;
 	header.pduLength = RDPGFX_HEADER_SIZE + 12;
-
-	if (!context || !pdu)
-		return ERROR_BAD_ARGUMENTS;
-
-	gfx = (RDPGFX_PLUGIN*)context->handle;
-
-	if (!gfx)
-		return ERROR_BAD_CONFIGURATION;
-
-	callback = gfx->listener_callback->channel_callback;
-
-	if (!callback)
-		return ERROR_BAD_CONFIGURATION;
-
-	DEBUG_RDPGFX(gfx->log, "SendQoeFrameAcknowledgePdu: %" PRIu32 "", pdu->frameId);
+	WLog_Print(gfx->log, WLOG_DEBUG, "SendQoeFrameAcknowledgePdu: %" PRIu32 "", pdu->frameId);
 	s = Stream_New(NULL, header.pduLength);
 
 	if (!s)
@@ -417,75 +258,6 @@
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-static UINT rdpgfx_send_cache_import_offer_pdu(RdpgfxClientContext* context,
-                                               const RDPGFX_CACHE_IMPORT_OFFER_PDU* pdu)
-{
-	UINT16 index;
-	UINT error = CHANNEL_RC_OK;
-	wStream* s;
-	RDPGFX_PLUGIN* gfx;
-	RDPGFX_CHANNEL_CALLBACK* callback;
-	RDPGFX_HEADER header;
-	RDPGFX_CACHE_ENTRY_METADATA* cacheEntries;
-
-	if (!context || !pdu)
-		return ERROR_BAD_ARGUMENTS;
-
-	gfx = (RDPGFX_PLUGIN*)context->handle;
-
-	if (!gfx)
-		return ERROR_BAD_CONFIGURATION;
-
-	callback = gfx->listener_callback->channel_callback;
-
-	if (!callback)
-		return ERROR_BAD_CONFIGURATION;
-
-	header.flags = 0;
-	header.cmdId = RDPGFX_CMDID_CACHEIMPORTOFFER;
-	header.pduLength = RDPGFX_HEADER_SIZE + 2 + pdu->cacheEntriesCount * 12;
-	DEBUG_RDPGFX(gfx->log, "SendCacheImportOfferPdu: cacheEntriesCount: %" PRIu16 "",
-	             pdu->cacheEntriesCount);
-	s = Stream_New(NULL, header.pduLength);
-
-	if (!s)
-	{
-		WLog_ERR(TAG, "Stream_New failed!");
-		return CHANNEL_RC_NO_MEMORY;
-	}
-
-	if ((error = rdpgfx_write_header(s, &header)))
-		goto fail;
-
-	if (pdu->cacheEntriesCount <= 0)
-	{
-		WLog_ERR(TAG, "Invalid cacheEntriesCount: %" PRIu16 "", pdu->cacheEntriesCount);
-		error = ERROR_INVALID_DATA;
-		goto fail;
-	}
-
-	/* cacheEntriesCount (2 bytes) */
-	Stream_Write_UINT16(s, pdu->cacheEntriesCount);
-
-	for (index = 0; index < pdu->cacheEntriesCount; index++)
-	{
-		cacheEntries = &(pdu->cacheEntries[index]);
-		Stream_Write_UINT64(s, cacheEntries->cacheKey);     /* cacheKey (8 bytes) */
-		Stream_Write_UINT32(s, cacheEntries->bitmapLength); /* bitmapLength (4 bytes) */
-	}
-
-	error = callback->channel->Write(callback->channel, (UINT32)Stream_Length(s), Stream_Buffer(s),
-	                                 NULL);
-fail:
-	Stream_Free(s, TRUE);
-	return error;
-}
-
-/**
- * Function description
- *
- * @return 0 on success, otherwise a Win32 error code
- */
 static UINT rdpgfx_recv_reset_graphics_pdu(RDPGFX_CHANNEL_CALLBACK* callback, wStream* s)
 {
 	int pad;
@@ -541,17 +313,17 @@
 	}
 
 	Stream_Seek(s, pad); /* pad (total size is 340 bytes) */
-	DEBUG_RDPGFX(gfx->log,
-	             "RecvResetGraphicsPdu: width: %" PRIu32 " height: %" PRIu32 " count: %" PRIu32 "",
-	             pdu.width, pdu.height, pdu.monitorCount);
+	WLog_Print(gfx->log, WLOG_DEBUG,
+	           "RecvResetGraphicsPdu: width: %" PRIu32 " height: %" PRIu32 " count: %" PRIu32 "",
+	           pdu.width, pdu.height, pdu.monitorCount);
 
 	for (index = 0; index < pdu.monitorCount; index++)
 	{
 		monitor = &(pdu.monitorDefArray[index]);
-		DEBUG_RDPGFX(gfx->log,
-		             "RecvResetGraphicsPdu: monitor left:%" PRIi32 " top:%" PRIi32 " right:%" PRIi32
-		             " left:%" PRIi32 " flags:0x%" PRIx32 "",
-		             monitor->left, monitor->top, monitor->right, monitor->bottom, monitor->flags);
+		WLog_Print(gfx->log, WLOG_DEBUG,
+		           "RecvResetGraphicsPdu: monitor left:%" PRIi32 " top:%" PRIi32 " right:%" PRIi32
+		           " left:%" PRIi32 " flags:0x%" PRIx32 "",
+		           monitor->left, monitor->top, monitor->right, monitor->bottom, monitor->flags);
 	}
 
 	if (context)
@@ -564,7 +336,7 @@
 	}
 
 	/* some listeners may be interested (namely the display channel) */
-	EventArgsInit(&graphicsReset, "libfreerdp");
+	EventArgsInit(&graphicsReset, "xfreerdp");
 	graphicsReset.width = pdu.width;
 	graphicsReset.height = pdu.height;
 	PubSub_OnGraphicsReset(gfx->rdpcontext->pubSub, gfx->rdpcontext, &graphicsReset);
@@ -646,8 +418,8 @@
 		Stream_Read_UINT16(s, pdu.cacheSlots[index]); /* cacheSlot (2 bytes) */
 	}
 
-	DEBUG_RDPGFX(gfx->log, "RecvCacheImportReplyPdu: importedEntriesCount: %" PRIu16 "",
-	             pdu.importedEntriesCount);
+	WLog_Print(gfx->log, WLOG_DEBUG, "RecvCacheImportReplyPdu: importedEntriesCount: %" PRIu16 "",
+	           pdu.importedEntriesCount);
 
 	if (context)
 	{
@@ -684,10 +456,10 @@
 	Stream_Read_UINT16(s, pdu.width);      /* width (2 bytes) */
 	Stream_Read_UINT16(s, pdu.height);     /* height (2 bytes) */
 	Stream_Read_UINT8(s, pdu.pixelFormat); /* RDPGFX_PIXELFORMAT (1 byte) */
-	DEBUG_RDPGFX(gfx->log,
-	             "RecvCreateSurfacePdu: surfaceId: %" PRIu16 " width: %" PRIu16 " height: %" PRIu16
-	             " pixelFormat: 0x%02" PRIX8 "",
-	             pdu.surfaceId, pdu.width, pdu.height, pdu.pixelFormat);
+	WLog_Print(gfx->log, WLOG_DEBUG,
+	           "RecvCreateSurfacePdu: surfaceId: %" PRIu16 " width: %" PRIu16 " height: %" PRIu16
+	           " pixelFormat: 0x%02" PRIX8 "",
+	           pdu.surfaceId, pdu.width, pdu.height, pdu.pixelFormat);
 
 	if (context)
 	{
@@ -720,7 +492,7 @@
 	}
 
 	Stream_Read_UINT16(s, pdu.surfaceId); /* surfaceId (2 bytes) */
-	DEBUG_RDPGFX(gfx->log, "RecvDeleteSurfacePdu: surfaceId: %" PRIu16 "", pdu.surfaceId);
+	WLog_Print(gfx->log, WLOG_DEBUG, "RecvDeleteSurfacePdu: surfaceId: %" PRIu16 "", pdu.surfaceId);
 
 	if (context)
 	{
@@ -754,8 +526,9 @@
 
 	Stream_Read_UINT32(s, pdu.timestamp); /* timestamp (4 bytes) */
 	Stream_Read_UINT32(s, pdu.frameId);   /* frameId (4 bytes) */
-	DEBUG_RDPGFX(gfx->log, "RecvStartFramePdu: frameId: %" PRIu32 " timestamp: 0x%08" PRIX32 "",
-	             pdu.frameId, pdu.timestamp);
+	WLog_Print(gfx->log, WLOG_DEBUG,
+	           "RecvStartFramePdu: frameId: %" PRIu32 " timestamp: 0x%08" PRIX32 "", pdu.frameId,
+	           pdu.timestamp);
 	gfx->StartDecodingTime = GetTickCountPrecise();
 
 	if (context)
@@ -791,7 +564,7 @@
 	}
 
 	Stream_Read_UINT32(s, pdu.frameId); /* frameId (4 bytes) */
-	DEBUG_RDPGFX(gfx->log, "RecvEndFramePdu: frameId: %" PRIu32 "", pdu.frameId);
+	WLog_Print(gfx->log, WLOG_DEBUG, "RecvEndFramePdu: frameId: %" PRIu32 "", pdu.frameId);
 
 	if (context)
 	{
@@ -805,11 +578,8 @@
 		}
 	}
 
+	gfx->UnacknowledgedFrames--;
 	gfx->TotalDecodedFrames++;
-
-	if (!gfx->sendFrameAcks)
-		return error;
-
 	ack.frameId = pdu.frameId;
 	ack.totalFramesDecoded = gfx->TotalDecodedFrames;
 
@@ -818,7 +588,7 @@
 		ack.queueDepth = SUSPEND_FRAME_ACKNOWLEDGEMENT;
 
 		if (gfx->TotalDecodedFrames == 1)
-			if ((error = rdpgfx_send_frame_acknowledge_pdu(context, &ack)))
+			if ((error = rdpgfx_send_frame_acknowledge_pdu(callback, &ack)))
 				WLog_Print(gfx->log, WLOG_ERROR,
 				           "rdpgfx_send_frame_acknowledge_pdu failed with error %" PRIu32 "",
 				           error);
@@ -827,8 +597,8 @@
 	{
 		ack.queueDepth = QUEUE_DEPTH_UNAVAILABLE;
 
-		if ((error = rdpgfx_send_frame_acknowledge_pdu(context, &ack)))
-			WLog_Print(gfx->log, WLOG_ERROR,
+		if ((error = rdpgfx_send_frame_acknowledge_pdu(callback, &ack)))
+			WLog_Print(gfx->log, WLOG_DEBUG,
 			           "rdpgfx_send_frame_acknowledge_pdu failed with error %" PRIu32 "", error);
 	}
 
@@ -837,9 +607,6 @@
 	case RDPGFX_CAPVERSION_10:
 	case RDPGFX_CAPVERSION_102:
 	case RDPGFX_CAPVERSION_103:
-	case RDPGFX_CAPVERSION_104:
-	case RDPGFX_CAPVERSION_105:
-	case RDPGFX_CAPVERSION_106:
 		if (gfx->SendQoeAck)
 		{
 			RDPGFX_QOE_FRAME_ACKNOWLEDGE_PDU qoe;
@@ -853,9 +620,9 @@
 			qoe.timeDiffSE = diff;
 			qoe.timeDiffEDR = 1;
 
-			if ((error = rdpgfx_send_qoe_frame_acknowledge_pdu(context, &qoe)))
-				WLog_Print(gfx->log, WLOG_ERROR,
-				           "rdpgfx_send_qoe_frame_acknowledge_pdu failed with error %" PRIu32 "",
+			if ((error = rdpgfx_send_qoe_frame_acknowledge_pdu(callback, &qoe)))
+				WLog_Print(gfx->log, WLOG_DEBUG,
+				           "rdpgfx_send_frame_acknowledge_pdu failed with error %" PRIu32 "",
 				           error);
 		}
 
@@ -906,14 +673,14 @@
 
 	pdu.bitmapData = Stream_Pointer(s);
 	Stream_Seek(s, pdu.bitmapDataLength);
-	DEBUG_RDPGFX(gfx->log,
-	             "RecvWireToSurface1Pdu: surfaceId: %" PRIu16 " codecId: %s (0x%04" PRIX16
-	             ") pixelFormat: 0x%02" PRIX8 " "
-	             "destRect: left: %" PRIu16 " top: %" PRIu16 " right: %" PRIu16 " bottom: %" PRIu16
-	             " bitmapDataLength: %" PRIu32 "",
-	             pdu.surfaceId, rdpgfx_get_codec_id_string(pdu.codecId), pdu.codecId,
-	             pdu.pixelFormat, pdu.destRect.left, pdu.destRect.top, pdu.destRect.right,
-	             pdu.destRect.bottom, pdu.bitmapDataLength);
+	WLog_Print(gfx->log, WLOG_DEBUG,
+	           "RecvWireToSurface1Pdu: surfaceId: %" PRIu16 " codecId: %s (0x%04" PRIX16
+	           ") pixelFormat: 0x%02" PRIX8 " "
+	           "destRect: left: %" PRIu16 " top: %" PRIu16 " right: %" PRIu16 " bottom: %" PRIu16
+	           " bitmapDataLength: %" PRIu32 "",
+	           pdu.surfaceId, rdpgfx_get_codec_id_string(pdu.codecId), pdu.codecId, pdu.pixelFormat,
+	           pdu.destRect.left, pdu.destRect.top, pdu.destRect.right, pdu.destRect.bottom,
+	           pdu.bitmapDataLength);
 	cmd.surfaceId = pdu.surfaceId;
 	cmd.codecId = pdu.codecId;
 	cmd.contextId = 0;
@@ -974,30 +741,16 @@
 	Stream_Read_UINT32(s, pdu.bitmapDataLength); /* bitmapDataLength (4 bytes) */
 	pdu.bitmapData = Stream_Pointer(s);
 	Stream_Seek(s, pdu.bitmapDataLength);
-	DEBUG_RDPGFX(gfx->log,
-	             "RecvWireToSurface2Pdu: surfaceId: %" PRIu16 " codecId: %s (0x%04" PRIX16 ") "
-	             "codecContextId: %" PRIu32 " pixelFormat: 0x%02" PRIX8
-	             " bitmapDataLength: %" PRIu32 "",
-	             pdu.surfaceId, rdpgfx_get_codec_id_string(pdu.codecId), pdu.codecId,
-	             pdu.codecContextId, pdu.pixelFormat, pdu.bitmapDataLength);
+	WLog_Print(gfx->log, WLOG_DEBUG,
+	           "RecvWireToSurface2Pdu: surfaceId: %" PRIu16 " codecId: %s (0x%04" PRIX16 ") "
+	           "codecContextId: %" PRIu32 " pixelFormat: 0x%02" PRIX8 " bitmapDataLength: %" PRIu32
+	           "",
+	           pdu.surfaceId, rdpgfx_get_codec_id_string(pdu.codecId), pdu.codecId,
+	           pdu.codecContextId, pdu.pixelFormat, pdu.bitmapDataLength);
 	cmd.surfaceId = pdu.surfaceId;
 	cmd.codecId = pdu.codecId;
 	cmd.contextId = pdu.codecContextId;
-
-	switch (pdu.pixelFormat)
-	{
-	case GFX_PIXEL_FORMAT_XRGB_8888:
-		cmd.format = PIXEL_FORMAT_BGRX32;
-		break;
-
-	case GFX_PIXEL_FORMAT_ARGB_8888:
-		cmd.format = PIXEL_FORMAT_BGRA32;
-		break;
-
-	default:
-		return ERROR_INVALID_DATA;
-	}
-
+	cmd.format = pdu.pixelFormat;
 	cmd.left = 0;
 	cmd.top = 0;
 	cmd.right = 0;
@@ -1040,9 +793,9 @@
 
 	Stream_Read_UINT16(s, pdu.surfaceId);      /* surfaceId (2 bytes) */
 	Stream_Read_UINT32(s, pdu.codecContextId); /* codecContextId (4 bytes) */
-	DEBUG_RDPGFX(gfx->log,
-	             "RecvDeleteEncodingContextPdu: surfaceId: %" PRIu16 " codecContextId: %" PRIu32 "",
-	             pdu.surfaceId, pdu.codecContextId);
+	WLog_Print(gfx->log, WLOG_DEBUG,
+	           "RecvDeleteEncodingContextPdu: surfaceId: %" PRIu16 " codecContextId: %" PRIu32 "",
+	           pdu.surfaceId, pdu.codecContextId);
 
 	if (context)
 	{
@@ -1114,8 +867,9 @@
 		}
 	}
 
-	DEBUG_RDPGFX(gfx->log, "RecvSolidFillPdu: surfaceId: %" PRIu16 " fillRectCount: %" PRIu16 "",
-	             pdu.surfaceId, pdu.fillRectCount);
+	WLog_Print(gfx->log, WLOG_DEBUG,
+	           "RecvSolidFillPdu: surfaceId: %" PRIu16 " fillRectCount: %" PRIu16 "", pdu.surfaceId,
+	           pdu.fillRectCount);
 
 	if (context)
 	{
@@ -1189,12 +943,12 @@
 		}
 	}
 
-	DEBUG_RDPGFX(gfx->log,
-	             "RecvSurfaceToSurfacePdu: surfaceIdSrc: %" PRIu16 " surfaceIdDest: %" PRIu16 " "
-	             "left: %" PRIu16 " top: %" PRIu16 " right: %" PRIu16 " bottom: %" PRIu16
-	             " destPtsCount: %" PRIu16 "",
-	             pdu.surfaceIdSrc, pdu.surfaceIdDest, pdu.rectSrc.left, pdu.rectSrc.top,
-	             pdu.rectSrc.right, pdu.rectSrc.bottom, pdu.destPtsCount);
+	WLog_Print(gfx->log, WLOG_DEBUG,
+	           "RecvSurfaceToSurfacePdu: surfaceIdSrc: %" PRIu16 " surfaceIdDest: %" PRIu16 " "
+	           "left: %" PRIu16 " top: %" PRIu16 " right: %" PRIu16 " bottom: %" PRIu16
+	           " destPtsCount: %" PRIu16 "",
+	           pdu.surfaceIdSrc, pdu.surfaceIdDest, pdu.rectSrc.left, pdu.rectSrc.top,
+	           pdu.rectSrc.right, pdu.rectSrc.bottom, pdu.destPtsCount);
 
 	if (context)
 	{
@@ -1238,12 +992,12 @@
 		return error;
 	}
 
-	DEBUG_RDPGFX(gfx->log,
-	             "RecvSurfaceToCachePdu: surfaceId: %" PRIu16 " cacheKey: 0x%016" PRIX64
-	             " cacheSlot: %" PRIu16 " "
-	             "left: %" PRIu16 " top: %" PRIu16 " right: %" PRIu16 " bottom: %" PRIu16 "",
-	             pdu.surfaceId, pdu.cacheKey, pdu.cacheSlot, pdu.rectSrc.left, pdu.rectSrc.top,
-	             pdu.rectSrc.right, pdu.rectSrc.bottom);
+	WLog_Print(gfx->log, WLOG_DEBUG,
+	           "RecvSurfaceToCachePdu: surfaceId: %" PRIu16 " cacheKey: 0x%016" PRIX64
+	           " cacheSlot: %" PRIu16 " "
+	           "left: %" PRIu16 " top: %" PRIu16 " right: %" PRIu16 " bottom: %" PRIu16 "",
+	           pdu.surfaceId, pdu.cacheKey, pdu.cacheSlot, pdu.rectSrc.left, pdu.rectSrc.top,
+	           pdu.rectSrc.right, pdu.rectSrc.bottom);
 
 	if (context)
 	{
@@ -1308,10 +1062,10 @@
 		}
 	}
 
-	DEBUG_RDPGFX(gfx->log,
-	             "RdpGfxRecvCacheToSurfacePdu: cacheSlot: %" PRIu16 " surfaceId: %" PRIu16
-	             " destPtsCount: %" PRIu16 "",
-	             pdu.cacheSlot, pdu.surfaceId, pdu.destPtsCount);
+	WLog_Print(gfx->log, WLOG_DEBUG,
+	           "RdpGfxRecvCacheToSurfacePdu: cacheSlot: %" PRIu16 " surfaceId: %" PRIu16
+	           " destPtsCount: %" PRIu16 "",
+	           pdu.cacheSlot, pdu.surfaceId, pdu.destPtsCount);
 
 	if (context)
 	{
@@ -1348,10 +1102,10 @@
 	Stream_Read_UINT16(s, pdu.reserved);      /* reserved (2 bytes) */
 	Stream_Read_UINT32(s, pdu.outputOriginX); /* outputOriginX (4 bytes) */
 	Stream_Read_UINT32(s, pdu.outputOriginY); /* outputOriginY (4 bytes) */
-	DEBUG_RDPGFX(gfx->log,
-	             "RecvMapSurfaceToOutputPdu: surfaceId: %" PRIu16 " outputOriginX: %" PRIu32
-	             " outputOriginY: %" PRIu32 "",
-	             pdu.surfaceId, pdu.outputOriginX, pdu.outputOriginY);
+	WLog_Print(gfx->log, WLOG_DEBUG,
+	           "RecvMapSurfaceToOutputPdu: surfaceId: %" PRIu16 " outputOriginX: %" PRIu32
+	           " outputOriginY: %" PRIu32 "",
+	           pdu.surfaceId, pdu.outputOriginX, pdu.outputOriginY);
 
 	if (context)
 	{
@@ -1365,44 +1119,6 @@
 	return error;
 }
 
-static UINT rdpgfx_recv_map_surface_to_scaled_output_pdu(RDPGFX_CHANNEL_CALLBACK* callback,
-                                                         wStream* s)
-{
-	RDPGFX_MAP_SURFACE_TO_SCALED_OUTPUT_PDU pdu;
-	RDPGFX_PLUGIN* gfx = (RDPGFX_PLUGIN*)callback->plugin;
-	RdpgfxClientContext* context = (RdpgfxClientContext*)gfx->iface.pInterface;
-	UINT error = CHANNEL_RC_OK;
-
-	if (Stream_GetRemainingLength(s) < 20)
-	{
-		WLog_Print(gfx->log, WLOG_ERROR, "not enough data!");
-		return ERROR_INVALID_DATA;
-	}
-
-	Stream_Read_UINT16(s, pdu.surfaceId);     /* surfaceId (2 bytes) */
-	Stream_Read_UINT16(s, pdu.reserved);      /* reserved (2 bytes) */
-	Stream_Read_UINT32(s, pdu.outputOriginX); /* outputOriginX (4 bytes) */
-	Stream_Read_UINT32(s, pdu.outputOriginY); /* outputOriginY (4 bytes) */
-	Stream_Read_UINT32(s, pdu.targetWidth);   /* targetWidth (4 bytes) */
-	Stream_Read_UINT32(s, pdu.targetHeight);  /* targetHeight (4 bytes) */
-	DEBUG_RDPGFX(gfx->log,
-	             "RecvMapSurfaceToScaledOutputPdu: surfaceId: %" PRIu16 " outputOriginX: %" PRIu32
-	             " outputOriginY: %" PRIu32 " targetWidth: %" PRIu32 " targetHeight: %" PRIu32,
-	             pdu.surfaceId, pdu.outputOriginX, pdu.outputOriginY, pdu.targetWidth,
-	             pdu.targetHeight);
-
-	if (context)
-	{
-		IFCALLRET(context->MapSurfaceToScaledOutput, error, context, &pdu);
-
-		if (error)
-			WLog_Print(gfx->log, WLOG_ERROR,
-			           "context->MapSurfaceToScaledOutput failed with error %" PRIu32 "", error);
-	}
-
-	return error;
-}
-
 /**
  * Function description
  *
@@ -1425,10 +1141,10 @@
 	Stream_Read_UINT64(s, pdu.windowId);     /* windowId (8 bytes) */
 	Stream_Read_UINT32(s, pdu.mappedWidth);  /* mappedWidth (4 bytes) */
 	Stream_Read_UINT32(s, pdu.mappedHeight); /* mappedHeight (4 bytes) */
-	DEBUG_RDPGFX(gfx->log,
-	             "RecvMapSurfaceToWindowPdu: surfaceId: %" PRIu16 " windowId: 0x%016" PRIX64
-	             " mappedWidth: %" PRIu32 " mappedHeight: %" PRIu32 "",
-	             pdu.surfaceId, pdu.windowId, pdu.mappedWidth, pdu.mappedHeight);
+	WLog_Print(gfx->log, WLOG_DEBUG,
+	           "RecvMapSurfaceToWindowPdu: surfaceId: %" PRIu16 " windowId: 0x%016" PRIX64
+	           " mappedWidth: %" PRIu32 " mappedHeight: %" PRIu32 "",
+	           pdu.surfaceId, pdu.windowId, pdu.mappedWidth, pdu.mappedHeight);
 
 	if (context && context->MapSurfaceToWindow)
 	{
@@ -1442,45 +1158,6 @@
 	return error;
 }
 
-static UINT rdpgfx_recv_map_surface_to_scaled_window_pdu(RDPGFX_CHANNEL_CALLBACK* callback,
-                                                         wStream* s)
-{
-	RDPGFX_MAP_SURFACE_TO_SCALED_WINDOW_PDU pdu;
-	RDPGFX_PLUGIN* gfx = (RDPGFX_PLUGIN*)callback->plugin;
-	RdpgfxClientContext* context = (RdpgfxClientContext*)gfx->iface.pInterface;
-	UINT error = CHANNEL_RC_OK;
-
-	if (Stream_GetRemainingLength(s) < 26)
-	{
-		WLog_Print(gfx->log, WLOG_ERROR, "not enough data!");
-		return ERROR_INVALID_DATA;
-	}
-
-	Stream_Read_UINT16(s, pdu.surfaceId);    /* surfaceId (2 bytes) */
-	Stream_Read_UINT64(s, pdu.windowId);     /* windowId (8 bytes) */
-	Stream_Read_UINT32(s, pdu.mappedWidth);  /* mappedWidth (4 bytes) */
-	Stream_Read_UINT32(s, pdu.mappedHeight); /* mappedHeight (4 bytes) */
-	Stream_Read_UINT32(s, pdu.targetWidth);  /* targetWidth (4 bytes) */
-	Stream_Read_UINT32(s, pdu.targetHeight); /* targetHeight (4 bytes) */
-	DEBUG_RDPGFX(gfx->log,
-	             "RecvMapSurfaceToScaledWindowPdu: surfaceId: %" PRIu16 " windowId: 0x%016" PRIX64
-	             " mappedWidth: %" PRIu32 " mappedHeight: %" PRIu32 " targetWidth: %" PRIu32
-	             " targetHeight: %" PRIu32 "",
-	             pdu.surfaceId, pdu.windowId, pdu.mappedWidth, pdu.mappedHeight, pdu.targetWidth,
-	             pdu.targetHeight);
-
-	if (context && context->MapSurfaceToScaledWindow)
-	{
-		IFCALLRET(context->MapSurfaceToScaledWindow, error, context, &pdu);
-
-		if (error)
-			WLog_Print(gfx->log, WLOG_ERROR,
-			           "context->MapSurfaceToScaledWindow failed with error %" PRIu32 "", error);
-	}
-
-	return error;
-}
-
 /**
  * Function description
  *
@@ -1501,9 +1178,10 @@
 		return error;
 	}
 
-	DEBUG_RDPGFX(
-	    gfx->log, "cmdId: %s (0x%04" PRIX16 ") flags: 0x%04" PRIX16 " pduLength: %" PRIu32 "",
-	    rdpgfx_get_cmd_id_string(header.cmdId), header.cmdId, header.flags, header.pduLength);
+	WLog_Print(gfx->log, WLOG_DEBUG,
+	           "cmdId: %s (0x%04" PRIX16 ") flags: 0x%04" PRIX16 " pduLength: %" PRIu32 "",
+	           rdpgfx_get_cmd_id_string(header.cmdId), header.cmdId, header.flags,
+	           header.pduLength);
 
 	switch (header.cmdId)
 	{
@@ -1629,24 +1307,6 @@
 
 		break;
 
-	case RDPGFX_CMDID_MAPSURFACETOSCALEDWINDOW:
-		if ((error = rdpgfx_recv_map_surface_to_scaled_window_pdu(callback, s)))
-			WLog_Print(gfx->log, WLOG_ERROR,
-			           "rdpgfx_recv_map_surface_to_scaled_window_pdu failed with error %" PRIu32
-			           "!",
-			           error);
-
-		break;
-
-	case RDPGFX_CMDID_MAPSURFACETOSCALEDOUTPUT:
-		if ((error = rdpgfx_recv_map_surface_to_scaled_output_pdu(callback, s)))
-			WLog_Print(gfx->log, WLOG_ERROR,
-			           "rdpgfx_recv_map_surface_to_scaled_output_pdu failed with error %" PRIu32
-			           "!",
-			           error);
-
-		break;
-
 	default:
 		error = CHANNEL_RC_BAD_PROC;
 		break;
@@ -1725,25 +1385,8 @@
 static UINT rdpgfx_on_open(IWTSVirtualChannelCallback* pChannelCallback)
 {
 	RDPGFX_CHANNEL_CALLBACK* callback = (RDPGFX_CHANNEL_CALLBACK*)pChannelCallback;
-	RDPGFX_PLUGIN* gfx = (RDPGFX_PLUGIN*)callback->plugin;
-	RdpgfxClientContext* context = (RdpgfxClientContext*)gfx->iface.pInterface;
-	UINT error = CHANNEL_RC_OK;
-	BOOL do_caps_advertise = TRUE;
-	gfx->sendFrameAcks = TRUE;
-
-	if (context)
-	{
-		IFCALLRET(context->OnOpen, error, context, &do_caps_advertise, &gfx->sendFrameAcks);
-
-		if (error)
-			WLog_Print(gfx->log, WLOG_ERROR, "context->OnOpen failed with error %" PRIu32 "",
-			           error);
-	}
-
-	if (do_caps_advertise)
-		error = rdpgfx_send_supported_caps(callback);
-
-	return error;
+	WLog_DBG(TAG, "OnOpen");
+	return rdpgfx_send_caps_advertise_pdu(callback);
 }
 
 /**
@@ -1759,7 +1402,7 @@
 	RDPGFX_CHANNEL_CALLBACK* callback = (RDPGFX_CHANNEL_CALLBACK*)pChannelCallback;
 	RDPGFX_PLUGIN* gfx = (RDPGFX_PLUGIN*)callback->plugin;
 	RdpgfxClientContext* context = (RdpgfxClientContext*)gfx->iface.pInterface;
-	DEBUG_RDPGFX(gfx->log, "OnClose");
+	WLog_Print(gfx->log, WLOG_DEBUG, "OnClose");
 	free(callback);
 	gfx->UnacknowledgedFrames = 0;
 	gfx->TotalDecodedFrames = 0;
@@ -1804,11 +1447,6 @@
 		}
 	}
 
-	if (context)
-	{
-		IFCALL(context->OnClose, context);
-	}
-
 	return CHANNEL_RC_OK;
 }
 
@@ -1867,7 +1505,7 @@
 	                                    (IWTSListenerCallback*)gfx->listener_callback,
 	                                    &(gfx->listener));
 	gfx->listener->pInterface = gfx->iface.pInterface;
-	DEBUG_RDPGFX(gfx->log, "Initialize");
+	WLog_Print(gfx->log, WLOG_DEBUG, "Initialize");
 	return error;
 }
 
@@ -1884,7 +1522,7 @@
 	RDPGFX_PLUGIN* gfx = (RDPGFX_PLUGIN*)pPlugin;
 	RdpgfxClientContext* context = (RdpgfxClientContext*)gfx->iface.pInterface;
 	UINT error = CHANNEL_RC_OK;
-	DEBUG_RDPGFX(gfx->log, "Terminated");
+	WLog_Print(gfx->log, WLOG_DEBUG, "Terminated");
 
 	if (gfx->listener_callback)
 	{
@@ -2119,7 +1757,6 @@
 		gfx->H264 = gfx->settings->GfxH264;
 		gfx->AVC444 = gfx->settings->GfxAVC444;
 		gfx->SendQoeAck = gfx->settings->GfxSendQoeAck;
-		gfx->capsFilter = gfx->settings->GfxCapsFilter;
 
 		if (gfx->H264)
 			gfx->SmallCache = TRUE;
@@ -2140,10 +1777,6 @@
 		context->GetSurfaceData = rdpgfx_get_surface_data;
 		context->SetCacheSlotData = rdpgfx_set_cache_slot_data;
 		context->GetCacheSlotData = rdpgfx_get_cache_slot_data;
-		context->CapsAdvertise = rdpgfx_send_caps_advertise_pdu;
-		context->FrameAcknowledge = rdpgfx_send_frame_acknowledge_pdu;
-		context->CacheImportOffer = rdpgfx_send_cache_import_offer_pdu;
-		context->QoeFrameAcknowledge = rdpgfx_send_qoe_frame_acknowledge_pdu;
 		gfx->iface.pInterface = (void*)context;
 		gfx->zgfx = zgfx_context_new(FALSE);
 
diff -urN channels/rdpgfx/client/rdpgfx_main.h ../../informatimago/FreeRDP/channels/rdpgfx/client/rdpgfx_main.h
--- channels/rdpgfx/client/rdpgfx_main.h	2019-07-25 19:50:58.697886692 +0300
+++ ../../informatimago/FreeRDP/channels/rdpgfx/client/rdpgfx_main.h	2019-07-25 20:11:22.747956799 +0300
@@ -67,14 +67,12 @@
 	BOOL ProgressiveV2;
 	BOOL H264;
 	BOOL AVC444;
-	UINT32 capsFilter;
 
 	ZGFX_CONTEXT* zgfx;
 	UINT32 UnacknowledgedFrames;
 	UINT32 TotalDecodedFrames;
 	UINT32 StartDecodingTime;
 	BOOL suspendFrameAcks;
-	BOOL sendFrameAcks;
 
 	wHashTable* SurfaceTable;
 
diff -urN channels/rdpgfx/rdpgfx_common.c ../../informatimago/FreeRDP/channels/rdpgfx/rdpgfx_common.c
--- channels/rdpgfx/rdpgfx_common.c	2019-07-25 19:50:58.701886712 +0300
+++ ../../informatimago/FreeRDP/channels/rdpgfx/rdpgfx_common.c	2019-07-25 20:11:22.751956819 +0300
@@ -31,35 +31,24 @@
 
 #include "rdpgfx_common.h"
 
-static const char* RDPGFX_CMDID_STRINGS[] = { "RDPGFX_CMDID_UNUSED_0000",
-	                                          "RDPGFX_CMDID_WIRETOSURFACE_1",
-	                                          "RDPGFX_CMDID_WIRETOSURFACE_2",
-	                                          "RDPGFX_CMDID_DELETEENCODINGCONTEXT",
-	                                          "RDPGFX_CMDID_SOLIDFILL",
-	                                          "RDPGFX_CMDID_SURFACETOSURFACE",
-	                                          "RDPGFX_CMDID_SURFACETOCACHE",
-	                                          "RDPGFX_CMDID_CACHETOSURFACE",
-	                                          "RDPGFX_CMDID_EVICTCACHEENTRY",
-	                                          "RDPGFX_CMDID_CREATESURFACE",
-	                                          "RDPGFX_CMDID_DELETESURFACE",
-	                                          "RDPGFX_CMDID_STARTFRAME",
-	                                          "RDPGFX_CMDID_ENDFRAME",
-	                                          "RDPGFX_CMDID_FRAMEACKNOWLEDGE",
-	                                          "RDPGFX_CMDID_RESETGRAPHICS",
-	                                          "RDPGFX_CMDID_MAPSURFACETOOUTPUT",
-	                                          "RDPGFX_CMDID_CACHEIMPORTOFFER",
-	                                          "RDPGFX_CMDID_CACHEIMPORTREPLY",
-	                                          "RDPGFX_CMDID_CAPSADVERTISE",
-	                                          "RDPGFX_CMDID_CAPSCONFIRM",
-	                                          "RDPGFX_CMDID_UNUSED_0014",
-	                                          "RDPGFX_CMDID_MAPSURFACETOWINDOW",
-	                                          "RDPGFX_CMDID_QOEFRAMEACKNOWLEDGE",
-	                                          "RDPGFX_CMDID_MAPSURFACETOSCALEDOUTPUT",
-	                                          "RDPGFX_CMDID_MAPSURFACETOSCALEDWINDOW" };
+static const char* RDPGFX_CMDID_STRINGS[] = {
+	"RDPGFX_CMDID_UNUSED_0000",        "RDPGFX_CMDID_WIRETOSURFACE_1",
+	"RDPGFX_CMDID_WIRETOSURFACE_2",    "RDPGFX_CMDID_DELETEENCODINGCONTEXT",
+	"RDPGFX_CMDID_SOLIDFILL",          "RDPGFX_CMDID_SURFACETOSURFACE",
+	"RDPGFX_CMDID_SURFACETOCACHE",     "RDPGFX_CMDID_CACHETOSURFACE",
+	"RDPGFX_CMDID_EVICTCACHEENTRY",    "RDPGFX_CMDID_CREATESURFACE",
+	"RDPGFX_CMDID_DELETESURFACE",      "RDPGFX_CMDID_STARTFRAME",
+	"RDPGFX_CMDID_ENDFRAME",           "RDPGFX_CMDID_FRAMEACKNOWLEDGE",
+	"RDPGFX_CMDID_RESETGRAPHICS",      "RDPGFX_CMDID_MAPSURFACETOOUTPUT",
+	"RDPGFX_CMDID_CACHEIMPORTOFFER",   "RDPGFX_CMDID_CACHEIMPORTREPLY",
+	"RDPGFX_CMDID_CAPSADVERTISE",      "RDPGFX_CMDID_CAPSCONFIRM",
+	"RDPGFX_CMDID_UNUSED_0014",        "RDPGFX_CMDID_MAPSURFACETOWINDOW",
+	"RDPGFX_CMDID_QOEFRAMEACKNOWLEDGE"
+};
 
 const char* rdpgfx_get_cmd_id_string(UINT16 cmdId)
 {
-	if (cmdId <= RDPGFX_CMDID_MAPSURFACETOSCALEDWINDOW)
+	if (cmdId <= RDPGFX_CMDID_MAPSURFACETOWINDOW)
 		return RDPGFX_CMDID_STRINGS[cmdId];
 	else
 		return "RDPGFX_CMDID_UNKNOWN";
@@ -127,7 +116,7 @@
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-UINT rdpgfx_write_header(wStream* s, const RDPGFX_HEADER* header)
+UINT rdpgfx_write_header(wStream* s, RDPGFX_HEADER* header)
 {
 	Stream_Write_UINT16(s, header->cmdId);     /* cmdId (2 bytes) */
 	Stream_Write_UINT16(s, header->flags);     /* flags (2 bytes) */
@@ -158,7 +147,7 @@
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-UINT rdpgfx_write_point16(wStream* s, const RDPGFX_POINT16* point16)
+UINT rdpgfx_write_point16(wStream* s, RDPGFX_POINT16* point16)
 {
 	Stream_Write_UINT16(s, point16->x); /* x (2 bytes) */
 	Stream_Write_UINT16(s, point16->y); /* y (2 bytes) */
@@ -190,7 +179,7 @@
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-UINT rdpgfx_write_rect16(wStream* s, const RECTANGLE_16* rect16)
+UINT rdpgfx_write_rect16(wStream* s, RECTANGLE_16* rect16)
 {
 	Stream_Write_UINT16(s, rect16->left);   /* left (2 bytes) */
 	Stream_Write_UINT16(s, rect16->top);    /* top (2 bytes) */
@@ -224,7 +213,7 @@
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-UINT rdpgfx_write_color32(wStream* s, const RDPGFX_COLOR32* color32)
+UINT rdpgfx_write_color32(wStream* s, RDPGFX_COLOR32* color32)
 {
 	Stream_Write_UINT8(s, color32->B);  /* B (1 byte) */
 	Stream_Write_UINT8(s, color32->G);  /* G (1 byte) */
diff -urN channels/rdpgfx/rdpgfx_common.h ../../informatimago/FreeRDP/channels/rdpgfx/rdpgfx_common.h
--- channels/rdpgfx/rdpgfx_common.h	2019-07-25 19:50:58.701886712 +0300
+++ ../../informatimago/FreeRDP/channels/rdpgfx/rdpgfx_common.h	2019-07-25 20:11:22.755956838 +0300
@@ -32,24 +32,15 @@
 FREERDP_LOCAL const char* rdpgfx_get_codec_id_string(UINT16 codecId);
 
 FREERDP_LOCAL UINT rdpgfx_read_header(wStream* s, RDPGFX_HEADER* header);
-FREERDP_LOCAL UINT rdpgfx_write_header(wStream* s, const RDPGFX_HEADER* header);
+FREERDP_LOCAL UINT rdpgfx_write_header(wStream* s, RDPGFX_HEADER* header);
 
 FREERDP_LOCAL UINT rdpgfx_read_point16(wStream* s, RDPGFX_POINT16* pt16);
-FREERDP_LOCAL UINT rdpgfx_write_point16(wStream* s, const RDPGFX_POINT16* point16);
+FREERDP_LOCAL UINT rdpgfx_write_point16(wStream* s, RDPGFX_POINT16* point16);
 
 FREERDP_LOCAL UINT rdpgfx_read_rect16(wStream* s, RECTANGLE_16* rect16);
-FREERDP_LOCAL UINT rdpgfx_write_rect16(wStream* s, const RECTANGLE_16* rect16);
+FREERDP_LOCAL UINT rdpgfx_write_rect16(wStream* s, RECTANGLE_16* rect16);
 
 FREERDP_LOCAL UINT rdpgfx_read_color32(wStream* s, RDPGFX_COLOR32* color32);
-FREERDP_LOCAL UINT rdpgfx_write_color32(wStream* s, const RDPGFX_COLOR32* color32);
-
-#ifdef WITH_DEBUG_RDPGFX
-#	define DEBUG_RDPGFX(_LOGGER, ...) WLog_Print(_LOGGER, WLOG_DEBUG, __VA_ARGS__)
-#else
-#	define DEBUG_RDPGFX(_LOGGER, ...) \
-		do                             \
-		{                              \
-		} while (0)
-#endif
+FREERDP_LOCAL UINT rdpgfx_write_color32(wStream* s, RDPGFX_COLOR32* color32);
 
 #endif /* FREERDP_CHANNEL_RDPGFX_COMMON_H */
diff -urN channels/rdpgfx/server/rdpgfx_main.c ../../informatimago/FreeRDP/channels/rdpgfx/server/rdpgfx_main.c
--- channels/rdpgfx/server/rdpgfx_main.c	2019-07-25 19:50:58.721886810 +0300
+++ ../../informatimago/FreeRDP/channels/rdpgfx/server/rdpgfx_main.c	2019-07-25 20:11:22.775956937 +0300
@@ -194,11 +194,10 @@
  * @return 0 on success, otherwise a Win32 error code
  */
 static UINT rdpgfx_send_caps_confirm_pdu(RdpgfxServerContext* context,
-                                         const RDPGFX_CAPS_CONFIRM_PDU* capsConfirm)
+                                         RDPGFX_CAPS_CONFIRM_PDU* capsConfirm)
 {
 	RDPGFX_CAPSET* capsSet = capsConfirm->capsSet;
-	wStream* s = rdpgfx_server_single_packet_new(RDPGFX_CMDID_CAPSCONFIRM,
-	                                             RDPGFX_CAPSET_BASE_SIZE + capsSet->length);
+	wStream* s = rdpgfx_server_single_packet_new(RDPGFX_CMDID_CAPSCONFIRM, RDPGFX_CAPSET_SIZE);
 
 	if (!s)
 	{
@@ -207,16 +206,8 @@
 	}
 
 	Stream_Write_UINT32(s, capsSet->version); /* version (4 bytes) */
-	Stream_Write_UINT32(s, capsSet->length);  /* capsDataLength (4 bytes) */
-
-	if (capsSet->length >= 4)
-	{
-		Stream_Write_UINT32(s, capsSet->flags); /* capsData (4 bytes) */
-		Stream_Zero(s, capsSet->length - 4);
-	}
-	else
-		Stream_Zero(s, capsSet->length);
-
+	Stream_Write_UINT32(s, 4);                /* capsDataLength (4 bytes) */
+	Stream_Write_UINT32(s, capsSet->flags);   /* capsData (4 bytes) */
 	return rdpgfx_server_single_packet_send(context, s);
 }
 
@@ -226,7 +217,7 @@
  * @return 0 on success, otherwise a Win32 error code
  */
 static UINT rdpgfx_send_reset_graphics_pdu(RdpgfxServerContext* context,
-                                           const RDPGFX_RESET_GRAPHICS_PDU* pdu)
+                                           RDPGFX_RESET_GRAPHICS_PDU* pdu)
 {
 	UINT32 index;
 	MONITOR_DEF* monitor;
@@ -274,7 +265,7 @@
  * @return 0 on success, otherwise a Win32 error code
  */
 static UINT rdpgfx_send_evict_cache_entry_pdu(RdpgfxServerContext* context,
-                                              const RDPGFX_EVICT_CACHE_ENTRY_PDU* pdu)
+                                              RDPGFX_EVICT_CACHE_ENTRY_PDU* pdu)
 {
 	wStream* s = rdpgfx_server_single_packet_new(RDPGFX_CMDID_EVICTCACHEENTRY, 2);
 
@@ -294,7 +285,7 @@
  * @return 0 on success, otherwise a Win32 error code
  */
 static UINT rdpgfx_send_cache_import_reply_pdu(RdpgfxServerContext* context,
-                                               const RDPGFX_CACHE_IMPORT_REPLY_PDU* pdu)
+                                               RDPGFX_CACHE_IMPORT_REPLY_PDU* pdu)
 {
 	UINT16 index;
 	wStream* s = rdpgfx_server_single_packet_new(RDPGFX_CMDID_CACHEIMPORTREPLY,
@@ -323,7 +314,7 @@
  * @return 0 on success, otherwise a Win32 error code
  */
 static UINT rdpgfx_send_create_surface_pdu(RdpgfxServerContext* context,
-                                           const RDPGFX_CREATE_SURFACE_PDU* pdu)
+                                           RDPGFX_CREATE_SURFACE_PDU* pdu)
 {
 	wStream* s = rdpgfx_server_single_packet_new(RDPGFX_CMDID_CREATESURFACE, 7);
 
@@ -346,7 +337,7 @@
  * @return 0 on success, otherwise a Win32 error code
  */
 static UINT rdpgfx_send_delete_surface_pdu(RdpgfxServerContext* context,
-                                           const RDPGFX_DELETE_SURFACE_PDU* pdu)
+                                           RDPGFX_DELETE_SURFACE_PDU* pdu)
 {
 	wStream* s = rdpgfx_server_single_packet_new(RDPGFX_CMDID_DELETESURFACE, 2);
 
@@ -360,13 +351,13 @@
 	return rdpgfx_server_single_packet_send(context, s);
 }
 
-static INLINE void rdpgfx_write_start_frame_pdu(wStream* s, const RDPGFX_START_FRAME_PDU* pdu)
+static INLINE void rdpgfx_write_start_frame_pdu(wStream* s, RDPGFX_START_FRAME_PDU* pdu)
 {
 	Stream_Write_UINT32(s, pdu->timestamp); /* timestamp (4 bytes) */
 	Stream_Write_UINT32(s, pdu->frameId);   /* frameId (4 bytes) */
 }
 
-static INLINE void rdpgfx_write_end_frame_pdu(wStream* s, const RDPGFX_END_FRAME_PDU* pdu)
+static INLINE void rdpgfx_write_end_frame_pdu(wStream* s, RDPGFX_END_FRAME_PDU* pdu)
 {
 	Stream_Write_UINT32(s, pdu->frameId); /* frameId (4 bytes) */
 }
@@ -376,8 +367,7 @@
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-static UINT rdpgfx_send_start_frame_pdu(RdpgfxServerContext* context,
-                                        const RDPGFX_START_FRAME_PDU* pdu)
+static UINT rdpgfx_send_start_frame_pdu(RdpgfxServerContext* context, RDPGFX_START_FRAME_PDU* pdu)
 {
 	wStream* s =
 	    rdpgfx_server_single_packet_new(RDPGFX_CMDID_STARTFRAME, RDPGFX_START_FRAME_PDU_SIZE);
@@ -397,7 +387,7 @@
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-static UINT rdpgfx_send_end_frame_pdu(RdpgfxServerContext* context, const RDPGFX_END_FRAME_PDU* pdu)
+static UINT rdpgfx_send_end_frame_pdu(RdpgfxServerContext* context, RDPGFX_END_FRAME_PDU* pdu)
 {
 	wStream* s = rdpgfx_server_single_packet_new(RDPGFX_CMDID_ENDFRAME, RDPGFX_END_FRAME_PDU_SIZE);
 
@@ -417,7 +407,7 @@
  *
  * @return estimated size
  */
-static INLINE UINT32 rdpgfx_estimate_h264_avc420(const RDPGFX_AVC420_BITMAP_STREAM* havc420)
+static INLINE UINT32 rdpgfx_estimate_h264_avc420(RDPGFX_AVC420_BITMAP_STREAM* havc420)
 {
 	/* H264 metadata + H264 stream. See rdpgfx_write_h264_avc420 */
 	return sizeof(UINT32) /* numRegionRects */
@@ -432,7 +422,7 @@
  *
  * @return estimated size
  */
-static INLINE UINT32 rdpgfx_estimate_surface_command(const RDPGFX_SURFACE_COMMAND* cmd)
+static INLINE UINT32 rdpgfx_estimate_surface_command(RDPGFX_SURFACE_COMMAND* cmd)
 {
 	RDPGFX_AVC420_BITMAP_STREAM* havc420 = NULL;
 	RDPGFX_AVC444_BITMAP_STREAM* havc444 = NULL;
@@ -478,7 +468,7 @@
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-static INLINE UINT16 rdpgfx_surface_command_cmdid(const RDPGFX_SURFACE_COMMAND* cmd)
+static INLINE UINT16 rdpgfx_surface_command_cmdid(RDPGFX_SURFACE_COMMAND* cmd)
 {
 	if (cmd->codecId == RDPGFX_CODECID_CAPROGRESSIVE ||
 	    cmd->codecId == RDPGFX_CODECID_CAPROGRESSIVE_V2)
@@ -494,7 +484,7 @@
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-static UINT rdpgfx_write_h264_metablock(wStream* s, const RDPGFX_H264_METABLOCK* meta)
+static UINT rdpgfx_write_h264_metablock(wStream* s, RDPGFX_H264_METABLOCK* meta)
 {
 	UINT32 index;
 	RECTANGLE_16* regionRect;
@@ -559,7 +549,7 @@
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-static UINT rdpgfx_write_surface_command(wStream* s, const RDPGFX_SURFACE_COMMAND* cmd)
+static UINT rdpgfx_write_surface_command(wStream* s, RDPGFX_SURFACE_COMMAND* cmd)
 {
 	UINT error = CHANNEL_RC_OK;
 	RDPGFX_AVC420_BITMAP_STREAM* havc420 = NULL;
@@ -668,8 +658,7 @@
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-static UINT rdpgfx_send_surface_command(RdpgfxServerContext* context,
-                                        const RDPGFX_SURFACE_COMMAND* cmd)
+static UINT rdpgfx_send_surface_command(RdpgfxServerContext* context, RDPGFX_SURFACE_COMMAND* cmd)
 {
 	UINT error = CHANNEL_RC_OK;
 	wStream* s;
@@ -705,9 +694,9 @@
  * @return 0 on success, otherwise a Win32 error code
  */
 static UINT rdpgfx_send_surface_frame_command(RdpgfxServerContext* context,
-                                              const RDPGFX_SURFACE_COMMAND* cmd,
-                                              const RDPGFX_START_FRAME_PDU* startFrame,
-                                              const RDPGFX_END_FRAME_PDU* endFrame)
+                                              RDPGFX_SURFACE_COMMAND* cmd,
+                                              RDPGFX_START_FRAME_PDU* startFrame,
+                                              RDPGFX_END_FRAME_PDU* endFrame)
 
 {
 	UINT error = CHANNEL_RC_OK;
@@ -798,7 +787,7 @@
  * @return 0 on success, otherwise a Win32 error code
  */
 static UINT rdpgfx_send_delete_encoding_context_pdu(RdpgfxServerContext* context,
-                                                    const RDPGFX_DELETE_ENCODING_CONTEXT_PDU* pdu)
+                                                    RDPGFX_DELETE_ENCODING_CONTEXT_PDU* pdu)
 {
 	wStream* s = rdpgfx_server_single_packet_new(RDPGFX_CMDID_DELETEENCODINGCONTEXT, 6);
 
@@ -818,8 +807,7 @@
  *
  * @return 0 on success, otherwise a Win32 error code
  */
-static UINT rdpgfx_send_solid_fill_pdu(RdpgfxServerContext* context,
-                                       const RDPGFX_SOLID_FILL_PDU* pdu)
+static UINT rdpgfx_send_solid_fill_pdu(RdpgfxServerContext* context, RDPGFX_SOLID_FILL_PDU* pdu)
 {
 	UINT error = CHANNEL_RC_OK;
 	UINT16 index;
@@ -867,7 +855,7 @@
  * @return 0 on success, otherwise a Win32 error code
  */
 static UINT rdpgfx_send_surface_to_surface_pdu(RdpgfxServerContext* context,
-                                               const RDPGFX_SURFACE_TO_SURFACE_PDU* pdu)
+                                               RDPGFX_SURFACE_TO_SURFACE_PDU* pdu)
 {
 	UINT error = CHANNEL_RC_OK;
 	UINT16 index;
@@ -916,7 +904,7 @@
  * @return 0 on success, otherwise a Win32 error code
  */
 static UINT rdpgfx_send_surface_to_cache_pdu(RdpgfxServerContext* context,
-                                             const RDPGFX_SURFACE_TO_CACHE_PDU* pdu)
+                                             RDPGFX_SURFACE_TO_CACHE_PDU* pdu)
 {
 	UINT error = CHANNEL_RC_OK;
 	wStream* s = rdpgfx_server_single_packet_new(RDPGFX_CMDID_SURFACETOCACHE, 20);
@@ -950,7 +938,7 @@
  * @return 0 on success, otherwise a Win32 error code
  */
 static UINT rdpgfx_send_cache_to_surface_pdu(RdpgfxServerContext* context,
-                                             const RDPGFX_CACHE_TO_SURFACE_PDU* pdu)
+                                             RDPGFX_CACHE_TO_SURFACE_PDU* pdu)
 {
 	UINT error = CHANNEL_RC_OK;
 	UINT16 index;
@@ -991,7 +979,7 @@
  * @return 0 on success, otherwise a Win32 error code
  */
 static UINT rdpgfx_send_map_surface_to_output_pdu(RdpgfxServerContext* context,
-                                                  const RDPGFX_MAP_SURFACE_TO_OUTPUT_PDU* pdu)
+                                                  RDPGFX_MAP_SURFACE_TO_OUTPUT_PDU* pdu)
 {
 	wStream* s = rdpgfx_server_single_packet_new(RDPGFX_CMDID_MAPSURFACETOOUTPUT, 12);
 
@@ -1014,7 +1002,7 @@
  * @return 0 on success, otherwise a Win32 error code
  */
 static UINT rdpgfx_send_map_surface_to_window_pdu(RdpgfxServerContext* context,
-                                                  const RDPGFX_MAP_SURFACE_TO_WINDOW_PDU* pdu)
+                                                  RDPGFX_MAP_SURFACE_TO_WINDOW_PDU* pdu)
 {
 	wStream* s = rdpgfx_server_single_packet_new(RDPGFX_CMDID_MAPSURFACETOWINDOW, 18);
 
@@ -1031,27 +1019,6 @@
 	return rdpgfx_server_single_packet_send(context, s);
 }
 
-static UINT
-rdpgfx_send_map_surface_to_scaled_window_pdu(RdpgfxServerContext* context,
-                                             const RDPGFX_MAP_SURFACE_TO_SCALED_WINDOW_PDU* pdu)
-{
-	wStream* s = rdpgfx_server_single_packet_new(RDPGFX_CMDID_MAPSURFACETOWINDOW, 26);
-
-	if (!s)
-	{
-		WLog_ERR(TAG, "rdpgfx_server_single_packet_new failed!");
-		return CHANNEL_RC_NO_MEMORY;
-	}
-
-	Stream_Write_UINT16(s, pdu->surfaceId);    /* surfaceId (2 bytes) */
-	Stream_Write_UINT64(s, pdu->windowId);     /* windowId (8 bytes) */
-	Stream_Write_UINT32(s, pdu->mappedWidth);  /* mappedWidth (4 bytes) */
-	Stream_Write_UINT32(s, pdu->mappedHeight); /* mappedHeight (4 bytes) */
-	Stream_Write_UINT32(s, pdu->targetWidth);  /* targetWidth (4 bytes) */
-	Stream_Write_UINT32(s, pdu->targetHeight); /* targetHeight  (4 bytes) */
-	return rdpgfx_server_single_packet_send(context, s);
-}
-
 /**
  * Function description
  *
@@ -1068,9 +1035,10 @@
 		return ERROR_INVALID_DATA;
 	}
 
-	Stream_Read_UINT32(s, pdu.queueDepth);         /* queueDepth (4 bytes) */
-	Stream_Read_UINT32(s, pdu.frameId);            /* frameId (4 bytes) */
-	Stream_Read_UINT32(s, pdu.totalFramesDecoded); /* totalFramesDecoded (4 bytes) */
+	Stream_Read_UINT32(s, pdu.queueDepth); /* queueDepth (4 bytes) */
+	Stream_Read_UINT32(s, pdu.frameId);    /* frameId (4 bytes) */
+	/* totalFramesDecoded (4 bytes) */
+	Stream_Read_UINT32(s, pdu.totalFramesDecoded);
 
 	if (context)
 	{
@@ -1129,8 +1097,9 @@
 	for (index = 0; index < pdu.cacheEntriesCount; index++)
 	{
 		cacheEntries = &(pdu.cacheEntries[index]);
-		Stream_Read_UINT64(s, cacheEntries->cacheKey);     /* cacheKey (8 bytes) */
-		Stream_Read_UINT32(s, cacheEntries->bitmapLength); /* bitmapLength (4 bytes) */
+		Stream_Read_UINT64(s, cacheEntries->cacheKey); /* cacheKey (8 bytes) */
+		/* bitmapLength (4 bytes) */
+		Stream_Read_UINT32(s, cacheEntries->bitmapLength);
 	}
 
 	if (context)
@@ -1155,10 +1124,8 @@
 	UINT16 index;
 	RDPGFX_CAPSET* capsSets;
 	RDPGFX_CAPS_ADVERTISE_PDU pdu;
-	UINT error = ERROR_INVALID_DATA;
-
-	if (!context)
-		return ERROR_BAD_ARGUMENTS;
+	UINT error = CHANNEL_RC_OK;
+	UINT32 capsDataLength;
 
 	if (Stream_GetRemainingLength(s) < 2)
 	{
@@ -1167,7 +1134,14 @@
 	}
 
 	Stream_Read_UINT16(s, pdu.capsSetCount); /* capsSetCount (2 bytes) */
-	capsSets = calloc(pdu.capsSetCount, (RDPGFX_CAPSET_BASE_SIZE + 4));
+
+	if (Stream_GetRemainingLength(s) < (pdu.capsSetCount * RDPGFX_CAPSET_SIZE))
+	{
+		WLog_ERR(TAG, "not enough data!");
+		return ERROR_INVALID_DATA;
+	}
+
+	capsSets = calloc(pdu.capsSetCount, RDPGFX_CAPSET_SIZE);
 
 	if (!capsSets)
 		return ERROR_OUTOFMEMORY;
@@ -1177,32 +1151,27 @@
 	for (index = 0; index < pdu.capsSetCount; index++)
 	{
 		RDPGFX_CAPSET* capsSet = &(pdu.capsSets[index]);
-
-		if (Stream_GetRemainingLength(s) < 8)
-			goto fail;
-
 		Stream_Read_UINT32(s, capsSet->version); /* version (4 bytes) */
-		Stream_Read_UINT32(s, capsSet->length);  /* capsDataLength (4 bytes) */
+		Stream_Read_UINT32(s, capsDataLength);   /* capsDataLength (4 bytes) */
 
-		if (capsSet->length >= 4)
+		if (capsDataLength != 4)
 		{
-			if (Stream_GetRemainingLength(s) < 4)
-				goto fail;
-
-			Stream_Peek_UINT32(s, capsSet->flags); /* capsData (4 bytes) */
+			WLog_ERR(TAG, "capsDataLength does not equal to 4: %" PRIu32 "", capsDataLength);
+			free(capsSets);
+			return ERROR_INVALID_DATA;
 		}
 
-		if (!Stream_SafeSeek(s, capsSet->length))
-			goto fail;
+		Stream_Read_UINT32(s, capsSet->flags); /* capsData (4 bytes) */
 	}
 
-	error = ERROR_BAD_CONFIGURATION;
-	IFCALLRET(context->CapsAdvertise, error, context, &pdu);
+	if (context)
+	{
+		IFCALLRET(context->CapsAdvertise, error, context, &pdu);
 
-	if (error)
-		WLog_ERR(TAG, "context->CapsAdvertise failed with error %" PRIu32 "", error);
+		if (error)
+			WLog_ERR(TAG, "context->CapsAdvertise failed with error %" PRIu32 "", error);
+	}
 
-fail:
 	free(capsSets);
 	return error;
 }
@@ -1239,27 +1208,6 @@
 	return error;
 }
 
-static UINT
-rdpgfx_send_map_surface_to_scaled_output_pdu(RdpgfxServerContext* context,
-                                             const RDPGFX_MAP_SURFACE_TO_SCALED_OUTPUT_PDU* pdu)
-{
-	wStream* s = rdpgfx_server_single_packet_new(RDPGFX_CMDID_MAPSURFACETOSCALEDOUTPUT, 20);
-
-	if (!s)
-	{
-		WLog_ERR(TAG, "rdpgfx_server_single_packet_new failed!");
-		return CHANNEL_RC_NO_MEMORY;
-	}
-
-	Stream_Write_UINT16(s, pdu->surfaceId);     /* surfaceId (2 bytes) */
-	Stream_Write_UINT16(s, 0);                  /* reserved (2 bytes). Must be 0 */
-	Stream_Write_UINT32(s, pdu->outputOriginX); /* outputOriginX (4 bytes) */
-	Stream_Write_UINT32(s, pdu->outputOriginY); /* outputOriginY (4 bytes) */
-	Stream_Write_UINT32(s, pdu->targetWidth);   /* targetWidth (4 bytes) */
-	Stream_Write_UINT32(s, pdu->targetHeight);  /* targetHeight (4 bytes) */
-	return rdpgfx_server_single_packet_send(context, s);
-}
-
 /**
  * Function description
  *
@@ -1278,10 +1226,8 @@
 		return error;
 	}
 
-#ifdef WITH_DEBUG_RDPGFX
 	WLog_DBG(TAG, "cmdId: %s (0x%04" PRIX16 ") flags: 0x%04" PRIX16 " pduLength: %" PRIu32 "",
 	         rdpgfx_get_cmd_id_string(header.cmdId), header.cmdId, header.flags, header.pduLength);
-#endif
 
 	switch (header.cmdId)
 	{
@@ -1546,8 +1492,6 @@
 	context->EvictCacheEntry = rdpgfx_send_evict_cache_entry_pdu;
 	context->MapSurfaceToOutput = rdpgfx_send_map_surface_to_output_pdu;
 	context->MapSurfaceToWindow = rdpgfx_send_map_surface_to_window_pdu;
-	context->MapSurfaceToScaledOutput = rdpgfx_send_map_surface_to_scaled_output_pdu;
-	context->MapSurfaceToScaledWindow = rdpgfx_send_map_surface_to_scaled_window_pdu;
 	context->CapsAdvertise = NULL;
 	context->CapsConfirm = rdpgfx_send_caps_confirm_pdu;
 	context->FrameAcknowledge = NULL;
diff -urN channels/rdpsnd/client/fake/rdpsnd_fake.c ../../informatimago/FreeRDP/channels/rdpsnd/client/fake/rdpsnd_fake.c
--- channels/rdpsnd/client/fake/rdpsnd_fake.c	2019-07-25 19:50:58.737886889 +0300
+++ ../../informatimago/FreeRDP/channels/rdpsnd/client/fake/rdpsnd_fake.c	2019-07-25 20:11:22.791957017 +0300
@@ -134,7 +134,7 @@
 {
 	ADDIN_ARGV* args;
 	rdpsndFakePlugin* fake;
-	UINT ret = CHANNEL_RC_OK;
+	UINT ret;
 	fake = (rdpsndFakePlugin*)calloc(1, sizeof(rdpsndFakePlugin));
 
 	if (!fake)
@@ -160,8 +160,9 @@
 		}
 	}
 
+	ret = CHANNEL_RC_NO_MEMORY;
 	pEntryPoints->pRegisterRdpsndDevice(pEntryPoints->rdpsnd, &fake->device);
-	return ret;
+	return CHANNEL_RC_OK;
 error:
 	rdpsnd_fake_free(&fake->device);
 	return ret;
diff -urN channels/rdpsnd/client/oss/rdpsnd_oss.c ../../informatimago/FreeRDP/channels/rdpsnd/client/oss/rdpsnd_oss.c
--- channels/rdpsnd/client/oss/rdpsnd_oss.c	2019-07-25 19:50:58.785887128 +0300
+++ ../../informatimago/FreeRDP/channels/rdpsnd/client/oss/rdpsnd_oss.c	2019-07-25 20:11:22.835957235 +0300
@@ -377,8 +377,8 @@
 
 		data += status;
 
-		if ((size_t)status <= size)
-			size -= (size_t)status;
+		if (status <= size)
+			size -= status;
 		else
 			size = 0;
 	}
diff -urN channels/rdpsnd/client/winmm/rdpsnd_winmm.c ../../informatimago/FreeRDP/channels/rdpsnd/client/winmm/rdpsnd_winmm.c
--- channels/rdpsnd/client/winmm/rdpsnd_winmm.c	2019-07-25 19:50:58.825887326 +0300
+++ ../../informatimago/FreeRDP/channels/rdpsnd/client/winmm/rdpsnd_winmm.c	2019-07-25 20:11:22.879957453 +0300
@@ -29,8 +29,8 @@
 #include <stdlib.h>
 #include <string.h>
 
-#include <windows.h>
-#include <mmsystem.h>
+#include <Windows.h>
+#include <MMSystem.h>
 
 #include <winpr/crt.h>
 #include <winpr/cmdline.h>
@@ -102,12 +102,14 @@
 
 	case MM_WOM_CLOSE:
 		WLog_DBG(TAG, "MM_WOM_CLOSE");
+		SetEvent(winmm->next);
 		break;
 
 	case MM_WOM_DONE:
 		WLog_DBG(TAG, "MM_WOM_DONE");
 		lpWaveHdr = (LPWAVEHDR)dwParam1;
 		free(lpWaveHdr);
+		SetEvent(winmm->next);
 		break;
 
 	default:
@@ -175,6 +177,7 @@
 	if (winmm)
 	{
 		rdpsnd_winmm_close(device);
+		CloseHandle(winmm->next);
 		free(winmm);
 	}
 }
@@ -267,6 +270,7 @@
 		return 0;
 	}
 
+	WaitForSingleObject(winmm->next, INFINITE);
 	return 10; /* TODO: Get real latencry in [ms] */
 }
 
@@ -302,6 +306,14 @@
 	winmm->device.Play = rdpsnd_winmm_play;
 	winmm->device.Close = rdpsnd_winmm_close;
 	winmm->device.Free = rdpsnd_winmm_free;
+	winmm->next = CreateEventA(NULL, FALSE, FALSE, "winmm-play-event");
+
+	if (!winmm->next)
+	{
+		free(winmm);
+		return CHANNEL_RC_NO_MEMORY;
+	}
+
 	args = pEntryPoints->args;
 	rdpsnd_winmm_parse_addin_args((rdpsndDevicePlugin*)winmm, args);
 	winmm->volume = 0xFFFFFFFF;
diff -urN channels/server/channels.c ../../informatimago/FreeRDP/channels/server/channels.c
--- channels/server/channels.c	2019-07-25 19:50:58.885887624 +0300
+++ ../../informatimago/FreeRDP/channels/server/channels.c	2019-07-25 20:11:22.935957731 +0300
@@ -50,7 +50,6 @@
 #include <freerdp/server/remdesk.h>
 #include <freerdp/server/encomsp.h>
 #include <freerdp/server/rdpgfx.h>
-#include <freerdp/server/disp.h>
 
 void freerdp_channels_dummy()
 {
@@ -64,7 +63,6 @@
 	RemdeskServerContext* remdesk;
 	EncomspServerContext* encomsp;
 	RdpgfxServerContext* rdpgfx;
-	DispServerContext* disp;
 	audin = audin_server_context_new(NULL);
 	audin_server_context_free(audin);
 	rdpsnd = rdpsnd_server_context_new(NULL);
@@ -85,8 +83,6 @@
 	encomsp_server_context_free(encomsp);
 	rdpgfx = rdpgfx_server_context_new(NULL);
 	rdpgfx_server_context_free(rdpgfx);
-	disp = disp_server_context_new(NULL);
-	disp_server_context_free(disp);
 }
 
 /**
diff -urN channels/smartcard/client/smartcard_main.c ../../informatimago/FreeRDP/channels/smartcard/client/smartcard_main.c
--- channels/smartcard/client/smartcard_main.c	2019-07-25 19:50:58.897887684 +0300
+++ ../../informatimago/FreeRDP/channels/smartcard/client/smartcard_main.c	2019-07-25 20:11:22.947957791 +0300
@@ -195,7 +195,6 @@
 	int index;
 	int keyCount;
 	ULONG_PTR* pKeys;
-	SCARDCONTEXT hContext;
 	SMARTCARD_CONTEXT* pContext;
 
 	/**
@@ -219,14 +218,9 @@
 			pContext = (SMARTCARD_CONTEXT*)ListDictionary_GetItemValue(
 			    smartcard->rgSCardContextList, (void*)pKeys[index]);
 
-			if (!pContext)
-				continue;
-
-			hContext = pContext->hContext;
-
-			if (SCardIsValidContext(hContext) == SCARD_S_SUCCESS)
+			if (pContext && (SCardIsValidContext(pContext->hContext) == SCARD_S_SUCCESS))
 			{
-				SCardCancel(hContext);
+				SCardCancel(pContext->hContext);
 			}
 		}
 
@@ -247,14 +241,9 @@
 			pContext = (SMARTCARD_CONTEXT*)ListDictionary_Remove(smartcard->rgSCardContextList,
 			                                                     (void*)pKeys[index]);
 
-			if (!pContext)
-				continue;
-
-			hContext = pContext->hContext;
-
-			if (SCardIsValidContext(hContext) == SCARD_S_SUCCESS)
+			if (pContext && (SCardIsValidContext(pContext->hContext) == SCARD_S_SUCCESS))
 			{
-				SCardReleaseContext(hContext);
+				SCardReleaseContext(pContext->hContext);
 
 				if (MessageQueue_PostQuit(pContext->IrpQueue, 0) &&
 				    (WaitForSingleObject(pContext->thread, INFINITE) == WAIT_FAILED))
@@ -273,27 +262,37 @@
 
 static UINT smartcard_free_(SMARTCARD_DEVICE* smartcard)
 {
-	if (!smartcard)
+	if (smartcard == NULL)
+	{
 		return CHANNEL_RC_OK;
+	}
 
-	if (smartcard->IrpQueue)
+	if (sSmartcard == smartcard)
 	{
-		MessageQueue_Free(smartcard->IrpQueue);
-		CloseHandle(smartcard->thread);
+		sSmartcard = NULL;
+	}
+
+	if (smartcard->StartedEvent)
+	{
+		SCardReleaseStartedEvent();
 	}
 
-	Stream_Free(smartcard->device.data, TRUE);
-	LinkedList_Free(smartcard->names);
-	ListDictionary_Free(smartcard->rgSCardContextList);
 	ListDictionary_Free(smartcard->rgOutstandingMessages);
+	ListDictionary_Free(smartcard->rgSCardContextList);
 	Queue_Free(smartcard->CompletedIrpQueue);
 
-	if (smartcard->StartedEvent)
-		SCardReleaseStartedEvent();
+	if (smartcard->IrpQueue)
+	{
+		MessageQueue_Free(smartcard->IrpQueue);
+		CloseHandle(smartcard->thread);
+	}
 
+	LinkedList_Free(smartcard->names);
+	Stream_Free(smartcard->device.data, TRUE);
 	free(smartcard);
 	return CHANNEL_RC_OK;
 }
+
 /**
  * Function description
  *
@@ -326,9 +325,6 @@
 		}
 	}
 
-	if (sSmartcard == smartcard)
-		sSmartcard = NULL;
-
 	return smartcard_free_(smartcard);
 }
 
@@ -371,6 +367,70 @@
  * http://musclecard.996296.n3.nabble.com/Multiple-threads-and-SCardGetStatusChange-td4430.html
  */
 
+static BOOL is_operation_irp_asynchronous(UINT32 ioControlCode)
+{
+	switch (ioControlCode)
+	{
+	/*
+	 * The following matches mstsc's behavior of processing
+	 * only certain requests asynchronously while processing
+	 * those expected to return fast synchronously.
+	 */
+	case SCARD_IOCTL_ESTABLISHCONTEXT:
+	case SCARD_IOCTL_RELEASECONTEXT:
+	case SCARD_IOCTL_ISVALIDCONTEXT:
+	case SCARD_IOCTL_ACCESSSTARTEDEVENT:
+	case SCARD_IOCTL_RELEASESTARTEDEVENT:
+	case SCARD_IOCTL_CANCEL:
+	case SCARD_IOCTL_LISTREADERGROUPSA:
+	case SCARD_IOCTL_LISTREADERGROUPSW:
+	case SCARD_IOCTL_LISTREADERSA:
+	case SCARD_IOCTL_LISTREADERSW:
+	case SCARD_IOCTL_INTRODUCEREADERGROUPA:
+	case SCARD_IOCTL_INTRODUCEREADERGROUPW:
+	case SCARD_IOCTL_FORGETREADERGROUPA:
+	case SCARD_IOCTL_FORGETREADERGROUPW:
+	case SCARD_IOCTL_INTRODUCEREADERA:
+	case SCARD_IOCTL_INTRODUCEREADERW:
+	case SCARD_IOCTL_FORGETREADERA:
+	case SCARD_IOCTL_FORGETREADERW:
+	case SCARD_IOCTL_ADDREADERTOGROUPA:
+	case SCARD_IOCTL_ADDREADERTOGROUPW:
+	case SCARD_IOCTL_REMOVEREADERFROMGROUPA:
+	case SCARD_IOCTL_REMOVEREADERFROMGROUPW:
+	case SCARD_IOCTL_LOCATECARDSA:
+	case SCARD_IOCTL_LOCATECARDSW:
+	case SCARD_IOCTL_LOCATECARDSBYATRA:
+	case SCARD_IOCTL_LOCATECARDSBYATRW:
+	case SCARD_IOCTL_READCACHEA:
+	case SCARD_IOCTL_READCACHEW:
+	case SCARD_IOCTL_WRITECACHEA:
+	case SCARD_IOCTL_WRITECACHEW:
+	case SCARD_IOCTL_GETREADERICON:
+	case SCARD_IOCTL_GETDEVICETYPEID:
+		return FALSE;
+
+	case SCARD_IOCTL_GETSTATUSCHANGEA:
+	case SCARD_IOCTL_GETSTATUSCHANGEW:
+	case SCARD_IOCTL_CONNECTA:
+	case SCARD_IOCTL_CONNECTW:
+	case SCARD_IOCTL_RECONNECT:
+	case SCARD_IOCTL_DISCONNECT:
+	case SCARD_IOCTL_BEGINTRANSACTION:
+	case SCARD_IOCTL_ENDTRANSACTION:
+	case SCARD_IOCTL_STATE:
+	case SCARD_IOCTL_STATUSA:
+	case SCARD_IOCTL_STATUSW:
+	case SCARD_IOCTL_TRANSMIT:
+	case SCARD_IOCTL_CONTROL:
+	case SCARD_IOCTL_GETATTRIB:
+	case SCARD_IOCTL_SETATTRIB:
+	case SCARD_IOCTL_GETTRANSMITCOUNT:
+	default:
+		return TRUE;
+	}
+}
+
 /**
  * Function description
  *
@@ -380,7 +440,6 @@
 {
 	void* key;
 	LONG status;
-	BOOL asyncIrp = FALSE;
 	SMARTCARD_CONTEXT* pContext = NULL;
 	SMARTCARD_OPERATION* operation = NULL;
 	key = (void*)(size_t)irp->CompletionId;
@@ -391,145 +450,72 @@
 		return ERROR_INTERNAL_ERROR;
 	}
 
-	if (irp->MajorFunction == IRP_MJ_DEVICE_CONTROL)
+	if (irp->MajorFunction != IRP_MJ_DEVICE_CONTROL)
 	{
-		operation = (SMARTCARD_OPERATION*)calloc(1, sizeof(SMARTCARD_OPERATION));
-
-		if (!operation)
-		{
-			WLog_ERR(TAG, "calloc failed!");
-			return CHANNEL_RC_NO_MEMORY;
-		}
-
-		operation->irp = irp;
-		status = smartcard_irp_device_control_decode(smartcard, operation);
+		WLog_ERR(TAG,
+		         "Unexpected SmartCard IRP: MajorFunction 0x%08" PRIX32
+		         " MinorFunction: 0x%08" PRIX32 "",
+		         irp->MajorFunction, irp->MinorFunction);
+		irp->IoStatus = (UINT32)STATUS_NOT_SUPPORTED;
 
-		if (status != SCARD_S_SUCCESS)
+		if (Queue_Enqueue(smartcard->CompletedIrpQueue, (void*)irp))
 		{
-			irp->IoStatus = (UINT32)STATUS_UNSUCCESSFUL;
-
-			if (!Queue_Enqueue(smartcard->CompletedIrpQueue, (void*)irp))
-			{
-				free(operation);
-				WLog_ERR(TAG, "Queue_Enqueue failed!");
-				return ERROR_INTERNAL_ERROR;
-			}
-
-			free(operation);
 			return CHANNEL_RC_OK;
 		}
 
-		asyncIrp = TRUE;
-
-		switch (operation->ioControlCode)
-		{
-		case SCARD_IOCTL_ESTABLISHCONTEXT:
-		case SCARD_IOCTL_RELEASECONTEXT:
-		case SCARD_IOCTL_ISVALIDCONTEXT:
-		case SCARD_IOCTL_CANCEL:
-		case SCARD_IOCTL_ACCESSSTARTEDEVENT:
-		case SCARD_IOCTL_RELEASESTARTEDEVENT:
-			asyncIrp = FALSE;
-			break;
+		WLog_ERR(TAG, "Queue_Enqueue failed!");
+		return ERROR_INTERNAL_ERROR;
+	}
 
-		case SCARD_IOCTL_LISTREADERGROUPSA:
-		case SCARD_IOCTL_LISTREADERGROUPSW:
-		case SCARD_IOCTL_LISTREADERSA:
-		case SCARD_IOCTL_LISTREADERSW:
-		case SCARD_IOCTL_INTRODUCEREADERGROUPA:
-		case SCARD_IOCTL_INTRODUCEREADERGROUPW:
-		case SCARD_IOCTL_FORGETREADERGROUPA:
-		case SCARD_IOCTL_FORGETREADERGROUPW:
-		case SCARD_IOCTL_INTRODUCEREADERA:
-		case SCARD_IOCTL_INTRODUCEREADERW:
-		case SCARD_IOCTL_FORGETREADERA:
-		case SCARD_IOCTL_FORGETREADERW:
-		case SCARD_IOCTL_ADDREADERTOGROUPA:
-		case SCARD_IOCTL_ADDREADERTOGROUPW:
-		case SCARD_IOCTL_REMOVEREADERFROMGROUPA:
-		case SCARD_IOCTL_REMOVEREADERFROMGROUPW:
-		case SCARD_IOCTL_LOCATECARDSA:
-		case SCARD_IOCTL_LOCATECARDSW:
-		case SCARD_IOCTL_LOCATECARDSBYATRA:
-		case SCARD_IOCTL_LOCATECARDSBYATRW:
-		case SCARD_IOCTL_READCACHEA:
-		case SCARD_IOCTL_READCACHEW:
-		case SCARD_IOCTL_WRITECACHEA:
-		case SCARD_IOCTL_WRITECACHEW:
-		case SCARD_IOCTL_GETREADERICON:
-		case SCARD_IOCTL_GETDEVICETYPEID:
-		case SCARD_IOCTL_GETSTATUSCHANGEA:
-		case SCARD_IOCTL_GETSTATUSCHANGEW:
-		case SCARD_IOCTL_CONNECTA:
-		case SCARD_IOCTL_CONNECTW:
-		case SCARD_IOCTL_RECONNECT:
-		case SCARD_IOCTL_DISCONNECT:
-		case SCARD_IOCTL_BEGINTRANSACTION:
-		case SCARD_IOCTL_ENDTRANSACTION:
-		case SCARD_IOCTL_STATE:
-		case SCARD_IOCTL_STATUSA:
-		case SCARD_IOCTL_STATUSW:
-		case SCARD_IOCTL_TRANSMIT:
-		case SCARD_IOCTL_CONTROL:
-		case SCARD_IOCTL_GETATTRIB:
-		case SCARD_IOCTL_SETATTRIB:
-		case SCARD_IOCTL_GETTRANSMITCOUNT:
-			asyncIrp = TRUE;
-			break;
-		}
+	operation = (SMARTCARD_OPERATION*)calloc(1, sizeof(SMARTCARD_OPERATION));
 
-		pContext =
-		    ListDictionary_GetItemValue(smartcard->rgSCardContextList, (void*)operation->hContext);
+	if (operation == NULL)
+	{
+		WLog_ERR(TAG, "calloc failed!");
+		return CHANNEL_RC_NO_MEMORY;
+	}
 
-		if (!pContext)
-			asyncIrp = FALSE;
+	operation->irp = irp;
+	status = smartcard_irp_device_control_decode(smartcard, operation);
 
-		if (!asyncIrp)
-		{
-			if ((status = smartcard_irp_device_control_call(smartcard, operation)))
-			{
-				WLog_ERR(TAG, "smartcard_irp_device_control_call failed with error %" PRId32 "!",
-				         status);
-				return (UINT32)status;
-			}
+	if (status != SCARD_S_SUCCESS)
+	{
+		irp->IoStatus = (UINT32)STATUS_UNSUCCESSFUL;
+		goto enqueue;
+	}
 
-			if (!Queue_Enqueue(smartcard->CompletedIrpQueue, (void*)irp))
-			{
-				free(operation);
-				WLog_ERR(TAG, "Queue_Enqueue failed!");
-				return ERROR_INTERNAL_ERROR;
-			}
+	pContext =
+	    ListDictionary_GetItemValue(smartcard->rgSCardContextList, (void*)operation->hContext);
 
-			free(operation);
-		}
-		else
+	if ((pContext != NULL) && is_operation_irp_asynchronous(operation->ioControlCode))
+	{
+		if (!MessageQueue_Post(pContext->IrpQueue, NULL, 0, (void*)operation, NULL))
 		{
-			if (pContext)
-			{
-				if (!MessageQueue_Post(pContext->IrpQueue, NULL, 0, (void*)operation, NULL))
-				{
-					WLog_ERR(TAG, "MessageQueue_Post failed!");
-					return ERROR_INTERNAL_ERROR;
-				}
-			}
+			WLog_ERR(TAG, "MessageQueue_Post failed!");
+			return ERROR_INTERNAL_ERROR;
 		}
+
+		return CHANNEL_RC_OK;
 	}
-	else
+
+	if ((status = smartcard_irp_device_control_call(smartcard, operation)))
 	{
-		WLog_ERR(TAG,
-		         "Unexpected SmartCard IRP: MajorFunction 0x%08" PRIX32
-		         " MinorFunction: 0x%08" PRIX32 "",
-		         irp->MajorFunction, irp->MinorFunction);
-		irp->IoStatus = (UINT32)STATUS_NOT_SUPPORTED;
+		WLog_ERR(TAG, "smartcard_irp_device_control_call failed with error %" PRId32 "!", status);
+		free(operation);
+		return (UINT32)status;
+	}
 
-		if (!Queue_Enqueue(smartcard->CompletedIrpQueue, (void*)irp))
-		{
-			WLog_ERR(TAG, "Queue_Enqueue failed!");
-			return ERROR_INTERNAL_ERROR;
-		}
+enqueue:
+
+	if (Queue_Enqueue(smartcard->CompletedIrpQueue, (void*)irp))
+	{
+		free(operation);
+		return CHANNEL_RC_OK;
 	}
 
-	return CHANNEL_RC_OK;
+	WLog_ERR(TAG, "Queue_Enqueue failed!");
+	free(operation);
+	return ERROR_INTERNAL_ERROR;
 }
 
 static DWORD WINAPI smartcard_thread_func(LPVOID arg)
@@ -727,7 +713,11 @@
 	size_t length;
 	UINT error = CHANNEL_RC_NO_MEMORY;
 
-	if (!sSmartcard)
+	if (sSmartcard != NULL)
+	{
+		smartcard = sSmartcard;
+	}
+	else
 	{
 		wObject* obj;
 		smartcard = (SMARTCARD_DEVICE*)calloc(1, sizeof(SMARTCARD_DEVICE));
@@ -807,11 +797,11 @@
 
 		ResumeThread(smartcard->thread);
 	}
-	else
-		smartcard = sSmartcard;
 
 	if (pEntryPoints->device->Name)
+	{
 		LinkedList_AddLast(smartcard->names, pEntryPoints->device->Name);
+	}
 
 	sSmartcard = smartcard;
 	return CHANNEL_RC_OK;
diff -urN channels/smartcard/client/smartcard_main.h ../../informatimago/FreeRDP/channels/smartcard/client/smartcard_main.h
--- channels/smartcard/client/smartcard_main.h	2019-07-25 19:50:58.901887703 +0300
+++ ../../informatimago/FreeRDP/channels/smartcard/client/smartcard_main.h	2019-07-25 20:11:22.951957810 +0300
@@ -95,6 +95,7 @@
 	IRP* irp;
 	void* call;
 	UINT32 ioControlCode;
+	UINT32 ioctlOutputBufferLength;
 	SCARDCONTEXT hContext;
 	SCARDHANDLE hCard;
 };
diff -urN channels/smartcard/client/smartcard_operations.c ../../informatimago/FreeRDP/channels/smartcard/client/smartcard_operations.c
--- channels/smartcard/client/smartcard_operations.c	2019-07-25 19:50:58.949887941 +0300
+++ ../../informatimago/FreeRDP/channels/smartcard/client/smartcard_operations.c	2019-07-25 20:11:22.999958048 +0300
@@ -459,7 +459,7 @@
 {
 	size_t rpos = 0, wpos = 0;
 
-	if (*mszReaders == NULL || LinkedList_Count(list) < 1)
+	if (LinkedList_Count(list) < 1)
 		return cchReaders;
 
 	do
@@ -492,25 +492,21 @@
 
 static DWORD filter_device_by_name_w(wLinkedList* list, LPWSTR* mszReaders, DWORD cchReaders)
 {
-	int res;
 	DWORD rc;
-	LPSTR readers = NULL;
+	LPSTR readers;
 
 	if (LinkedList_Count(list) < 1)
 		return cchReaders;
 
-	res = ConvertFromUnicode(CP_UTF8, 0, *mszReaders, (int)cchReaders, &readers, 0, NULL, NULL);
-
-	/* When res==0, readers may have been set to NULL by ConvertFromUnicode */
-	if ((res < 0) || ((DWORD)res != cchReaders) || (readers == 0))
+	if (ConvertFromUnicode(CP_UTF8, 0, *mszReaders, (int)cchReaders, &readers, 0, NULL, NULL) !=
+	    cchReaders)
 		return 0;
 
 	free(*mszReaders);
 	*mszReaders = NULL;
 	rc = filter_device_by_name_a(list, &readers, cchReaders);
-	res = ConvertToUnicode(CP_UTF8, 0, readers, (int)rc, mszReaders, 0);
 
-	if ((res < 0) || ((DWORD)res != rc))
+	if (ConvertToUnicode(CP_UTF8, 0, readers, (int)rc, mszReaders, 0) != rc)
 		rc = 0;
 
 	free(readers);
@@ -547,6 +543,9 @@
 	cchReaders = SCARD_AUTOALLOCATE;
 	status = ret.ReturnCode = SCardListReadersA(operation->hContext, (LPCSTR)call->mszGroups,
 	                                            (LPSTR)&mszReaders, &cchReaders);
+	cchReaders = filter_device_by_name_a(smartcard->names, &mszReaders, cchReaders);
+	ret.msz = (BYTE*)mszReaders;
+	ret.cBytes = cchReaders;
 
 	if (call->mszGroups)
 	{
@@ -560,9 +559,6 @@
 		return status;
 	}
 
-	cchReaders = filter_device_by_name_a(smartcard->names, &mszReaders, cchReaders);
-	ret.msz = (BYTE*)mszReaders;
-	ret.cBytes = cchReaders;
 	smartcard_trace_list_readers_return(smartcard, &ret, FALSE);
 
 	if ((status = smartcard_pack_list_readers_return(smartcard, irp->output, &ret)))
@@ -610,6 +606,9 @@
 	cchReaders = SCARD_AUTOALLOCATE;
 	status = ret.ReturnCode = SCardListReadersW(operation->hContext, (LPCWSTR)call->mszGroups,
 	                                            (LPWSTR)&mszReaders, &cchReaders);
+	cchReaders = filter_device_by_name_w(smartcard->names, &mszReaders, cchReaders);
+	ret.msz = (BYTE*)mszReaders;
+	ret.cBytes = cchReaders * 2;
 
 	if (call->mszGroups)
 	{
@@ -623,9 +622,6 @@
 		return status;
 	}
 
-	cchReaders = filter_device_by_name_w(smartcard->names, &mszReaders, cchReaders);
-	ret.msz = (BYTE*)mszReaders;
-	ret.cBytes = cchReaders * 2;
 	smartcard_trace_list_readers_return(smartcard, &ret, TRUE);
 
 	if ((status = smartcard_pack_list_readers_return(smartcard, irp->output, &ret)))
@@ -666,16 +662,39 @@
 	return status;
 }
 
+#define CARD_GET_STATUS_CHANGE(call, operation, ret, status, status_change)            \
+	do                                                                                 \
+	{                                                                                  \
+		/*                                                                             \
+		 * https://msdn.microsoft.com/library/windows/desktop/aa379773(v=vs.85).aspx   \
+		 * Important  Each member of SCARD_READERSTATE structure in                    \
+		 * rgReaderStates [in, out] array must be initialized to zero                  \
+		 * and then set to specific values as necessary. If this is not done,          \
+		 * the function will fail in situations that involve remote card readers.      \
+		 */                                                                            \
+		call->rgReaderStates->pvUserData = NULL;                                       \
+		call->rgReaderStates->dwCurrentState = 0;                                      \
+		call->rgReaderStates->dwEventState = 0;                                        \
+		call->rgReaderStates->cbAtr = 0;                                               \
+		memset(call->rgReaderStates->rgbAtr, 0, sizeof(call->rgReaderStates->rgbAtr)); \
+		status = ret.ReturnCode = status_change(operation->hContext, call->dwTimeOut,  \
+		                                        call->rgReaderStates, call->cReaders); \
+		if (status && (status != SCARD_E_TIMEOUT) && (status != SCARD_E_CANCELLED))    \
+		{                                                                              \
+			call->cReaders = 0;                                                        \
+		}                                                                              \
+	} while (0)
+
 static LONG smartcard_GetStatusChangeA_Call(SMARTCARD_DEVICE* smartcard,
                                             SMARTCARD_OPERATION* operation)
 {
+	LONG status;
 	UINT32 index;
 	GetStatusChange_Return ret;
 	LPSCARD_READERSTATEA rgReaderState = NULL;
 	IRP* irp = operation->irp;
 	GetStatusChangeA_Call* call = operation->call;
-	ret.ReturnCode = SCardGetStatusChangeA(operation->hContext, call->dwTimeOut,
-	                                       call->rgReaderStates, call->cReaders);
+	CARD_GET_STATUS_CHANGE(call, operation, ret, status, SCardGetStatusChangeA);
 	ret.cReaders = call->cReaders;
 	ret.rgReaderStates = NULL;
 
@@ -692,11 +711,20 @@
 		ret.rgReaderStates[index].dwCurrentState = call->rgReaderStates[index].dwCurrentState;
 		ret.rgReaderStates[index].dwEventState = call->rgReaderStates[index].dwEventState;
 		ret.rgReaderStates[index].cbAtr = call->rgReaderStates[index].cbAtr;
-		CopyMemory(&(ret.rgReaderStates[index].rgbAtr), &(call->rgReaderStates[index].rgbAtr), 32);
+		CopyMemory(&(ret.rgReaderStates[index].rgbAtr), &(call->rgReaderStates[index].rgbAtr),
+		           ret.rgReaderStates[index].cbAtr);
+		ZeroMemory(&(ret.rgReaderStates[index].rgbAtr[ret.rgReaderStates[index].cbAtr]),
+		           sizeof(ret.rgReaderStates[index].rgbAtr) - ret.rgReaderStates[index].cbAtr);
 	}
 
 	smartcard_trace_get_status_change_return(smartcard, &ret, FALSE);
-	smartcard_pack_get_status_change_return(smartcard, irp->output, &ret);
+
+	if ((status = smartcard_pack_get_status_change_return(smartcard, irp->output, &ret)))
+	{
+		WLog_ERR(TAG, "smartcard_pack_get_status_change_return failed with error %" PRId32 "",
+		         status);
+		return status;
+	}
 
 	if (call->rgReaderStates)
 	{
@@ -736,13 +764,13 @@
 static LONG smartcard_GetStatusChangeW_Call(SMARTCARD_DEVICE* smartcard,
                                             SMARTCARD_OPERATION* operation)
 {
+	LONG status;
 	UINT32 index;
 	GetStatusChange_Return ret;
 	LPSCARD_READERSTATEW rgReaderState = NULL;
 	IRP* irp = operation->irp;
 	GetStatusChangeW_Call* call = operation->call;
-	ret.ReturnCode = SCardGetStatusChangeW(operation->hContext, call->dwTimeOut,
-	                                       call->rgReaderStates, call->cReaders);
+	CARD_GET_STATUS_CHANGE(call, operation, ret, status, SCardGetStatusChangeW);
 	ret.cReaders = call->cReaders;
 	ret.rgReaderStates = NULL;
 
@@ -759,11 +787,20 @@
 		ret.rgReaderStates[index].dwCurrentState = call->rgReaderStates[index].dwCurrentState;
 		ret.rgReaderStates[index].dwEventState = call->rgReaderStates[index].dwEventState;
 		ret.rgReaderStates[index].cbAtr = call->rgReaderStates[index].cbAtr;
-		CopyMemory(&(ret.rgReaderStates[index].rgbAtr), &(call->rgReaderStates[index].rgbAtr), 32);
+		CopyMemory(&(ret.rgReaderStates[index].rgbAtr), &(call->rgReaderStates[index].rgbAtr),
+		           ret.rgReaderStates[index].cbAtr);
+		ZeroMemory(&(ret.rgReaderStates[index].rgbAtr[ret.rgReaderStates[index].cbAtr]),
+		           sizeof(ret.rgReaderStates[index].rgbAtr) - ret.rgReaderStates[index].cbAtr);
 	}
 
 	smartcard_trace_get_status_change_return(smartcard, &ret, TRUE);
-	smartcard_pack_get_status_change_return(smartcard, irp->output, &ret);
+
+	if ((status = smartcard_pack_get_status_change_return(smartcard, irp->output, &ret)))
+	{
+		WLog_ERR(TAG, "smartcard_pack_get_status_change_return failed with error %" PRId32 "",
+		         status);
+		return status;
+	}
 
 	if (call->rgReaderStates)
 	{
@@ -1140,13 +1177,12 @@
 	LONG status;
 	Status_Return ret = { 0 };
 	DWORD cchReaderLen = 0;
-	DWORD cbAtrLen = 0;
 	LPSTR mszReaderNames = NULL;
 	IRP* irp = operation->irp;
 	Status_Call* call = operation->call;
+	DWORD cbAtrLen =
+	    32; /*  [MS-RDPESC] 2.2.2.18 Status_Call.cbAtrLen: Unused. MUST be ignored upon receipt. */
 	ZeroMemory(ret.pbAtr, 32);
-	call->cbAtrLen = 32;
-	cbAtrLen = call->cbAtrLen;
 
 	if (call->fmszReaderNamesIsNULL)
 		cchReaderLen = 0;
@@ -1155,8 +1191,7 @@
 
 	status = ret.ReturnCode =
 	    SCardStatusA(operation->hCard, call->fmszReaderNamesIsNULL ? NULL : (LPSTR)&mszReaderNames,
-	                 &cchReaderLen, &ret.dwState, &ret.dwProtocol,
-	                 cbAtrLen ? (BYTE*)&ret.pbAtr : NULL, &cbAtrLen);
+	                 &cchReaderLen, &ret.dwState, &ret.dwProtocol, (LPBYTE)&ret.pbAtr, &cbAtrLen);
 
 	if (status == SCARD_S_SUCCESS)
 	{
@@ -1164,9 +1199,7 @@
 			ret.mszReaderNames = (BYTE*)mszReaderNames;
 
 		ret.cBytes = cchReaderLen;
-
-		if (call->cbAtrLen)
-			ret.cbAtrLen = cbAtrLen;
+		ret.cbAtrLen = cbAtrLen;
 	}
 
 	smartcard_trace_status_return(smartcard, &ret, FALSE);
@@ -1212,18 +1245,15 @@
 	LPWSTR mszReaderNames = NULL;
 	IRP* irp = operation->irp;
 	Status_Call* call = operation->call;
-	DWORD cbAtrLen;
-
-	if (call->cbAtrLen > 32)
-		call->cbAtrLen = 32;
+	DWORD cbAtrLen =
+	    32; /*  [MS-RDPESC] 2.2.2.18 Status_Call.cbAtrLen: Unused. MUST be ignored upon receipt. */
+	ZeroMemory(ret.pbAtr, 32);
 
 	if (call->fmszReaderNamesIsNULL)
 		cchReaderLen = 0;
 	else
 		cchReaderLen = SCARD_AUTOALLOCATE;
 
-	cbAtrLen = call->cbAtrLen;
-	ZeroMemory(ret.pbAtr, 32);
 	status = ret.ReturnCode =
 	    SCardStatusW(operation->hCard, call->fmszReaderNamesIsNULL ? NULL : (LPWSTR)&mszReaderNames,
 	                 &cchReaderLen, &ret.dwState, &ret.dwProtocol, (BYTE*)&ret.pbAtr, &cbAtrLen);
@@ -1240,9 +1270,7 @@
 #else
 		ret.cBytes = cchReaderLen;
 #endif
-
-		if (call->cbAtrLen)
-			ret.cbAtrLen = cbAtrLen;
+		ret.cbAtrLen = cbAtrLen;
 	}
 
 	smartcard_trace_status_return(smartcard, &ret, TRUE);
@@ -1304,18 +1332,17 @@
 	    SCardTransmit(operation->hCard, call->pioSendPci, call->pbSendBuffer, call->cbSendLength,
 	                  ret.pioRecvPci, ret.pbRecvBuffer, &(ret.cbRecvLength));
 	smartcard_trace_transmit_return(smartcard, &ret);
-	status = smartcard_pack_transmit_return(smartcard, irp->output, &ret);
-	free(call->pbSendBuffer);
-	free(ret.pbRecvBuffer);
-	free(call->pioSendPci);
-	free(call->pioRecvPci);
 
-	if (status)
+	if ((status = smartcard_pack_transmit_return(smartcard, irp->output, &ret)))
 	{
 		WLog_ERR(TAG, "smartcard_pack_transmit_return failed with error %" PRId32 "", status);
 		return status;
 	}
 
+	free(call->pbSendBuffer);
+	free(ret.pbRecvBuffer);
+	free(call->pioSendPci);
+	free(call->pioRecvPci);
 	return ret.ReturnCode;
 }
 
@@ -1438,9 +1465,7 @@
                                                 SMARTCARD_OPERATION* operation)
 {
 	Long_Call* call;
-	IRP* irp;
-	WINPR_UNUSED(smartcard);
-	irp = operation->irp;
+	IRP* irp = operation->irp;
 	operation->call = call = calloc(1, sizeof(Long_Call));
 
 	if (!call)
@@ -1461,7 +1486,6 @@
                                               SMARTCARD_OPERATION* operation)
 {
 	LONG status = SCARD_S_SUCCESS;
-	WINPR_UNUSED(operation);
 
 	if (!smartcard->StartedEvent)
 		smartcard->StartedEvent = SCardAccessStartedEvent();
@@ -1513,7 +1537,10 @@
 		states[i].dwCurrentState = call->rgReaderStates[i].Common.dwCurrentState;
 		states[i].dwEventState = call->rgReaderStates[i].Common.dwEventState;
 		states[i].cbAtr = call->rgReaderStates[i].Common.cbAtr;
-		CopyMemory(&(states[i].rgbAtr), &(call->rgReaderStates[i].Common.rgbAtr), 36);
+		CopyMemory(&(states[i].rgbAtr), &(call->rgReaderStates[i].Common.rgbAtr),
+		           sizeof(states[i].rgbAtr));
+		ZeroMemory(&(states[i].rgbAtr[states[i].cbAtr]),
+		           sizeof(states[i].rgbAtr) - states[i].cbAtr);
 	}
 
 	status = ret.ReturnCode =
@@ -1548,10 +1575,7 @@
 		ret.rgReaderStates = (ReaderState_Return*)calloc(ret.cReaders, sizeof(ReaderState_Return));
 
 	if (!ret.rgReaderStates)
-	{
-		free(states);
 		return STATUS_NO_MEMORY;
-	}
 
 	for (i = 0; i < ret.cReaders; i++)
 	{
@@ -1559,7 +1583,9 @@
 		ret.rgReaderStates[i].dwCurrentState = state->dwCurrentState;
 		ret.rgReaderStates[i].dwEventState = state->dwEventState;
 		ret.rgReaderStates[i].cbAtr = state->cbAtr;
-		CopyMemory(&(ret.rgReaderStates[i].rgbAtr), &(state->rgbAtr), 32);
+		CopyMemory(&(ret.rgReaderStates[i].rgbAtr), &(state->rgbAtr), ret.rgReaderStates[i].cbAtr);
+		ZeroMemory(&(ret.rgReaderStates[i].rgbAtr[ret.rgReaderStates[i].cbAtr]),
+		           sizeof((ret.rgReaderStates[i].rgbAtr)) - ret.rgReaderStates[i].cbAtr);
 	}
 
 	free(states);
@@ -1617,6 +1643,7 @@
 	Stream_Read_UINT32(irp->input, ioControlCode);      /* IoControlCode (4 bytes) */
 	Stream_Seek(irp->input, 20);                        /* Padding (20 bytes) */
 	operation->ioControlCode = ioControlCode;
+	operation->ioctlOutputBufferLength = outputBufferLength;
 
 	if (Stream_Length(irp->input) != (Stream_GetPosition(irp->input) + inputBufferLength))
 	{
@@ -2154,12 +2181,38 @@
 	outputBufferLength = Stream_Length(irp->output) - RDPDR_DEVICE_IO_RESPONSE_LENGTH - 4;
 	objectBufferLength = outputBufferLength - RDPDR_DEVICE_IO_RESPONSE_LENGTH;
 	Stream_SetPosition(irp->output, RDPDR_DEVICE_IO_RESPONSE_LENGTH);
-	/* Device Control Response */
-	Stream_Write_UINT32(irp->output, outputBufferLength);      /* OutputBufferLength (4 bytes) */
-	smartcard_pack_common_type_header(smartcard, irp->output); /* CommonTypeHeader (8 bytes) */
-	smartcard_pack_private_type_header(smartcard, irp->output,
-	                                   objectBufferLength); /* PrivateTypeHeader (8 bytes) */
-	Stream_Write_UINT32(irp->output, result);               /* Result (4 bytes) */
+
+	if (outputBufferLength > operation->ioctlOutputBufferLength)
+	{
+		irp->IoStatus = (UINT32)STATUS_BUFFER_TOO_SMALL;
+		Stream_Write_UINT32(irp->output, 0); /* OutputBufferLength (4 bytes) */
+		Stream_SealLength(irp->output);
+	}
+	else
+	{
+		LONG packResult = 0;
+		/* Device Control Response */
+		Stream_Write_UINT32(irp->output, outputBufferLength); /* OutputBufferLength (4 bytes) */
+
+		if ((packResult = smartcard_pack_common_type_header(
+		         smartcard, irp->output))) /* CommonTypeHeader (8 bytes) */
+		{
+			WLog_ERR(TAG, "smartcard_pack_common_type_header failed with error %" PRId32 "",
+			         packResult);
+			return packResult;
+		}
+
+		if ((packResult = smartcard_pack_private_type_header(
+		         smartcard, irp->output, objectBufferLength))) /* PrivateTypeHeader (8 bytes) */
+		{
+			WLog_ERR(TAG, "smartcard_pack_private_type_header failed with error %" PRId32 "",
+			         packResult);
+			return packResult;
+		}
+
+		Stream_Write_UINT32(irp->output, result); /* Result (4 bytes) */
+	}
+
 	Stream_SetPosition(irp->output, Stream_Length(irp->output));
 	return SCARD_S_SUCCESS;
 }
diff -urN channels/smartcard/client/smartcard_pack.c ../../informatimago/FreeRDP/channels/smartcard/client/smartcard_pack.c
--- channels/smartcard/client/smartcard_pack.c	2019-07-25 19:50:59.009888239 +0300
+++ ../../informatimago/FreeRDP/channels/smartcard/client/smartcard_pack.c	2019-07-25 20:11:23.059958346 +0300
@@ -34,7 +34,6 @@
 	UINT32 filler;
 	UINT8 endianness;
 	UINT16 commonHeaderLength;
-	WINPR_UNUSED(smartcard);
 
 	if (Stream_GetRemainingLength(s) < 8)
 	{
@@ -76,20 +75,19 @@
 	return SCARD_S_SUCCESS;
 }
 
-void smartcard_pack_common_type_header(SMARTCARD_DEVICE* smartcard, wStream* s)
+LONG smartcard_pack_common_type_header(SMARTCARD_DEVICE* smartcard, wStream* s)
 {
-	WINPR_UNUSED(smartcard);
 	Stream_Write_UINT8(s, 1);           /* Version (1 byte) */
 	Stream_Write_UINT8(s, 0x10);        /* Endianness (1 byte) */
 	Stream_Write_UINT16(s, 8);          /* CommonHeaderLength (2 bytes) */
 	Stream_Write_UINT32(s, 0xCCCCCCCC); /* Filler (4 bytes), should be 0xCCCCCCCC */
+	return SCARD_S_SUCCESS;
 }
 
 LONG smartcard_unpack_private_type_header(SMARTCARD_DEVICE* smartcard, wStream* s)
 {
 	UINT32 filler;
 	UINT32 objectBufferLength;
-	WINPR_UNUSED(smartcard);
 
 	if (Stream_GetRemainingLength(s) < 8)
 	{
@@ -118,19 +116,18 @@
 	return SCARD_S_SUCCESS;
 }
 
-void smartcard_pack_private_type_header(SMARTCARD_DEVICE* smartcard, wStream* s,
+LONG smartcard_pack_private_type_header(SMARTCARD_DEVICE* smartcard, wStream* s,
                                         UINT32 objectBufferLength)
 {
-	WINPR_UNUSED(smartcard);
 	Stream_Write_UINT32(s, objectBufferLength); /* ObjectBufferLength (4 bytes) */
 	Stream_Write_UINT32(s, 0x00000000);         /* Filler (4 bytes), should be 0x00000000 */
+	return SCARD_S_SUCCESS;
 }
 
 LONG smartcard_unpack_read_size_align(SMARTCARD_DEVICE* smartcard, wStream* s, UINT32 size,
                                       UINT32 alignment)
 {
 	UINT32 pad;
-	WINPR_UNUSED(smartcard);
 	pad = size;
 	size = (size + alignment - 1) & ~(alignment - 1);
 	pad = size - pad;
@@ -145,7 +142,6 @@
                                      UINT32 alignment)
 {
 	UINT32 pad;
-	WINPR_UNUSED(smartcard);
 	pad = size;
 	size = (size + alignment - 1) & ~(alignment - 1);
 	pad = size - pad;
@@ -167,8 +163,7 @@
 SCARDCONTEXT smartcard_scard_context_native_from_redir(SMARTCARD_DEVICE* smartcard,
                                                        REDIR_SCARDCONTEXT* context)
 {
-	SCARDCONTEXT hContext = { 0 };
-	WINPR_UNUSED(smartcard);
+	SCARDCONTEXT hContext = 0;
 
 	if ((context->cbContext != sizeof(ULONG_PTR)) && (context->cbContext != 0))
 	{
@@ -181,6 +176,8 @@
 
 	if (context->cbContext)
 		CopyMemory(&hContext, &(context->pbContext), context->cbContext);
+	else
+		ZeroMemory(&hContext, sizeof(ULONG_PTR));
 
 	return hContext;
 }
@@ -188,7 +185,6 @@
 void smartcard_scard_context_native_to_redir(SMARTCARD_DEVICE* smartcard,
                                              REDIR_SCARDCONTEXT* context, SCARDCONTEXT hContext)
 {
-	WINPR_UNUSED(smartcard);
 	ZeroMemory(context, sizeof(REDIR_SCARDCONTEXT));
 	context->cbContext = sizeof(ULONG_PTR);
 	CopyMemory(&(context->pbContext), &hContext, context->cbContext);
@@ -198,7 +194,6 @@
                                                      REDIR_SCARDHANDLE* handle)
 {
 	SCARDHANDLE hCard = 0;
-	WINPR_UNUSED(smartcard);
 
 	if (handle->cbHandle != sizeof(ULONG_PTR))
 	{
@@ -218,7 +213,6 @@
 void smartcard_scard_handle_native_to_redir(SMARTCARD_DEVICE* smartcard, REDIR_SCARDHANDLE* handle,
                                             SCARDHANDLE hCard)
 {
-	WINPR_UNUSED(smartcard);
 	ZeroMemory(handle, sizeof(REDIR_SCARDHANDLE));
 	handle->cbHandle = sizeof(ULONG_PTR);
 	CopyMemory(&(handle->pbHandle), &hCard, handle->cbHandle);
@@ -228,7 +222,6 @@
                                           REDIR_SCARDCONTEXT* context)
 {
 	UINT32 pbContextNdrPtr;
-	WINPR_UNUSED(smartcard);
 	ZeroMemory(context, sizeof(REDIR_SCARDCONTEXT));
 
 	if (Stream_GetRemainingLength(s) < 4)
@@ -279,7 +272,6 @@
                                         REDIR_SCARDCONTEXT* context)
 {
 	UINT32 pbContextNdrPtr;
-	WINPR_UNUSED(smartcard);
 	pbContextNdrPtr = (context->cbContext) ? 0x00020001 : 0;
 	Stream_Write_UINT32(s, context->cbContext); /* cbContext (4 bytes) */
 	Stream_Write_UINT32(s, pbContextNdrPtr);    /* pbContextNdrPtr (4 bytes) */
@@ -290,7 +282,7 @@
                                               REDIR_SCARDCONTEXT* context)
 {
 	UINT32 length;
-	WINPR_UNUSED(smartcard);
+	ZeroMemory(&(context->pbContext), sizeof(context->pbContext));
 
 	if (context->cbContext == 0)
 		return SCARD_S_SUCCESS;
@@ -324,10 +316,17 @@
 		return STATUS_BUFFER_TOO_SMALL;
 	}
 
-	if (context->cbContext)
+	ZeroMemory(&(context->pbContext),
+	           sizeof(context->pbContext)); /*  pbContext may be >  cbContext */
+
+	if (context->cbContext > 0)
+	{
 		Stream_Read(s, &(context->pbContext), context->cbContext);
+	}
 	else
+	{
 		ZeroMemory(&(context->pbContext), sizeof(context->pbContext));
+	}
 
 	return SCARD_S_SUCCESS;
 }
@@ -335,11 +334,9 @@
 LONG smartcard_pack_redir_scard_context_ref(SMARTCARD_DEVICE* smartcard, wStream* s,
                                             REDIR_SCARDCONTEXT* context)
 {
-	WINPR_UNUSED(smartcard);
-	Stream_Write_UINT32(s, context->cbContext); /* Length (4 bytes) */
-
-	if (context->cbContext)
+	if (context->cbContext > 0)
 	{
+		Stream_Write_UINT32(s, context->cbContext); /* Length (4 bytes) */
 		Stream_Write(s, &(context->pbContext), context->cbContext);
 	}
 
@@ -350,7 +347,6 @@
                                          REDIR_SCARDHANDLE* handle)
 {
 	UINT32 pbHandleNdrPtr;
-	WINPR_UNUSED(smartcard);
 	ZeroMemory(handle, sizeof(REDIR_SCARDHANDLE));
 
 	if (Stream_GetRemainingLength(s) < 4)
@@ -376,7 +372,6 @@
                                        REDIR_SCARDHANDLE* handle)
 {
 	UINT32 pbHandleNdrPtr;
-	WINPR_UNUSED(smartcard);
 	pbHandleNdrPtr = (handle->cbHandle) ? 0x00020002 : 0;
 	Stream_Write_UINT32(s, handle->cbHandle); /* cbHandle (4 bytes) */
 	Stream_Write_UINT32(s, pbHandleNdrPtr);   /* pbHandleNdrPtr (4 bytes) */
@@ -387,7 +382,6 @@
                                              REDIR_SCARDHANDLE* handle)
 {
 	UINT32 length;
-	WINPR_UNUSED(smartcard);
 
 	if (Stream_GetRemainingLength(s) < 4)
 	{
@@ -427,11 +421,11 @@
 LONG smartcard_pack_redir_scard_handle_ref(SMARTCARD_DEVICE* smartcard, wStream* s,
                                            REDIR_SCARDHANDLE* handle)
 {
-	WINPR_UNUSED(smartcard);
-	Stream_Write_UINT32(s, handle->cbHandle); /* Length (4 bytes) */
-
 	if (handle->cbHandle)
+	{
+		Stream_Write_UINT32(s, handle->cbHandle); /* Length (4 bytes) */
 		Stream_Write(s, &(handle->pbHandle), handle->cbHandle);
+	}
 
 	return SCARD_S_SUCCESS;
 }
@@ -439,8 +433,6 @@
 LONG smartcard_unpack_establish_context_call(SMARTCARD_DEVICE* smartcard, wStream* s,
                                              EstablishContext_Call* call)
 {
-	WINPR_UNUSED(smartcard);
-
 	if (Stream_GetRemainingLength(s) < 4)
 	{
 		WLog_WARN(TAG, "EstablishContext_Call is too short: Actual: %" PRIuz ", Expected: 4",
@@ -453,10 +445,8 @@
 }
 
 void smartcard_trace_establish_context_call(SMARTCARD_DEVICE* smartcard,
-                                            const EstablishContext_Call* call)
+                                            EstablishContext_Call* call)
 {
-	WINPR_UNUSED(smartcard);
-
 	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
 
@@ -485,10 +475,9 @@
 }
 
 void smartcard_trace_establish_context_return(SMARTCARD_DEVICE* smartcard,
-                                              const EstablishContext_Return* ret)
+                                              EstablishContext_Return* ret)
 {
 	BYTE* pb;
-	WINPR_UNUSED(smartcard);
 
 	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
@@ -531,11 +520,9 @@
 	return status;
 }
 
-void smartcard_trace_context_call(SMARTCARD_DEVICE* smartcard, const Context_Call* call,
-                                  const char* name)
+void smartcard_trace_context_call(SMARTCARD_DEVICE* smartcard, Context_Call* call, const char* name)
 {
 	BYTE* pb;
-	WINPR_UNUSED(smartcard);
 
 	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
@@ -559,11 +546,8 @@
 	WLog_DBG(TAG, "}");
 }
 
-void smartcard_trace_long_return(SMARTCARD_DEVICE* smartcard, const Long_Return* ret,
-                                 const char* name)
+void smartcard_trace_long_return(SMARTCARD_DEVICE* smartcard, Long_Return* ret, const char* name)
 {
-	WINPR_UNUSED(smartcard);
-
 	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
 
@@ -599,10 +583,9 @@
 }
 
 void smartcard_trace_list_reader_groups_call(SMARTCARD_DEVICE* smartcard,
-                                             const ListReaderGroups_Call* call, BOOL unicode)
+                                             ListReaderGroups_Call* call, BOOL unicode)
 {
 	BYTE* pb;
-	WINPR_UNUSED(smartcard);
 
 	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
@@ -652,41 +635,69 @@
 	return SCARD_S_SUCCESS;
 }
 
-void smartcard_trace_list_reader_groups_return(SMARTCARD_DEVICE* smartcard,
-                                               const ListReaderGroups_Return* ret, BOOL unicode)
+static char* msz_to_csv(BYTE* msz, ULONG byteCount, BOOL unicode)
 {
-	int index;
-	int length;
+	int index = 0;
+	int length = 0;
 	char* mszA = NULL;
-	WINPR_UNUSED(smartcard);
 
-	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
-		return;
+	if (msz == NULL)
+	{
+		return NULL;
+	}
 
 	if (unicode)
 	{
-		length = ret->cBytes / 2;
-		ConvertFromUnicode(CP_UTF8, 0, (WCHAR*)ret->msz, length, &mszA, 0, NULL, NULL);
+		length = byteCount / 2;
+		ConvertFromUnicode(CP_UTF8, 0, (WCHAR*)msz, length, &mszA, 0, NULL, NULL);
+
+		if (mszA == NULL)
+		{
+			goto out_of_memory;
+		}
 	}
 	else
 	{
-		length = ret->cBytes;
-		mszA = (char*)malloc(length);
-		CopyMemory(mszA, ret->msz, ret->cBytes);
+		length = byteCount;
+		mszA = (char*)malloc(1 + length);
+
+		if (mszA == NULL)
+		{
+			goto out_of_memory;
+		}
+
+		CopyMemory(mszA, msz, length);
+		mszA[length] = '\0';
 	}
 
-	for (index = 0; index < length - 2; index++)
+	for (index = 0; index < length; index++)
 	{
 		if (mszA[index] == '\0')
+		{
 			mszA[index] = ',';
+		}
 	}
 
-	WLog_DBG(TAG, "ListReaderGroups%s_Return {", unicode ? "W" : "A");
-	WLog_DBG(TAG, "ReturnCode: %s (0x%08" PRIx32 ")", SCardGetErrorString(ret->ReturnCode),
-	         ret->ReturnCode);
-	WLog_DBG(TAG, "cBytes: %" PRIu32 " msz: %s", ret->cBytes, mszA);
-	WLog_DBG(TAG, "}");
-	free(mszA);
+	return mszA;
+out_of_memory:
+	WLog_ERR(TAG, "Out of memory,  cannot allocate %lu bytes", 1 + length);
+	return NULL;
+}
+
+void smartcard_trace_list_reader_groups_return(SMARTCARD_DEVICE* smartcard,
+                                               ListReaderGroups_Return* ret, BOOL unicode)
+{
+	if (WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
+	{
+		char* mszA = msz_to_csv(ret->msz, ret->cBytes, unicode);
+		/*  There's no need to test for mszA == NULL,  since %s will format it as (null) */
+		WLog_DBG(TAG, "ListReaderGroups%s_Return {", unicode ? "W" : "A");
+		WLog_DBG(TAG, "ReturnCode: %s (0x%08" PRIx32 ")", SCardGetErrorString(ret->ReturnCode),
+		         ret->ReturnCode);
+		WLog_DBG(TAG, "cBytes: %" PRIu32 " msz: %s", ret->cBytes, mszA);
+		WLog_DBG(TAG, "}");
+		free(mszA);
+	}
 }
 
 LONG smartcard_unpack_list_readers_call(SMARTCARD_DEVICE* smartcard, wStream* s,
@@ -766,44 +777,38 @@
 	return SCARD_S_SUCCESS;
 }
 
-void smartcard_trace_list_readers_call(SMARTCARD_DEVICE* smartcard, const ListReaders_Call* call,
+void smartcard_trace_list_readers_call(SMARTCARD_DEVICE* smartcard, ListReaders_Call* call,
                                        BOOL unicode)
 {
-	BYTE* pb;
-	char* mszGroupsA = NULL;
-	WINPR_UNUSED(smartcard);
-
-	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
-		return;
-
-	if (unicode)
-		ConvertFromUnicode(CP_UTF8, 0, (WCHAR*)call->mszGroups, call->cBytes / 2, &mszGroupsA, 0,
-		                   NULL, NULL);
-
-	WLog_DBG(TAG, "ListReaders%s_Call {", unicode ? "W" : "A");
-	pb = (BYTE*)&(call->hContext.pbContext);
-
-	if (call->hContext.cbContext > 4)
+	if (WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 	{
-		WLog_DBG(TAG,
-		         "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8
-		         "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
-		         pb[0], pb[1], pb[2], pb[3], pb[4], pb[5], pb[6], pb[7], call->hContext.cbContext);
-	}
-	else
-	{
-		WLog_DBG(TAG, "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
-		         pb[0], pb[1], pb[2], pb[3], call->hContext.cbContext);
-	}
-
-	WLog_DBG(TAG,
-	         "cBytes: %" PRIu32 " mszGroups: %s fmszReadersIsNULL: %" PRId32
-	         " cchReaders: 0x%08" PRIX32 "",
-	         call->cBytes, mszGroupsA, call->fmszReadersIsNULL, call->cchReaders);
-	WLog_DBG(TAG, "}");
+		BYTE* pb = (BYTE*)&(call->hContext.pbContext);
+		char* mszGroupsA = msz_to_csv(call->mszGroups, call->cBytes, unicode);
+		/*  There's no need to test for mszGroupsA == NULL,  since %s will format it as (null) */
+		WLog_DBG(TAG, "ListReaders%s_Call {", unicode ? "W" : "A");
+
+		if (call->hContext.cbContext > 4)
+		{
+			WLog_DBG(TAG,
+			         "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8
+			         "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+			         pb[0], pb[1], pb[2], pb[3], pb[4], pb[5], pb[6], pb[7],
+			         call->hContext.cbContext);
+		}
+		else
+		{
+			WLog_DBG(TAG,
+			         "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+			         pb[0], pb[1], pb[2], pb[3], call->hContext.cbContext);
+		}
 
-	if (unicode)
+		WLog_DBG(TAG,
+		         "cBytes: %" PRIu32 " mszGroups: %s fmszReadersIsNULL: %" PRId32
+		         " cchReaders: 0x%08" PRIX32 "",
+		         call->cBytes, mszGroupsA, call->fmszReadersIsNULL, call->cchReaders);
+		WLog_DBG(TAG, "}");
 		free(mszGroupsA);
+	}
 }
 
 LONG smartcard_pack_list_readers_return(SMARTCARD_DEVICE* smartcard, wStream* s,
@@ -845,60 +850,25 @@
 	return SCARD_S_SUCCESS;
 }
 
-void smartcard_trace_list_readers_return(SMARTCARD_DEVICE* smartcard, const ListReaders_Return* ret,
+void smartcard_trace_list_readers_return(SMARTCARD_DEVICE* smartcard, ListReaders_Return* ret,
                                          BOOL unicode)
 {
-	size_t index;
-	size_t length;
-	char* mszA = NULL;
-	WINPR_UNUSED(smartcard);
-
-	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
-		return;
-
-	WLog_DBG(TAG, "ListReaders%s_Return {", unicode ? "W" : "A");
-	WLog_DBG(TAG, "ReturnCode: %s (0x%08" PRIX32 ")", SCardGetErrorString(ret->ReturnCode),
-	         ret->ReturnCode);
-
-	if (ret->ReturnCode != SCARD_S_SUCCESS)
+	if (WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 	{
-		WLog_DBG(TAG, "}");
-		return;
-	}
-
-	if (unicode)
-	{
-		length = ret->cBytes / 2;
-
-		if (ConvertFromUnicode(CP_UTF8, 0, (WCHAR*)ret->msz, (int)length, &mszA, 0, NULL, NULL) < 1)
-		{
-			WLog_ERR(TAG, "ConvertFromUnicode failed");
-			return;
+		WLog_DBG(TAG, "ListReaders%s_Return {", unicode ? "W" : "A");
+		WLog_DBG(TAG, "ReturnCode: %s (0x%08" PRIX32 ")", SCardGetErrorString(ret->ReturnCode),
+		         ret->ReturnCode);
+
+		if (ret->ReturnCode == SCARD_S_SUCCESS)
+		{
+			char* mszA = msz_to_csv(ret->msz, ret->cBytes, unicode);
+			/*  There's no need to test for mszA == NULL,  since %s will format it as (null) */
+			WLog_DBG(TAG, "cBytes: %" PRIu32 " msz: %s", ret->cBytes, mszA);
+			free(mszA);
 		}
-	}
-	else
-	{
-		length = ret->cBytes;
-		mszA = (char*)malloc(length);
 
-		if (!mszA)
-		{
-			WLog_ERR(TAG, "malloc failed!");
-			return;
-		}
-
-		CopyMemory(mszA, ret->msz, ret->cBytes);
-	}
-
-	for (index = 0; index < length - 1; index++)
-	{
-		if (mszA[index] == '\0')
-			mszA[index] = ',';
+		WLog_DBG(TAG, "}");
 	}
-
-	WLog_DBG(TAG, "cBytes: %" PRIu32 " msz: %s", ret->cBytes, mszA);
-	WLog_DBG(TAG, "}");
-	free(mszA);
 }
 
 LONG smartcard_unpack_connect_common(SMARTCARD_DEVICE* smartcard, wStream* s,
@@ -966,10 +936,9 @@
 	return status;
 }
 
-void smartcard_trace_connect_a_call(SMARTCARD_DEVICE* smartcard, const ConnectA_Call* call)
+void smartcard_trace_connect_a_call(SMARTCARD_DEVICE* smartcard, ConnectA_Call* call)
 {
 	BYTE* pb;
-	WINPR_UNUSED(smartcard);
 
 	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
@@ -1043,11 +1012,10 @@
 	return status;
 }
 
-void smartcard_trace_connect_w_call(SMARTCARD_DEVICE* smartcard, const ConnectW_Call* call)
+void smartcard_trace_connect_w_call(SMARTCARD_DEVICE* smartcard, ConnectW_Call* call)
 {
 	BYTE* pb;
 	char* szReaderA = NULL;
-	WINPR_UNUSED(smartcard);
 
 	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
@@ -1112,10 +1080,9 @@
 	return status;
 }
 
-void smartcard_trace_connect_return(SMARTCARD_DEVICE* smartcard, const Connect_Return* ret)
+void smartcard_trace_connect_return(SMARTCARD_DEVICE* smartcard, Connect_Return* ret)
 {
 	BYTE* pb;
-	WINPR_UNUSED(smartcard);
 
 	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
@@ -1198,10 +1165,9 @@
 	return status;
 }
 
-void smartcard_trace_reconnect_call(SMARTCARD_DEVICE* smartcard, const Reconnect_Call* call)
+void smartcard_trace_reconnect_call(SMARTCARD_DEVICE* smartcard, Reconnect_Call* call)
 {
 	BYTE* pb;
-	WINPR_UNUSED(smartcard);
 
 	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
@@ -1248,15 +1214,12 @@
 
 LONG smartcard_pack_reconnect_return(SMARTCARD_DEVICE* smartcard, wStream* s, Reconnect_Return* ret)
 {
-	WINPR_UNUSED(smartcard);
 	Stream_Write_UINT32(s, ret->dwActiveProtocol); /* dwActiveProtocol (4 bytes) */
 	return SCARD_S_SUCCESS;
 }
 
-void smartcard_trace_reconnect_return(SMARTCARD_DEVICE* smartcard, const Reconnect_Return* ret)
+void smartcard_trace_reconnect_return(SMARTCARD_DEVICE* smartcard, Reconnect_Return* ret)
 {
-	WINPR_UNUSED(smartcard);
-
 	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
 
@@ -1312,7 +1275,6 @@
                                                 HCardAndDisposition_Call* call, const char* name)
 {
 	BYTE* pb;
-	WINPR_UNUSED(smartcard);
 
 	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
@@ -1484,14 +1446,13 @@
 }
 
 void smartcard_trace_get_status_change_a_call(SMARTCARD_DEVICE* smartcard,
-                                              const GetStatusChangeA_Call* call)
+                                              GetStatusChangeA_Call* call)
 {
 	BYTE* pb;
 	UINT32 index;
 	char* szEventState;
 	char* szCurrentState;
 	LPSCARD_READERSTATEA readerState;
-	WINPR_UNUSED(smartcard);
 
 	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
@@ -1522,10 +1483,11 @@
 		         readerState->szReader, readerState->cbAtr);
 		szCurrentState = SCardGetReaderStateString(readerState->dwCurrentState);
 		szEventState = SCardGetReaderStateString(readerState->dwEventState);
-		WLog_DBG(TAG, "\t[%" PRIu32 "]: dwCurrentState: %s (0x%08" PRIX32 ")", index,
-		         szCurrentState, readerState->dwCurrentState);
-		WLog_DBG(TAG, "\t[%" PRIu32 "]: dwEventState: %s (0x%08" PRIX32 ")", index, szEventState,
-		         readerState->dwEventState);
+		WLog_DBG(TAG, "\t[%" PRIu32 "]: dwCurrentState: %s (activity Count: %d) (0x%08" PRIX32 ")",
+		         index, szCurrentState, readerState->dwEventState >> 16,
+		         readerState->dwCurrentState);
+		WLog_DBG(TAG, "\t[%" PRIu32 "]: dwEventState: %s (activity Count: %d) (0x%08" PRIX32 ")",
+		         index, szEventState, readerState->dwEventState >> 16, readerState->dwEventState);
 		free(szCurrentState);
 		free(szEventState);
 	}
@@ -1662,7 +1624,6 @@
 	char* szEventState;
 	char* szCurrentState;
 	LPSCARD_READERSTATEW readerState;
-	WINPR_UNUSED(smartcard);
 
 	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
@@ -1695,10 +1656,11 @@
 		         readerState->cbAtr);
 		szCurrentState = SCardGetReaderStateString(readerState->dwCurrentState);
 		szEventState = SCardGetReaderStateString(readerState->dwEventState);
-		WLog_DBG(TAG, "\t[%" PRIu32 "]: dwCurrentState: %s (0x%08" PRIX32 ")", index,
-		         szCurrentState, readerState->dwCurrentState);
-		WLog_DBG(TAG, "\t[%" PRIu32 "]: dwEventState: %s (0x%08" PRIX32 ")", index, szEventState,
-		         readerState->dwEventState);
+		WLog_DBG(TAG, "\t[%" PRIu32 "]: dwCurrentState: %s (activity Count: %d) (0x%08" PRIX32 ")",
+		         index, szCurrentState, readerState->dwEventState >> 16,
+		         readerState->dwCurrentState);
+		WLog_DBG(TAG, "\t[%" PRIu32 "]: dwEventState: %s (activity Count: %d) (0x%08" PRIX32 ")",
+		         index, szEventState, readerState->dwEventState >> 16, readerState->dwEventState);
 		free(szCurrentState);
 		free(szEventState);
 		free(szReaderA);
@@ -1712,7 +1674,6 @@
 {
 	UINT32 index;
 	ReaderState_Return* rgReaderState;
-	WINPR_UNUSED(smartcard);
 	Stream_Write_UINT32(s, ret->cReaders); /* cReaders (4 bytes) */
 	Stream_Write_UINT32(s, 0x00020100);    /* rgReaderStatesNdrPtr (4 bytes) */
 	Stream_Write_UINT32(s, ret->cReaders); /* rgReaderStatesNdrCount (4 bytes) */
@@ -1723,22 +1684,22 @@
 		Stream_Write_UINT32(s, rgReaderState->dwCurrentState); /* dwCurrentState (4 bytes) */
 		Stream_Write_UINT32(s, rgReaderState->dwEventState);   /* dwEventState (4 bytes) */
 		Stream_Write_UINT32(s, rgReaderState->cbAtr);          /* cbAtr (4 bytes) */
-		Stream_Write(s, rgReaderState->rgbAtr, 32);            /* rgbAtr [0..32] (32 bytes) */
-		Stream_Zero(s, 4);                                     /* rgbAtr [32..36] (32 bytes) */
+		Stream_Write(s, rgReaderState->rgbAtr,
+		             rgReaderState->cbAtr);        /* rgbAtr [0..cbAtr] (cbAtr bytes) */
+		Stream_Zero(s, 36 - rgReaderState->cbAtr); /* rgbAtr [cbAtr..36] (36 - cbAtr bytes) */
 	}
 
 	return SCARD_S_SUCCESS;
 }
 
 void smartcard_trace_get_status_change_return(SMARTCARD_DEVICE* smartcard,
-                                              const GetStatusChange_Return* ret, BOOL unicode)
+                                              GetStatusChange_Return* ret, BOOL unicode)
 {
 	UINT32 index;
 	char* rgbAtr;
 	char* szEventState;
 	char* szCurrentState;
 	ReaderState_Return* rgReaderState;
-	WINPR_UNUSED(smartcard);
 
 	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
@@ -1754,9 +1715,11 @@
 		szCurrentState = SCardGetReaderStateString(rgReaderState->dwCurrentState);
 		szEventState = SCardGetReaderStateString(rgReaderState->dwEventState);
 		rgbAtr = winpr_BinToHexString((BYTE*)&(rgReaderState->rgbAtr), rgReaderState->cbAtr, FALSE);
-		WLog_DBG(TAG, "\t[%" PRIu32 "]: dwCurrentState: %s (0x%08" PRIX32 ")", index,
-		         szCurrentState, rgReaderState->dwCurrentState);
-		WLog_DBG(TAG, "\t[%" PRIu32 "]: dwEventState: %s (0x%08" PRIX32 ")", index, szEventState,
+		WLog_DBG(TAG, "\t[%" PRIu32 "]: dwCurrentState: %s (activity Count: %d) (0x%08" PRIX32 ")",
+		         index, szCurrentState, rgReaderState->dwEventState >> 16,
+		         rgReaderState->dwCurrentState);
+		WLog_DBG(TAG, "\t[%" PRIu32 "]: dwEventState: %s (activity Count: %d) (0x%08" PRIX32 ")",
+		         index, szEventState, rgReaderState->dwEventState >> 16,
 		         rgReaderState->dwEventState);
 		WLog_DBG(TAG, "\t[%" PRIu32 "]: cbAtr: %" PRIu32 " rgbAtr: %s", index, rgReaderState->cbAtr,
 		         rgbAtr);
@@ -1863,10 +1826,9 @@
 	return status;
 }
 
-void smartcard_trace_status_call(SMARTCARD_DEVICE* smartcard, const Status_Call* call, BOOL unicode)
+void smartcard_trace_status_call(SMARTCARD_DEVICE* smartcard, Status_Call* call, BOOL unicode)
 {
 	BYTE* pb;
-	WINPR_UNUSED(smartcard);
 
 	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
@@ -1937,74 +1899,26 @@
 	return status;
 }
 
-void smartcard_trace_status_return(SMARTCARD_DEVICE* smartcard, const Status_Return* ret,
-                                   BOOL unicode)
+void smartcard_trace_status_return(SMARTCARD_DEVICE* smartcard, Status_Return* ret, BOOL unicode)
 {
-	size_t index;
-	size_t length;
-	char* pbAtr = NULL;
-	char* mszReaderNamesA = NULL;
-	WINPR_UNUSED(smartcard);
-
-	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
-		return;
-
-	if (ret->mszReaderNames)
-	{
-		if (unicode)
-		{
-			length = ret->cBytes / 2;
-
-			if (ConvertFromUnicode(CP_UTF8, 0, (WCHAR*)ret->mszReaderNames, (int)length,
-			                       &mszReaderNamesA, 0, NULL, NULL) < 1)
-			{
-				WLog_ERR(TAG, "ConvertFromUnicode failed");
-				return;
-			}
-		}
-		else
-		{
-			length = (int)ret->cBytes;
-			mszReaderNamesA = (char*)malloc(length);
-
-			if (!mszReaderNamesA)
-			{
-				WLog_ERR(TAG, "malloc failed!");
-				return;
-			}
-
-			CopyMemory(mszReaderNamesA, ret->mszReaderNames, ret->cBytes);
-		}
-	}
-	else
-		length = 0;
-
-	if (length > 2)
-	{
-		for (index = 0; index < length - 2; index++)
-		{
-			if (mszReaderNamesA[index] == '\0')
-				mszReaderNamesA[index] = ',';
-		}
-	}
-
-	pbAtr = winpr_BinToHexString(ret->pbAtr, ret->cbAtrLen, FALSE);
-	WLog_DBG(TAG, "Status%s_Return {", unicode ? "W" : "A");
-	WLog_DBG(TAG, "ReturnCode: %s (0x%08" PRIX32 ")", SCardGetErrorString(ret->ReturnCode),
-	         ret->ReturnCode);
-	WLog_DBG(TAG, "dwState: %s (0x%08" PRIX32 ") dwProtocol: %s (0x%08" PRIX32 ")",
-	         SCardGetCardStateString(ret->dwState), ret->dwState,
-	         SCardGetProtocolString(ret->dwProtocol), ret->dwProtocol);
-
-	if (mszReaderNamesA)
+	if (WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 	{
+		char* mszReaderNamesA = msz_to_csv(ret->mszReaderNames, ret->cBytes, unicode);
+		/*  There's no need to test for mszReaderNamesA == NULL,  since %s will format it as (null)
+		 */
+		char* pbAtr = winpr_BinToHexString(ret->pbAtr, ret->cbAtrLen, FALSE);
+		WLog_DBG(TAG, "Status%s_Return {", unicode ? "W" : "A");
+		WLog_DBG(TAG, "ReturnCode: %s (0x%08" PRIX32 ")", SCardGetErrorString(ret->ReturnCode),
+		         ret->ReturnCode);
+		WLog_DBG(TAG, "dwState: %s (0x%08" PRIX32 ") dwProtocol: %s (0x%08" PRIX32 ")",
+		         SCardGetCardStateString(ret->dwState), ret->dwState,
+		         SCardGetProtocolString(ret->dwProtocol), ret->dwProtocol);
 		WLog_DBG(TAG, "cBytes: %" PRIu32 " mszReaderNames: %s", ret->cBytes, mszReaderNamesA);
+		WLog_DBG(TAG, "cbAtrLen: %" PRIu32 " pbAtr: %s", ret->cbAtrLen, pbAtr);
+		WLog_DBG(TAG, "}");
+		free(mszReaderNamesA);
+		free(pbAtr);
 	}
-
-	WLog_DBG(TAG, "cbAtrLen: %" PRIu32 " pbAtr: %s", ret->cbAtrLen, pbAtr);
-	WLog_DBG(TAG, "}");
-	free(mszReaderNamesA);
-	free(pbAtr);
 }
 
 LONG smartcard_unpack_get_attrib_call(SMARTCARD_DEVICE* smartcard, wStream* s, GetAttrib_Call* call)
@@ -2050,7 +1964,6 @@
 void smartcard_trace_get_attrib_call(SMARTCARD_DEVICE* smartcard, GetAttrib_Call* call)
 {
 	BYTE* pb;
-	WINPR_UNUSED(smartcard);
 
 	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
@@ -2119,11 +2032,9 @@
 	return status;
 }
 
-void smartcard_trace_get_attrib_return(SMARTCARD_DEVICE* smartcard, const GetAttrib_Return* ret,
+void smartcard_trace_get_attrib_return(SMARTCARD_DEVICE* smartcard, GetAttrib_Return* ret,
                                        DWORD dwAttrId)
 {
-	WINPR_UNUSED(smartcard);
-
 	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
 
@@ -2222,10 +2133,9 @@
 	return SCARD_S_SUCCESS;
 }
 
-void smartcard_trace_control_call(SMARTCARD_DEVICE* smartcard, const Control_Call* call)
+void smartcard_trace_control_call(SMARTCARD_DEVICE* smartcard, Control_Call* call)
 {
 	BYTE* pb;
-	WINPR_UNUSED(smartcard);
 
 	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
@@ -2309,10 +2219,8 @@
 	return SCARD_S_SUCCESS;
 }
 
-void smartcard_trace_control_return(SMARTCARD_DEVICE* smartcard, const Control_Return* ret)
+void smartcard_trace_control_return(SMARTCARD_DEVICE* smartcard, Control_Return* ret)
 {
-	WINPR_UNUSED(smartcard);
-
 	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
 
@@ -2597,12 +2505,11 @@
 	return SCARD_S_SUCCESS;
 }
 
-void smartcard_trace_transmit_call(SMARTCARD_DEVICE* smartcard, const Transmit_Call* call)
+void smartcard_trace_transmit_call(SMARTCARD_DEVICE* smartcard, Transmit_Call* call)
 {
 	BYTE* pb;
 	UINT32 cbExtraBytes;
 	BYTE* pbExtraBytes;
-	WINPR_UNUSED(smartcard);
 
 	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
@@ -2763,11 +2670,10 @@
 	return SCARD_S_SUCCESS;
 }
 
-void smartcard_trace_transmit_return(SMARTCARD_DEVICE* smartcard, const Transmit_Return* ret)
+void smartcard_trace_transmit_return(SMARTCARD_DEVICE* smartcard, Transmit_Return* ret)
 {
 	UINT32 cbExtraBytes;
 	BYTE* pbExtraBytes;
-	WINPR_UNUSED(smartcard);
 
 	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
@@ -2940,8 +2846,9 @@
 			Stream_Read_UINT32(s, readerState->dwCurrentState); /* dwCurrentState (4 bytes) */
 			Stream_Read_UINT32(s, readerState->dwEventState);   /* dwEventState (4 bytes) */
 			Stream_Read_UINT32(s, readerState->cbAtr);          /* cbAtr (4 bytes) */
-			Stream_Read(s, readerState->rgbAtr, 32);            /* rgbAtr [0..32] (32 bytes) */
-			Stream_Seek(s, 4);                                  /* rgbAtr [32..36] (4 bytes) */
+			Stream_Read(s, readerState->rgbAtr,
+			            readerState->cbAtr);         /* rgbAtr [0..cbAtr] (cbAtr bytes) */
+			Stream_Seek(s, 36 - readerState->cbAtr); /* rgbAtr [cbAtr..36] (36 - cbAtr bytes) */
 		}
 
 		for (index = 0; index < call->cReaders; index++)
@@ -2990,7 +2897,7 @@
 }
 
 void smartcard_trace_locate_cards_by_atr_a_call(SMARTCARD_DEVICE* smartcard,
-                                                const LocateCardsByATRA_Call* call)
+                                                LocateCardsByATRA_Call* call)
 {
 	BYTE* pb;
 	UINT32 index;
@@ -2998,7 +2905,6 @@
 	char* szCurrentState;
 	char* rgbAtr;
 	LPSCARD_READERSTATEA readerState;
-	WINPR_UNUSED(smartcard);
 
 	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
@@ -3027,10 +2933,11 @@
 		szCurrentState = SCardGetReaderStateString(readerState->dwCurrentState);
 		szEventState = SCardGetReaderStateString(readerState->dwEventState);
 		rgbAtr = winpr_BinToHexString((BYTE*)&(readerState->rgbAtr), readerState->cbAtr, FALSE);
-		WLog_DBG(TAG, "\t[%" PRIu32 "]: dwCurrentState: %s (0x%08" PRIX32 ")", index,
-		         szCurrentState, readerState->dwCurrentState);
-		WLog_DBG(TAG, "\t[%" PRIu32 "]: dwEventState: %s (0x%08" PRIX32 ")", index, szEventState,
-		         readerState->dwEventState);
+		WLog_DBG(TAG, "\t[%" PRIu32 "]: dwCurrentState: %s (activity Count: %d) (0x%08" PRIX32 ")",
+		         index, szCurrentState, readerState->dwEventState >> 16,
+		         readerState->dwCurrentState);
+		WLog_DBG(TAG, "\t[%" PRIu32 "]: dwEventState: %s (activity Count: %d) (0x%08" PRIX32 ")",
+		         index, szEventState, readerState->dwEventState >> 16, readerState->dwEventState);
 
 		if (rgbAtr)
 		{
diff -urN channels/smartcard/client/smartcard_pack.h ../../informatimago/FreeRDP/channels/smartcard/client/smartcard_pack.h
--- channels/smartcard/client/smartcard_pack.h	2019-07-25 19:50:59.021888298 +0300
+++ ../../informatimago/FreeRDP/channels/smartcard/client/smartcard_pack.h	2019-07-25 20:11:23.071958406 +0300
@@ -452,10 +452,10 @@
                                             SCARDHANDLE hCard);
 
 LONG smartcard_unpack_common_type_header(SMARTCARD_DEVICE* smartcard, wStream* s);
-void smartcard_pack_common_type_header(SMARTCARD_DEVICE* smartcard, wStream* s);
+LONG smartcard_pack_common_type_header(SMARTCARD_DEVICE* smartcard, wStream* s);
 
 LONG smartcard_unpack_private_type_header(SMARTCARD_DEVICE* smartcard, wStream* s);
-void smartcard_pack_private_type_header(SMARTCARD_DEVICE* smartcard, wStream* s,
+LONG smartcard_pack_private_type_header(SMARTCARD_DEVICE* smartcard, wStream* s,
                                         UINT32 objectBufferLength);
 
 LONG smartcard_unpack_redir_scard_context(SMARTCARD_DEVICE* smartcard, wStream* s,
@@ -481,55 +481,54 @@
 LONG smartcard_unpack_establish_context_call(SMARTCARD_DEVICE* smartcard, wStream* s,
                                              EstablishContext_Call* call);
 void smartcard_trace_establish_context_call(SMARTCARD_DEVICE* smartcard,
-                                            const EstablishContext_Call* call);
+                                            EstablishContext_Call* call);
 
 LONG smartcard_pack_establish_context_return(SMARTCARD_DEVICE* smartcard, wStream* s,
                                              EstablishContext_Return* ret);
 void smartcard_trace_establish_context_return(SMARTCARD_DEVICE* smartcard,
-                                              const EstablishContext_Return* ret);
+                                              EstablishContext_Return* ret);
 
 LONG smartcard_unpack_context_call(SMARTCARD_DEVICE* smartcard, wStream* s, Context_Call* call);
-void smartcard_trace_context_call(SMARTCARD_DEVICE* smartcard, const Context_Call* call,
+void smartcard_trace_context_call(SMARTCARD_DEVICE* smartcard, Context_Call* call,
                                   const char* name);
 
-void smartcard_trace_long_return(SMARTCARD_DEVICE* smartcard, const Long_Return* ret,
-                                 const char* name);
+void smartcard_trace_long_return(SMARTCARD_DEVICE* smartcard, Long_Return* ret, const char* name);
 
 LONG smartcard_unpack_list_reader_groups_call(SMARTCARD_DEVICE* smartcard, wStream* s,
                                               ListReaderGroups_Call* call);
 void smartcard_trace_list_reader_groups_call(SMARTCARD_DEVICE* smartcard,
-                                             const ListReaderGroups_Call* call, BOOL unicode);
+                                             ListReaderGroups_Call* call, BOOL unicode);
 
 LONG smartcard_pack_list_reader_groups_return(SMARTCARD_DEVICE* smartcard, wStream* s,
                                               ListReaderGroups_Return* ret);
 void smartcard_trace_list_reader_groups_return(SMARTCARD_DEVICE* smartcard,
-                                               const ListReaderGroups_Return* ret, BOOL unicode);
+                                               ListReaderGroups_Return* ret, BOOL unicode);
 
 LONG smartcard_unpack_list_readers_call(SMARTCARD_DEVICE* smartcard, wStream* s,
                                         ListReaders_Call* call);
-void smartcard_trace_list_readers_call(SMARTCARD_DEVICE* smartcard, const ListReaders_Call* call,
+void smartcard_trace_list_readers_call(SMARTCARD_DEVICE* smartcard, ListReaders_Call* call,
                                        BOOL unicode);
 
 LONG smartcard_pack_list_readers_return(SMARTCARD_DEVICE* smartcard, wStream* s,
                                         ListReaders_Return* ret);
-void smartcard_trace_list_readers_return(SMARTCARD_DEVICE* smartcard, const ListReaders_Return* ret,
+void smartcard_trace_list_readers_return(SMARTCARD_DEVICE* smartcard, ListReaders_Return* ret,
                                          BOOL unicode);
 
 LONG smartcard_unpack_connect_a_call(SMARTCARD_DEVICE* smartcard, wStream* s, ConnectA_Call* call);
-void smartcard_trace_connect_a_call(SMARTCARD_DEVICE* smartcard, const ConnectA_Call* call);
+void smartcard_trace_connect_a_call(SMARTCARD_DEVICE* smartcard, ConnectA_Call* call);
 
 LONG smartcard_unpack_connect_w_call(SMARTCARD_DEVICE* smartcard, wStream* s, ConnectW_Call* call);
-void smartcard_trace_connect_w_call(SMARTCARD_DEVICE* smartcard, const ConnectW_Call* call);
+void smartcard_trace_connect_w_call(SMARTCARD_DEVICE* smartcard, ConnectW_Call* call);
 
 LONG smartcard_pack_connect_return(SMARTCARD_DEVICE* smartcard, wStream* s, Connect_Return* ret);
-void smartcard_trace_connect_return(SMARTCARD_DEVICE* smartcard, const Connect_Return* ret);
+void smartcard_trace_connect_return(SMARTCARD_DEVICE* smartcard, Connect_Return* ret);
 
 LONG smartcard_unpack_reconnect_call(SMARTCARD_DEVICE* smartcard, wStream* s, Reconnect_Call* call);
-void smartcard_trace_reconnect_call(SMARTCARD_DEVICE* smartcard, const Reconnect_Call* call);
+void smartcard_trace_reconnect_call(SMARTCARD_DEVICE* smartcard, Reconnect_Call* call);
 
 LONG smartcard_pack_reconnect_return(SMARTCARD_DEVICE* smartcard, wStream* s,
                                      Reconnect_Return* ret);
-void smartcard_trace_reconnect_return(SMARTCARD_DEVICE* smartcard, const Reconnect_Return* ret);
+void smartcard_trace_reconnect_return(SMARTCARD_DEVICE* smartcard, Reconnect_Return* ret);
 
 LONG smartcard_unpack_hcard_and_disposition_call(SMARTCARD_DEVICE* smartcard, wStream* s,
                                                  HCardAndDisposition_Call* call);
@@ -539,7 +538,7 @@
 LONG smartcard_unpack_get_status_change_a_call(SMARTCARD_DEVICE* smartcard, wStream* s,
                                                GetStatusChangeA_Call* call);
 void smartcard_trace_get_status_change_a_call(SMARTCARD_DEVICE* smartcard,
-                                              const GetStatusChangeA_Call* call);
+                                              GetStatusChangeA_Call* call);
 
 LONG smartcard_unpack_get_status_change_w_call(SMARTCARD_DEVICE* smartcard, wStream* s,
                                                GetStatusChangeW_Call* call);
@@ -549,18 +548,16 @@
 LONG smartcard_pack_get_status_change_return(SMARTCARD_DEVICE* smartcard, wStream* s,
                                              GetStatusChange_Return* ret);
 void smartcard_trace_get_status_change_return(SMARTCARD_DEVICE* smartcard,
-                                              const GetStatusChange_Return* ret, BOOL unicode);
+                                              GetStatusChange_Return* ret, BOOL unicode);
 
 LONG smartcard_unpack_state_call(SMARTCARD_DEVICE* smartcard, wStream* s, State_Call* call);
 LONG smartcard_pack_state_return(SMARTCARD_DEVICE* smartcard, wStream* s, State_Return* ret);
 
 LONG smartcard_unpack_status_call(SMARTCARD_DEVICE* smartcard, wStream* s, Status_Call* call);
-void smartcard_trace_status_call(SMARTCARD_DEVICE* smartcard, const Status_Call* call,
-                                 BOOL unicode);
+void smartcard_trace_status_call(SMARTCARD_DEVICE* smartcard, Status_Call* call, BOOL unicode);
 
 LONG smartcard_pack_status_return(SMARTCARD_DEVICE* smartcard, wStream* s, Status_Return* ret);
-void smartcard_trace_status_return(SMARTCARD_DEVICE* smartcard, const Status_Return* ret,
-                                   BOOL unicode);
+void smartcard_trace_status_return(SMARTCARD_DEVICE* smartcard, Status_Return* ret, BOOL unicode);
 
 LONG smartcard_unpack_get_attrib_call(SMARTCARD_DEVICE* smartcard, wStream* s,
                                       GetAttrib_Call* call);
@@ -568,24 +565,24 @@
 
 LONG smartcard_pack_get_attrib_return(SMARTCARD_DEVICE* smartcard, wStream* s,
                                       GetAttrib_Return* ret);
-void smartcard_trace_get_attrib_return(SMARTCARD_DEVICE* smartcard, const GetAttrib_Return* ret,
+void smartcard_trace_get_attrib_return(SMARTCARD_DEVICE* smartcard, GetAttrib_Return* ret,
                                        DWORD dwAttrId);
 
 LONG smartcard_unpack_control_call(SMARTCARD_DEVICE* smartcard, wStream* s, Control_Call* call);
-void smartcard_trace_control_call(SMARTCARD_DEVICE* smartcard, const Control_Call* call);
+void smartcard_trace_control_call(SMARTCARD_DEVICE* smartcard, Control_Call* call);
 
 LONG smartcard_pack_control_return(SMARTCARD_DEVICE* smartcard, wStream* s, Control_Return* ret);
-void smartcard_trace_control_return(SMARTCARD_DEVICE* smartcard, const Control_Return* ret);
+void smartcard_trace_control_return(SMARTCARD_DEVICE* smartcard, Control_Return* ret);
 
 LONG smartcard_unpack_transmit_call(SMARTCARD_DEVICE* smartcard, wStream* s, Transmit_Call* call);
-void smartcard_trace_transmit_call(SMARTCARD_DEVICE* smartcard, const Transmit_Call* call);
+void smartcard_trace_transmit_call(SMARTCARD_DEVICE* smartcard, Transmit_Call* call);
 
 LONG smartcard_pack_transmit_return(SMARTCARD_DEVICE* smartcard, wStream* s, Transmit_Return* ret);
-void smartcard_trace_transmit_return(SMARTCARD_DEVICE* smartcard, const Transmit_Return* ret);
+void smartcard_trace_transmit_return(SMARTCARD_DEVICE* smartcard, Transmit_Return* ret);
 
 LONG smartcard_unpack_locate_cards_by_atr_a_call(SMARTCARD_DEVICE* smartcard, wStream* s,
                                                  LocateCardsByATRA_Call* call);
 void smartcard_trace_locate_cards_by_atr_a_call(SMARTCARD_DEVICE* smartcard,
-                                                const LocateCardsByATRA_Call* call);
+                                                LocateCardsByATRA_Call* call);
 
 #endif /* FREERDP_CHANNEL_SMARTCARD_CLIENT_PACK_H */
diff -urN channels/sshagent/ChannelOptions.cmake ../../informatimago/FreeRDP/channels/sshagent/ChannelOptions.cmake
--- channels/sshagent/ChannelOptions.cmake	2019-07-24 06:11:52.394197211 +0300
+++ ../../informatimago/FreeRDP/channels/sshagent/ChannelOptions.cmake	2019-07-19 20:00:17.349205896 +0300
@@ -1,7 +1,6 @@
 
 set(OPTION_DEFAULT OFF)
 set(OPTION_CLIENT_DEFAULT OFF)
-set(OPTION_SERVER_DEFAULT OFF)
 
 define_channel_options(NAME "sshagent" TYPE "dynamic"
 	DESCRIPTION "SSH Agent Forwarding (experimental)"
diff -urN channels/tsmf/client/gstreamer/tsmf_gstreamer.c ../../informatimago/FreeRDP/channels/tsmf/client/gstreamer/tsmf_gstreamer.c
--- channels/tsmf/client/gstreamer/tsmf_gstreamer.c	2019-07-25 19:50:59.113888755 +0300
+++ ../../informatimago/FreeRDP/channels/tsmf/client/gstreamer/tsmf_gstreamer.c	2019-07-25 20:11:23.163958861 +0300
@@ -154,7 +154,11 @@
 	return TRUE;
 }
 
+#ifdef __OpenBSD__
 static inline GstClockTime tsmf_gstreamer_timestamp_ms_to_gst(UINT64 ms_timestamp)
+#else
+static inline const GstClockTime tsmf_gstreamer_timestamp_ms_to_gst(UINT64 ms_timestamp)
+#endif
 {
 	/*
 	 * Convert Microsoft 100ns timestamps to Gstreamer 1ns units.
@@ -623,9 +627,8 @@
 
 	tsmf_platform_register_handler(mdecoder);
 	/* AppSrc settings */
-	GstAppSrcCallbacks callbacks = {
-		tsmf_gstreamer_need_data, tsmf_gstreamer_enough_data, tsmf_gstreamer_seek_data, { NULL }
-	};
+	GstAppSrcCallbacks callbacks = { tsmf_gstreamer_need_data, tsmf_gstreamer_enough_data,
+		                             tsmf_gstreamer_seek_data };
 	g_object_set(mdecoder->src, "format", GST_FORMAT_TIME, NULL);
 	g_object_set(mdecoder->src, "is-live", FALSE, NULL);
 	g_object_set(mdecoder->src, "block", FALSE, NULL);
diff -urN channels/tsmf/client/gstreamer/tsmf_X11.c ../../informatimago/FreeRDP/channels/tsmf/client/gstreamer/tsmf_X11.c
--- channels/tsmf/client/gstreamer/tsmf_X11.c	2019-07-25 19:50:59.077888575 +0300
+++ ../../informatimago/FreeRDP/channels/tsmf/client/gstreamer/tsmf_X11.c	2019-07-25 20:11:23.127958683 +0300
@@ -117,7 +117,7 @@
 #if GST_VERSION_MAJOR > 0
 		hdl->overlay = GST_VIDEO_OVERLAY(GST_MESSAGE_SRC(message));
 		gst_video_overlay_set_window_handle(hdl->overlay, hdl->subwin);
-		gst_video_overlay_handle_events(hdl->overlay, FALSE);
+		gst_video_overlay_handle_events(hdl->overlay, TRUE);
 #else
 		hdl->overlay = GST_X_OVERLAY(GST_MESSAGE_SRC(message));
 #	if GST_CHECK_VERSION(0, 10, 31)
diff -urN channels/tsmf/client/tsmf_audio.c ../../informatimago/FreeRDP/channels/tsmf/client/tsmf_audio.c
--- channels/tsmf/client/tsmf_audio.c	2019-07-25 19:50:59.129888834 +0300
+++ ../../informatimago/FreeRDP/channels/tsmf/client/tsmf_audio.c	2019-07-25 20:11:23.179958940 +0300
@@ -32,7 +32,7 @@
 	ITSMFAudioDevice* audio;
 	TSMF_AUDIO_DEVICE_ENTRY entry;
 	entry =
-	    (TSMF_AUDIO_DEVICE_ENTRY)(void*)freerdp_load_channel_addin_entry("tsmf", name, "audio", 0);
+	    (TSMF_AUDIO_DEVICE_ENTRY)freerdp_load_channel_addin_entry("tsmf", (LPSTR)name, "audio", 0);
 
 	if (!entry)
 		return NULL;
diff -urN channels/tsmf/client/tsmf_codec.c ../../informatimago/FreeRDP/channels/tsmf/client/tsmf_codec.c
--- channels/tsmf/client/tsmf_codec.c	2019-07-25 19:50:59.201889190 +0300
+++ ../../informatimago/FreeRDP/channels/tsmf/client/tsmf_codec.c	2019-07-25 20:11:23.251959298 +0300
@@ -363,7 +363,7 @@
 
 static BOOL tsmf_read_format_type(TS_AM_MEDIA_TYPE* mediatype, wStream* s, UINT32 cbFormat)
 {
-	UINT32 i, j;
+	int i, j;
 
 	switch (mediatype->FormatType)
 	{
diff -urN channels/tsmf/client/tsmf_decoder.c ../../informatimago/FreeRDP/channels/tsmf/client/tsmf_decoder.c
--- channels/tsmf/client/tsmf_decoder.c	2019-07-25 19:50:59.209889231 +0300
+++ ../../informatimago/FreeRDP/channels/tsmf/client/tsmf_decoder.c	2019-07-25 20:11:23.259959338 +0300
@@ -36,7 +36,7 @@
 {
 	ITSMFDecoder* decoder;
 	TSMF_DECODER_ENTRY entry;
-	entry = (TSMF_DECODER_ENTRY)(void*)freerdp_load_channel_addin_entry("tsmf", name, "decoder", 0);
+	entry = (TSMF_DECODER_ENTRY)freerdp_load_channel_addin_entry("tsmf", (LPSTR)name, "decoder", 0);
 
 	if (!entry)
 		return NULL;
diff -urN channels/tsmf/client/tsmf_media.c ../../informatimago/FreeRDP/channels/tsmf/client/tsmf_media.c
--- channels/tsmf/client/tsmf_media.c	2019-07-25 19:50:59.265889507 +0300
+++ ../../informatimago/FreeRDP/channels/tsmf/client/tsmf_media.c	2019-07-25 20:11:23.307959576 +0300
@@ -382,12 +382,12 @@
 
 static char* guid_to_string(const BYTE* guid, char* str, size_t len)
 {
-	size_t i;
+	int i;
 
 	if (!guid || !str)
 		return NULL;
 
-	for (i = 0; i < GUID_SIZE && (len > 2 * i); i++)
+	for (i = 0; i < GUID_SIZE && len > 2 * i; i++)
 		sprintf_s(str + (2 * i), len - 2 * i, "%02" PRIX8 "", guid[i]);
 
 	return str;
@@ -1128,10 +1128,7 @@
 
 	presentation->nr_rects = num_rects;
 	presentation->rects = tmp_rects;
-
-	if (presentation->rects)
-		CopyMemory(presentation->rects, rects, sizeof(RDP_RECT) * num_rects);
-
+	CopyMemory(presentation->rects, rects, sizeof(RDP_RECT) * num_rects);
 	ArrayList_Lock(presentation->stream_list);
 	count = ArrayList_Count(presentation->stream_list);
 
diff -urN channels/urbdrc/client/data_transfer.c ../../informatimago/FreeRDP/channels/urbdrc/client/data_transfer.c
--- channels/urbdrc/client/data_transfer.c	2019-07-25 19:50:59.329889826 +0300
+++ ../../informatimago/FreeRDP/channels/urbdrc/client/data_transfer.c	2019-07-25 20:11:23.379959932 +0300
@@ -208,8 +208,7 @@
 	UINT32 usbd_status = USBD_STATUS_SUCCESS;
 	BYTE* OutputBuffer;
 	BYTE* out_data;
-	UINT32 i;
-	int offset, success = 0;
+	int i, offset, success = 0;
 	WLog_DBG(TAG, "urbdrc_process__io_control");
 	data_read_UINT32(data + 0, IoControlCode);
 	data_read_UINT32(data + 4, InputBufferSize);
@@ -412,7 +411,7 @@
 static void func_select_all_interface_for_msconfig(IUDEVICE* pdev,
                                                    MSUSB_CONFIG_DESCRIPTOR* MsConfig)
 {
-	UINT32 inum;
+	int inum;
 	MSUSB_INTERFACE_DESCRIPTOR** MsInterfaces = MsConfig->MsInterfaces;
 	BYTE InterfaceNumber, AlternateSetting;
 	UINT32 NumInterfaces = MsConfig->NumInterfaces;
diff -urN channels/urbdrc/client/libusb/libusb_udevice.c ../../informatimago/FreeRDP/channels/urbdrc/client/libusb/libusb_udevice.c
--- channels/urbdrc/client/libusb/libusb_udevice.c	2019-07-25 19:50:59.377890064 +0300
+++ ../../informatimago/FreeRDP/channels/urbdrc/client/libusb/libusb_udevice.c	2019-07-25 20:11:23.419960131 +0300
@@ -170,8 +170,8 @@
 	BYTE* data = iso_user_data->IsoPacket;
 	int* completed = &iso_user_data->completed;
 	UINT32 offset = 0;
-	INT32 index = 0;
-	INT32 i, act_len;
+	UINT32 index = 0;
+	UINT32 i, act_len;
 	BYTE* b;
 	*completed = 1;
 
@@ -233,7 +233,7 @@
                                                           UINT32 EndpointAddress)
 {
 	BYTE alt;
-	UINT32 inum, pnum;
+	int inum, pnum;
 	MSUSB_INTERFACE_DESCRIPTOR** MsInterfaces;
 	const LIBUSB_INTERFACE* interface;
 	const LIBUSB_ENDPOINT_DESCEIPTOR* endpoint;
@@ -358,8 +358,7 @@
 static int func_config_release_all_interface(LIBUSB_DEVICE_HANDLE* libusb_handle,
                                              UINT32 NumInterfaces)
 {
-	UINT32 i;
-	int ret;
+	int i, ret;
 
 	for (i = 0; i < NumInterfaces; i++)
 	{
@@ -630,7 +629,7 @@
 				p1 = strchr(p2, '.');
 			} while (p1 != NULL);
 
-			if ((size_t)((p2 - sysfs_path) + 2U) < strlen(sysfs_path))
+			if ((p2 - sysfs_path) < (strlen(sysfs_path) - 2))
 			{
 				p1 = (char*)sysfs_path;
 
@@ -758,7 +757,7 @@
 	const LIBUSB_INTERFACE_DESCRIPTOR* LibusbAltsetting;
 	const LIBUSB_ENDPOINT_DESCEIPTOR* LibusbEndpoint;
 	BYTE LibusbNumEndpoint;
-	UINT32 inum = 0, pnum = 0, MsOutSize = 0;
+	int inum = 0, pnum = 0, MsOutSize = 0;
 	LibusbConfig = pdev->LibusbConfig;
 
 	if (LibusbConfig->bNumInterfaces != MsConfig->NumInterfaces)
@@ -983,8 +982,7 @@
 	char deviceLocation[25];
 	BYTE bus_number;
 	BYTE device_address;
-	int ret = 0;
-	size_t i = 0;
+	int ret = 0, i = 0;
 
 	switch (TextType)
 	{
@@ -992,7 +990,7 @@
 		ret = libusb_get_string_descriptor(pdev->libusb_handle, devDescriptor->iProduct, LocaleId,
 		                                   Buffer, *BufferSize);
 
-		for (i = 0; (ret > 0) && (i < (size_t)ret); i++)
+		for (i = 0; i < ret; i++)
 		{
 			Buffer[i] = Buffer[i + 2];
 		}
@@ -1361,7 +1359,7 @@
 	if (iso_transfer == NULL)
 	{
 		WLog_ERR(TAG, "Error: libusb_alloc_transfer.");
-		return -1;
+		status = -1;
 	}
 
 	/**  process URB_FUNCTION_IOSCH_TRANSFER */
diff -urN channels/urbdrc/client/urbdrc_main.c ../../informatimago/FreeRDP/channels/urbdrc/client/urbdrc_main.c
--- channels/urbdrc/client/urbdrc_main.c	2019-07-25 19:50:59.437890361 +0300
+++ ../../informatimago/FreeRDP/channels/urbdrc/client/urbdrc_main.c	2019-07-25 20:11:23.479960428 +0300
@@ -1160,7 +1160,7 @@
 static UINT urbdrc_process_channel_notification(URBDRC_CHANNEL_CALLBACK* callback, char* pBuffer,
                                                 UINT32 cbSize)
 {
-	UINT32 i;
+	int i;
 	UINT32 MessageId;
 	UINT32 FunctionId;
 	UINT error = CHANNEL_RC_OK;
diff -urN channels/video/client/video_main.c ../../informatimago/FreeRDP/channels/video/client/video_main.c
--- channels/video/client/video_main.c	2019-07-25 19:50:59.469890520 +0300
+++ ../../informatimago/FreeRDP/channels/video/client/video_main.c	2019-07-25 20:11:23.515960607 +0300
@@ -484,7 +484,7 @@
 		PresentationContext_unref(presentation);
 	}
 
-	return ret;
+	return CHANNEL_RC_OK;
 }
 
 static UINT video_read_tsmm_presentation_req(VideoClientContext* context, wStream* s)
@@ -954,8 +954,6 @@
 {
 	VIDEO_CHANNEL_CALLBACK* callback;
 	VIDEO_LISTENER_CALLBACK* listener_callback = (VIDEO_LISTENER_CALLBACK*)listenerCallback;
-	WINPR_UNUSED(Data);
-	WINPR_UNUSED(pbAccept);
 	callback = (VIDEO_CHANNEL_CALLBACK*)calloc(1, sizeof(VIDEO_CHANNEL_CALLBACK));
 
 	if (!callback)
@@ -981,8 +979,6 @@
 {
 	VIDEO_CHANNEL_CALLBACK* callback;
 	VIDEO_LISTENER_CALLBACK* listener_callback = (VIDEO_LISTENER_CALLBACK*)pListenerCallback;
-	WINPR_UNUSED(Data);
-	WINPR_UNUSED(pbAccept);
 	callback = (VIDEO_CHANNEL_CALLBACK*)calloc(1, sizeof(VIDEO_CHANNEL_CALLBACK));
 
 	if (!callback)
