diff --git a/channels/smartcard/client/smartcard_main.c b/channels/smartcard/client/smartcard_main.c
index 46c09807c..fb79fb151 100644
--- a/channels/smartcard/client/smartcard_main.c
+++ b/channels/smartcard/client/smartcard_main.c
@@ -428,7 +428,7 @@ static UINT smartcard_process_irp(SMARTCARD_DEVICE* smartcard, IRP* irp)
 			case SCARD_IOCTL_ISVALIDCONTEXT:
 			case SCARD_IOCTL_CANCEL:
 			case SCARD_IOCTL_ACCESSSTARTEDEVENT:
-			case SCARD_IOCTL_RELEASETARTEDEVENT:
+			case SCARD_IOCTL_RELEASESTARTEDEVENT:
 				asyncIrp = FALSE;
 				break;
 
diff --git a/channels/smartcard/client/smartcard_main.h b/channels/smartcard/client/smartcard_main.h
index 48d8d025b..e14423359 100644
--- a/channels/smartcard/client/smartcard_main.h
+++ b/channels/smartcard/client/smartcard_main.h
@@ -79,7 +79,6 @@
 #define SCARD_IOCTL_GETATTRIB RDP_SCARD_CTL_CODE(54)           /* SCardGetAttrib */
 #define SCARD_IOCTL_SETATTRIB RDP_SCARD_CTL_CODE(55)           /* SCardSetAttrib */
 #define SCARD_IOCTL_ACCESSSTARTEDEVENT RDP_SCARD_CTL_CODE(56)  /* SCardAccessStartedEvent */
-#define SCARD_IOCTL_RELEASETARTEDEVENT RDP_SCARD_CTL_CODE(57)  /* SCardReleaseStartedEvent */
 #define SCARD_IOCTL_LOCATECARDSBYATRA RDP_SCARD_CTL_CODE(58)   /* SCardLocateCardsByATRA */
 #define SCARD_IOCTL_LOCATECARDSBYATRW RDP_SCARD_CTL_CODE(59)   /* SCardLocateCardsByATRW */
 #define SCARD_IOCTL_READCACHEA RDP_SCARD_CTL_CODE(60)          /* SCardReadCacheA */
@@ -87,8 +86,9 @@
 #define SCARD_IOCTL_WRITECACHEA RDP_SCARD_CTL_CODE(62)         /* SCardWriteCacheA */
 #define SCARD_IOCTL_WRITECACHEW RDP_SCARD_CTL_CODE(63)         /* SCardWriteCacheW */
 #define SCARD_IOCTL_GETTRANSMITCOUNT RDP_SCARD_CTL_CODE(64)    /* SCardGetTransmitCount */
-#define SCARD_IOCTL_GETREADERICON RDP_SCARD_CTL_CODE(65)       /* SCardGetReaderIconA */
-#define SCARD_IOCTL_GETDEVICETYPEID RDP_SCARD_CTL_CODE(66)     /* SCardGetDeviceTypeIdA */
+#define SCARD_IOCTL_RELEASESTARTEDEVENT RDP_SCARD_CTL_CODE(66) /* SCardReleaseStartedEvent */
+#define SCARD_IOCTL_GETREADERICON RDP_SCARD_CTL_CODE(67)       /* SCardGetReaderIconA */
+#define SCARD_IOCTL_GETDEVICETYPEID RDP_SCARD_CTL_CODE(68)     /* SCardGetDeviceTypeIdA */
 
 typedef struct _SMARTCARD_DEVICE SMARTCARD_DEVICE;
 
diff --git a/channels/smartcard/client/smartcard_operations.c b/channels/smartcard/client/smartcard_operations.c
index 5bcd624f9..725ff6c8c 100644
--- a/channels/smartcard/client/smartcard_operations.c
+++ b/channels/smartcard/client/smartcard_operations.c
@@ -39,29 +39,7 @@
 
 #include "smartcard_main.h"
 
-static LONG log_status_error(const char* tag, const char* what, LONG status)
-{
-	if (status != SCARD_S_SUCCESS)
-	{
-		DWORD level = WLOG_ERROR;
-		switch (status)
-		{
-			case SCARD_E_TIMEOUT:
-				level = WLOG_DEBUG;
-				break;
-			case SCARD_E_NO_READERS_AVAILABLE:
-				level = WLOG_INFO;
-				break;
-			default:
-				break;
-		}
-		WLog_Print(WLog_Get(tag), level, "%s failed with error %s [%" PRId32 "]", what,
-		           SCardGetErrorString(status), status);
-	}
-	return status;
-}
-
-static const char* smartcard_get_ioctl_string(UINT32 ioControlCode, BOOL funcName)
+const char* smartcard_get_ioctl_string(UINT32 ioControlCode, BOOL funcName)
 {
 	switch (ioControlCode)
 	{
@@ -200,8 +178,8 @@ static const char* smartcard_get_ioctl_string(UINT32 ioControlCode, BOOL funcNam
 		case SCARD_IOCTL_GETTRANSMITCOUNT:
 			return funcName ? "SCardGetTransmitCount" : "SCARD_IOCTL_GETTRANSMITCOUNT";
 
-		case SCARD_IOCTL_RELEASETARTEDEVENT:
-			return funcName ? "SCardReleaseStartedEvent" : "SCARD_IOCTL_RELEASETARTEDEVENT";
+		case SCARD_IOCTL_RELEASESTARTEDEVENT:
+			return funcName ? "SCardReleaseStartedEvent" : "SCARD_IOCTL_RELEASESTARTEDEVENT";
 
 		case SCARD_IOCTL_GETREADERICON:
 			return funcName ? "SCardGetReaderIcon" : "SCARD_IOCTL_GETREADERICON";
@@ -212,6 +190,8 @@ static const char* smartcard_get_ioctl_string(UINT32 ioControlCode, BOOL funcNam
 		default:
 			return funcName ? "SCardUnknown" : "SCARD_IOCTL_UNKNOWN";
 	}
+
+	return funcName ? "SCardUnknown" : "SCARD_IOCTL_UNKNOWN";
 }
 
 static LONG smartcard_EstablishContext_Decode(SMARTCARD_DEVICE* smartcard,
@@ -225,12 +205,14 @@ static LONG smartcard_EstablishContext_Decode(SMARTCARD_DEVICE* smartcard,
 	if (!call)
 		return STATUS_NO_MEMORY;
 
-	status = smartcard_unpack_establish_context_call(smartcard, irp->input, call);
-	if (status != SCARD_S_SUCCESS)
+	if ((status = smartcard_unpack_establish_context_call(smartcard, irp->input, call)))
 	{
-		return log_status_error(TAG, "smartcard_unpack_establish_context_call", status);
+		WLog_ERR(TAG, "smartcard_unpack_establish_context_call failed with error %" PRId32 "",
+		         status);
+		return status;
 	}
 
+	smartcard_trace_establish_context_call(smartcard, call);
 	return SCARD_S_SUCCESS;
 }
 
@@ -238,7 +220,7 @@ static LONG smartcard_EstablishContext_Call(SMARTCARD_DEVICE* smartcard,
                                             SMARTCARD_OPERATION* operation)
 {
 	LONG status;
-	SCARDCONTEXT hContext = { 0 };
+	SCARDCONTEXT hContext = -1;
 	EstablishContext_Return ret;
 	IRP* irp = operation->irp;
 	EstablishContext_Call* call = operation->call;
@@ -265,15 +247,18 @@ static LONG smartcard_EstablishContext_Call(SMARTCARD_DEVICE* smartcard,
 	}
 	else
 	{
-		return log_status_error(TAG, "SCardEstablishContext", status);
+		WLog_ERR(TAG, "SCardEstablishContext failed with error %" PRId32 "", status);
+		return status;
 	}
 
 	smartcard_scard_context_native_to_redir(smartcard, &(ret.hContext), hContext);
+	smartcard_trace_establish_context_return(smartcard, &ret);
 
-	status = smartcard_pack_establish_context_return(smartcard, irp->output, &ret);
-	if (status != SCARD_S_SUCCESS)
+	if ((status = smartcard_pack_establish_context_return(smartcard, irp->output, &ret)))
 	{
-		return log_status_error(TAG, "smartcard_pack_establish_context_return", status);
+		WLog_ERR(TAG, "smartcard_pack_establish_context_return failed with error %" PRId32 "",
+		         status);
+		return status;
 	}
 
 	return ret.ReturnCode;
@@ -290,10 +275,10 @@ static LONG smartcard_ReleaseContext_Decode(SMARTCARD_DEVICE* smartcard,
 	if (!call)
 		return STATUS_NO_MEMORY;
 
-	status = smartcard_unpack_context_call(smartcard, irp->input, call, "ReleaseContext");
-	if (status != SCARD_S_SUCCESS)
-		log_status_error(TAG, "smartcard_unpack_context_call", status);
+	if ((status = smartcard_unpack_context_call(smartcard, irp->input, call)))
+		WLog_ERR(TAG, "smartcard_unpack_context_call failed with error %" PRId32 "", status);
 
+	smartcard_trace_context_call(smartcard, call, "ReleaseContext");
 	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
 	return status;
 }
@@ -301,8 +286,9 @@ static LONG smartcard_ReleaseContext_Decode(SMARTCARD_DEVICE* smartcard,
 static LONG smartcard_ReleaseContext_Call(SMARTCARD_DEVICE* smartcard,
                                           SMARTCARD_OPERATION* operation)
 {
+	LONG status;
 	Long_Return ret;
-	ret.ReturnCode = SCardReleaseContext(operation->hContext);
+	status = ret.ReturnCode = SCardReleaseContext(operation->hContext);
 
 	if (ret.ReturnCode == SCARD_S_SUCCESS)
 	{
@@ -313,7 +299,8 @@ static LONG smartcard_ReleaseContext_Call(SMARTCARD_DEVICE* smartcard,
 	}
 	else
 	{
-		return log_status_error(TAG, "SCardReleaseContext", ret.ReturnCode);
+		WLog_ERR(TAG, "SCardReleaseContext failed with error %" PRId32 "", status);
+		return status;
 	}
 
 	smartcard_trace_long_return(smartcard, &ret, "ReleaseContext");
@@ -331,8 +318,10 @@ static LONG smartcard_IsValidContext_Decode(SMARTCARD_DEVICE* smartcard,
 	if (!call)
 		return STATUS_NO_MEMORY;
 
-	status = smartcard_unpack_context_call(smartcard, irp->input, call, "IsValidContext");
+	if ((status = smartcard_unpack_context_call(smartcard, irp->input, call)))
+		WLog_ERR(TAG, "smartcard_unpack_context_call failed with error %" PRId32 "", status);
 
+	smartcard_trace_context_call(smartcard, call, "IsValidContext");
 	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
 	return status;
 }
@@ -340,9 +329,15 @@ static LONG smartcard_IsValidContext_Decode(SMARTCARD_DEVICE* smartcard,
 static LONG smartcard_IsValidContext_Call(SMARTCARD_DEVICE* smartcard,
                                           SMARTCARD_OPERATION* operation)
 {
+	LONG status;
 	Long_Return ret;
 
-	ret.ReturnCode = SCardIsValidContext(operation->hContext);
+	if ((status = ret.ReturnCode = SCardIsValidContext(operation->hContext)))
+	{
+		WLog_ERR(TAG, "SCardIsValidContext failed with error %" PRId32 "", status);
+		return status;
+	}
+
 	smartcard_trace_long_return(smartcard, &ret, "IsValidContext");
 	return ret.ReturnCode;
 }
@@ -358,8 +353,8 @@ static LONG smartcard_ListReaderGroupsA_Decode(SMARTCARD_DEVICE* smartcard,
 	if (!call)
 		return STATUS_NO_MEMORY;
 
-	status = smartcard_unpack_list_reader_groups_call(smartcard, irp->input, call, FALSE);
-
+	status = smartcard_unpack_list_reader_groups_call(smartcard, irp->input, call);
+	smartcard_trace_list_reader_groups_call(smartcard, call, FALSE);
 	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
 	return status;
 }
@@ -381,7 +376,8 @@ static LONG smartcard_ListReaderGroupsA_Call(SMARTCARD_DEVICE* smartcard,
 	if (status != SCARD_S_SUCCESS)
 		return status;
 
-	status = smartcard_pack_list_reader_groups_return(smartcard, irp->output, &ret, FALSE);
+	smartcard_trace_list_reader_groups_return(smartcard, &ret, FALSE);
+	status = smartcard_pack_list_reader_groups_return(smartcard, irp->output, &ret);
 
 	if (status != SCARD_S_SUCCESS)
 		return status;
@@ -403,8 +399,8 @@ static LONG smartcard_ListReaderGroupsW_Decode(SMARTCARD_DEVICE* smartcard,
 	if (!call)
 		return STATUS_NO_MEMORY;
 
-	status = smartcard_unpack_list_reader_groups_call(smartcard, irp->input, call, TRUE);
-
+	status = smartcard_unpack_list_reader_groups_call(smartcard, irp->input, call);
+	smartcard_trace_list_reader_groups_call(smartcard, call, TRUE);
 	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
 	return status;
 }
@@ -426,7 +422,8 @@ static LONG smartcard_ListReaderGroupsW_Call(SMARTCARD_DEVICE* smartcard,
 	if (status != SCARD_S_SUCCESS)
 		return status;
 
-	status = smartcard_pack_list_reader_groups_return(smartcard, irp->output, &ret, TRUE);
+	smartcard_trace_list_reader_groups_return(smartcard, &ret, TRUE);
+	status = smartcard_pack_list_reader_groups_return(smartcard, irp->output, &ret);
 
 	if (status != SCARD_S_SUCCESS)
 		return status;
@@ -470,13 +467,12 @@ static DWORD filter_device_by_name_a(wLinkedList* list, LPSTR* mszReaders, DWORD
 		LPCSTR rreader = &(*mszReaders)[rpos];
 		LPSTR wreader = &(*mszReaders)[wpos];
 		size_t readerLen = strnlen(rreader, cchReaders - rpos);
-
 		rpos += readerLen + 1;
 
 		if (filter_match(list, rreader, readerLen))
 		{
 			if (rreader != wreader)
-				memmove(wreader, rreader, readerLen + 1);
+				memmove(wreader, rreader, readerLen);
 
 			wpos += readerLen + 1;
 		}
@@ -491,7 +487,7 @@ static DWORD filter_device_by_name_a(wLinkedList* list, LPSTR* mszReaders, DWORD
 		(*mszReaders)[wpos++] = '\0';
 	}
 
-	return (DWORD)wpos;
+	return wpos;
 }
 
 static DWORD filter_device_by_name_w(wLinkedList* list, LPWSTR* mszReaders, DWORD cchReaders)
@@ -532,8 +528,10 @@ static LONG smartcard_ListReadersA_Decode(SMARTCARD_DEVICE* smartcard,
 	if (!call)
 		return STATUS_NO_MEMORY;
 
-	status = smartcard_unpack_list_readers_call(smartcard, irp->input, call, FALSE);
+	if ((status = smartcard_unpack_list_readers_call(smartcard, irp->input, call)))
+		WLog_ERR(TAG, "smartcard_unpack_list_readers_call failed with error %" PRId32 "", status);
 
+	smartcard_trace_list_readers_call(smartcard, call, FALSE);
 	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
 	return status;
 }
@@ -556,19 +554,21 @@ static LONG smartcard_ListReadersA_Call(SMARTCARD_DEVICE* smartcard, SMARTCARD_O
 		call->mszGroups = NULL;
 	}
 
-	if (status != SCARD_S_SUCCESS)
+	if (status)
 	{
-		return log_status_error(TAG, "SCardListReadersA", status);
+		WLog_ERR(TAG, "SCardListReadersA failed with error %" PRId32 "", status);
+		return status;
 	}
 
 	cchReaders = filter_device_by_name_a(smartcard->names, &mszReaders, cchReaders);
 	ret.msz = (BYTE*)mszReaders;
 	ret.cBytes = cchReaders;
+	smartcard_trace_list_readers_return(smartcard, &ret, FALSE);
 
-	status = smartcard_pack_list_readers_return(smartcard, irp->output, &ret, FALSE);
-	if (status != SCARD_S_SUCCESS)
+	if ((status = smartcard_pack_list_readers_return(smartcard, irp->output, &ret)))
 	{
-		return log_status_error(TAG, "smartcard_pack_list_readers_return", status);
+		WLog_ERR(TAG, "smartcard_pack_list_readers_return failed with error %" PRId32 "", status);
+		return status;
 	}
 
 	if (mszReaders)
@@ -591,110 +591,10 @@ static LONG smartcard_ListReadersW_Decode(SMARTCARD_DEVICE* smartcard,
 	if (!call)
 		return STATUS_NO_MEMORY;
 
-	status = smartcard_unpack_list_readers_call(smartcard, irp->input, call, TRUE);
-
-	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
-	return status;
-}
-
-static LONG smartcard_context_and_two_strings_a_Decode(SMARTCARD_DEVICE* smartcard,
-                                                       SMARTCARD_OPERATION* operation)
-{
-	LONG status;
-	ContextAndTwoStringA_Call* call;
-	IRP* irp = operation->irp;
-	operation->call = call = calloc(1, sizeof(ContextAndTwoStringA_Call));
-
-	if (!call)
-		return STATUS_NO_MEMORY;
-
-	status = smartcard_unpack_context_and_two_strings_a_call(smartcard, irp->input, call);
-
-	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
-	return status;
-}
-
-static LONG smartcard_context_and_two_strings_w_Decode(SMARTCARD_DEVICE* smartcard,
-                                                       SMARTCARD_OPERATION* operation)
-{
-	LONG status;
-	ContextAndTwoStringW_Call* call;
-	IRP* irp = operation->irp;
-	operation->call = call = calloc(1, sizeof(ContextAndTwoStringW_Call));
-
-	if (!call)
-		return STATUS_NO_MEMORY;
-
-	status = smartcard_unpack_context_and_two_strings_w_call(smartcard, irp->input, call);
-
-	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
-	return status;
-}
-
-static LONG smartcard_context_and_string_a_Decode(SMARTCARD_DEVICE* smartcard,
-                                                  SMARTCARD_OPERATION* operation)
-{
-	LONG status;
-	ContextAndStringA_Call* call;
-	IRP* irp = operation->irp;
-	operation->call = call = calloc(1, sizeof(ContextAndStringA_Call));
-
-	if (!call)
-		return STATUS_NO_MEMORY;
-
-	status = smartcard_unpack_context_and_string_a_call(smartcard, irp->input, call);
-
-	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
-	return status;
-}
-
-static LONG smartcard_context_and_string_w_Decode(SMARTCARD_DEVICE* smartcard,
-                                                  SMARTCARD_OPERATION* operation)
-{
-	LONG status;
-	ContextAndStringW_Call* call;
-	IRP* irp = operation->irp;
-	operation->call = call = calloc(1, sizeof(ContextAndStringW_Call));
-
-	if (!call)
-		return STATUS_NO_MEMORY;
-
-	status = smartcard_unpack_context_and_string_w_call(smartcard, irp->input, call);
-
-	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
-	return status;
-}
-
-static LONG smartcard_LocateCardsA_Decode(SMARTCARD_DEVICE* smartcard,
-                                          SMARTCARD_OPERATION* operation)
-{
-	LONG status;
-	LocateCardsA_Call* call;
-	IRP* irp = operation->irp;
-	operation->call = call = calloc(1, sizeof(LocateCardsA_Call));
-
-	if (!call)
-		return STATUS_NO_MEMORY;
-
-	status = smartcard_unpack_locate_cards_a_call(smartcard, irp->input, call);
-
-	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
-	return status;
-}
-
-static LONG smartcard_LocateCardsW_Decode(SMARTCARD_DEVICE* smartcard,
-                                          SMARTCARD_OPERATION* operation)
-{
-	LONG status;
-	LocateCardsW_Call* call;
-	IRP* irp = operation->irp;
-	operation->call = call = calloc(1, sizeof(LocateCardsW_Call));
-
-	if (!call)
-		return STATUS_NO_MEMORY;
-
-	status = smartcard_unpack_locate_cards_w_call(smartcard, irp->input, call);
+	if ((status = smartcard_unpack_list_readers_call(smartcard, irp->input, call)))
+		WLog_ERR(TAG, "smartcard_unpack_list_readers_call failed with error %" PRId32 "", status);
 
+	smartcard_trace_list_readers_call(smartcard, call, TRUE);
 	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
 	return status;
 }
@@ -703,25 +603,13 @@ static LONG smartcard_ListReadersW_Call(SMARTCARD_DEVICE* smartcard, SMARTCARD_O
 {
 	LONG status;
 	ListReaders_Return ret;
+	LPWSTR mszReaders = NULL;
 	DWORD cchReaders = 0;
 	IRP* irp = operation->irp;
 	ListReaders_Call* call = operation->call;
-	union {
-		const BYTE* bp;
-		const char* sz;
-		const WCHAR* wz;
-	} string;
-	union {
-		WCHAR** ppw;
-		WCHAR* pw;
-		CHAR* pc;
-		BYTE* pb;
-	} mszReaders;
-
-	string.bp = call->mszGroups;
 	cchReaders = SCARD_AUTOALLOCATE;
-	status = ret.ReturnCode =
-	    SCardListReadersW(operation->hContext, string.wz, (LPWSTR)&mszReaders.pw, &cchReaders);
+	status = ret.ReturnCode = SCardListReadersW(operation->hContext, (LPCWSTR)call->mszGroups,
+	                                            (LPWSTR)&mszReaders, &cchReaders);
 
 	if (call->mszGroups)
 	{
@@ -730,471 +618,25 @@ static LONG smartcard_ListReadersW_Call(SMARTCARD_DEVICE* smartcard, SMARTCARD_O
 	}
 
 	if (status != SCARD_S_SUCCESS)
-		return log_status_error(TAG, "SCardListReadersW", status);
-
-	cchReaders = filter_device_by_name_w(smartcard->names, &mszReaders.pw, cchReaders);
-	ret.msz = mszReaders.pb;
-	ret.cBytes = cchReaders;
-	status = smartcard_pack_list_readers_return(smartcard, irp->output, &ret, TRUE);
-
-	if (mszReaders.pb)
-		SCardFreeMemory(operation->hContext, mszReaders.pb);
-
-	if (status != SCARD_S_SUCCESS)
-		return status;
-
-	return ret.ReturnCode;
-}
-
-static LONG smartcard_IntroduceReaderGroupA_Call(SMARTCARD_DEVICE* smartcard,
-                                                 SMARTCARD_OPERATION* operation)
-{
-	Long_Return ret;
-	ContextAndStringA_Call* call = operation->call;
-	ret.ReturnCode = SCardIntroduceReaderGroupA(operation->hContext, call->sz);
-	log_status_error(TAG, "SCardIntroduceReaderGroupA", ret.ReturnCode);
-	if (call->sz)
 	{
-		free(call->sz);
-		call->sz = NULL;
-	}
-
-	smartcard_trace_long_return(smartcard, &ret, "IntroduceReaderGroupA");
-	return ret.ReturnCode;
-}
-
-static LONG smartcard_IntroduceReaderGroupW_Call(SMARTCARD_DEVICE* smartcard,
-                                                 SMARTCARD_OPERATION* operation)
-{
-	Long_Return ret;
-	ContextAndStringW_Call* call = operation->call;
-	ret.ReturnCode = SCardIntroduceReaderGroupW(operation->hContext, call->sz);
-	log_status_error(TAG, "SCardIntroduceReaderGroupW", ret.ReturnCode);
-	if (call->sz)
-	{
-		free(call->sz);
-		call->sz = NULL;
-	}
-
-	smartcard_trace_long_return(smartcard, &ret, "IntroduceReaderGroupW");
-	return ret.ReturnCode;
-}
-
-static LONG smartcard_IntroduceReaderA_Call(SMARTCARD_DEVICE* smartcard,
-                                            SMARTCARD_OPERATION* operation)
-{
-	Long_Return ret;
-	ContextAndTwoStringA_Call* call = operation->call;
-	ret.ReturnCode = SCardIntroduceReaderA(operation->hContext, call->sz1, call->sz2);
-	log_status_error(TAG, "SCardIntroduceReaderA", ret.ReturnCode);
-	free(call->sz1);
-	call->sz1 = NULL;
-	free(call->sz2);
-	call->sz2 = NULL;
-
-	smartcard_trace_long_return(smartcard, &ret, "IntroduceReaderA");
-	return ret.ReturnCode;
-}
-
-static LONG smartcard_IntroduceReaderW_Call(SMARTCARD_DEVICE* smartcard,
-                                            SMARTCARD_OPERATION* operation)
-{
-	Long_Return ret;
-	ContextAndTwoStringW_Call* call = operation->call;
-	ret.ReturnCode = SCardIntroduceReaderW(operation->hContext, call->sz1, call->sz2);
-	log_status_error(TAG, "SCardIntroduceReaderW", ret.ReturnCode);
-	free(call->sz1);
-	call->sz1 = NULL;
-	free(call->sz2);
-	call->sz2 = NULL;
-
-	smartcard_trace_long_return(smartcard, &ret, "IntroduceReaderW");
-	return ret.ReturnCode;
-}
-
-static LONG smartcard_ForgetReaderA_Call(SMARTCARD_DEVICE* smartcard,
-                                         SMARTCARD_OPERATION* operation)
-{
-	Long_Return ret;
-	ContextAndStringA_Call* call = operation->call;
-	ret.ReturnCode = SCardForgetReaderA(operation->hContext, call->sz);
-	log_status_error(TAG, "SCardForgetReaderA", ret.ReturnCode);
-	if (call->sz)
-	{
-		free(call->sz);
-		call->sz = NULL;
-	}
-
-	smartcard_trace_long_return(smartcard, &ret, "SCardForgetReaderA");
-	return ret.ReturnCode;
-}
-
-static LONG smartcard_ForgetReaderW_Call(SMARTCARD_DEVICE* smartcard,
-                                         SMARTCARD_OPERATION* operation)
-{
-	Long_Return ret;
-	ContextAndStringW_Call* call = operation->call;
-	ret.ReturnCode = SCardForgetReaderW(operation->hContext, call->sz);
-	log_status_error(TAG, "SCardForgetReaderW", ret.ReturnCode);
-	if (call->sz)
-	{
-		free(call->sz);
-		call->sz = NULL;
-	}
-
-	smartcard_trace_long_return(smartcard, &ret, "SCardForgetReaderW");
-	return ret.ReturnCode;
-}
-
-static LONG smartcard_AddReaderToGroupA_Call(SMARTCARD_DEVICE* smartcard,
-                                             SMARTCARD_OPERATION* operation)
-{
-	Long_Return ret;
-	ContextAndTwoStringA_Call* call = operation->call;
-	ret.ReturnCode = SCardAddReaderToGroupA(operation->hContext, call->sz1, call->sz2);
-	log_status_error(TAG, "SCardAddReaderToGroupA", ret.ReturnCode);
-	free(call->sz1);
-	call->sz1 = NULL;
-	free(call->sz2);
-	call->sz2 = NULL;
-
-	smartcard_trace_long_return(smartcard, &ret, "SCardAddReaderToGroupA");
-	return ret.ReturnCode;
-}
-
-static LONG smartcard_AddReaderToGroupW_Call(SMARTCARD_DEVICE* smartcard,
-                                             SMARTCARD_OPERATION* operation)
-{
-	Long_Return ret;
-	ContextAndTwoStringW_Call* call = operation->call;
-	ret.ReturnCode = SCardAddReaderToGroupW(operation->hContext, call->sz1, call->sz2);
-	log_status_error(TAG, "SCardAddReaderToGroupW", ret.ReturnCode);
-	free(call->sz1);
-	call->sz1 = NULL;
-	free(call->sz2);
-	call->sz2 = NULL;
-
-	smartcard_trace_long_return(smartcard, &ret, "SCardAddReaderToGroupA");
-	return ret.ReturnCode;
-}
-
-static LONG smartcard_RemoveReaderFromGroupA_Call(SMARTCARD_DEVICE* smartcard,
-                                                  SMARTCARD_OPERATION* operation)
-{
-	Long_Return ret;
-	ContextAndTwoStringA_Call* call = operation->call;
-	ret.ReturnCode = SCardRemoveReaderFromGroupA(operation->hContext, call->sz1, call->sz2);
-	log_status_error(TAG, "SCardRemoveReaderFromGroupA", ret.ReturnCode);
-	free(call->sz1);
-	call->sz1 = NULL;
-	free(call->sz2);
-	call->sz2 = NULL;
-
-	smartcard_trace_long_return(smartcard, &ret, "SCardRemoveReaderFromGroupA");
-	return ret.ReturnCode;
-}
-
-static LONG smartcard_RemoveReaderFromGroupW_Call(SMARTCARD_DEVICE* smartcard,
-                                                  SMARTCARD_OPERATION* operation)
-{
-	Long_Return ret;
-	ContextAndTwoStringW_Call* call = operation->call;
-	ret.ReturnCode = SCardRemoveReaderFromGroupW(operation->hContext, call->sz1, call->sz2);
-	log_status_error(TAG, "SCardRemoveReaderFromGroupW", ret.ReturnCode);
-	free(call->sz1);
-	call->sz1 = NULL;
-	free(call->sz2);
-	call->sz2 = NULL;
-
-	smartcard_trace_long_return(smartcard, &ret, "SCardRemoveReaderFromGroupW");
-	return ret.ReturnCode;
-}
-
-static LONG smartcard_LocateCardsA_Call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPERATION* operation)
-{
-	UINT32 x;
-	LONG status;
-	LocateCards_Return ret;
-	LocateCardsA_Call* call = operation->call;
-	IRP* irp = operation->irp;
-
-	ret.ReturnCode = SCardLocateCardsA(operation->hContext, call->mszCards, call->rgReaderStates,
-	                                   call->cReaders);
-	log_status_error(TAG, "SCardLocateCardsA", ret.ReturnCode);
-	ret.cReaders = call->cReaders;
-	ret.rgReaderStates = NULL;
-
-	free(call->mszCards);
-
-	if (ret.cReaders > 0)
-	{
-		ret.rgReaderStates = (ReaderState_Return*)calloc(ret.cReaders, sizeof(ReaderState_Return));
-
-		if (!ret.rgReaderStates)
-			return STATUS_NO_MEMORY;
-	}
-
-	for (x = 0; x < ret.cReaders; x++)
-	{
-		ret.rgReaderStates[x].dwCurrentState = call->rgReaderStates[x].dwCurrentState;
-		ret.rgReaderStates[x].dwEventState = call->rgReaderStates[x].dwEventState;
-		ret.rgReaderStates[x].cbAtr = call->rgReaderStates[x].cbAtr;
-		CopyMemory(&(ret.rgReaderStates[x].rgbAtr), &(call->rgReaderStates[x].rgbAtr),
-		           sizeof(ret.rgReaderStates[x].rgbAtr));
-	}
-
-	status = smartcard_pack_locate_cards_return(smartcard, irp->output, &ret);
-
-	for (x = 0; x < call->cReaders; x++)
-	{
-		SCARD_READERSTATEA* state = &call->rgReaderStates[x];
-		free(state->szReader);
-	}
-
-	free(call->rgReaderStates);
-
-	if (status != SCARD_S_SUCCESS)
+		WLog_ERR(TAG, "SCardListReadersW failed with error %" PRId32 "", status);
 		return status;
-
-	return ret.ReturnCode;
-}
-
-static LONG smartcard_LocateCardsW_Call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPERATION* operation)
-{
-	UINT32 x;
-	LONG status;
-	LocateCards_Return ret;
-	LocateCardsW_Call* call = operation->call;
-	IRP* irp = operation->irp;
-
-	ret.ReturnCode = SCardLocateCardsW(operation->hContext, call->mszCards, call->rgReaderStates,
-	                                   call->cReaders);
-	log_status_error(TAG, "SCardLocateCardsW", ret.ReturnCode);
-	ret.cReaders = call->cReaders;
-	ret.rgReaderStates = NULL;
-
-	free(call->mszCards);
-
-	if (ret.cReaders > 0)
-	{
-		ret.rgReaderStates = (ReaderState_Return*)calloc(ret.cReaders, sizeof(ReaderState_Return));
-
-		if (!ret.rgReaderStates)
-			return STATUS_NO_MEMORY;
-	}
-
-	for (x = 0; x < ret.cReaders; x++)
-	{
-		ret.rgReaderStates[x].dwCurrentState = call->rgReaderStates[x].dwCurrentState;
-		ret.rgReaderStates[x].dwEventState = call->rgReaderStates[x].dwEventState;
-		ret.rgReaderStates[x].cbAtr = call->rgReaderStates[x].cbAtr;
-		CopyMemory(&(ret.rgReaderStates[x].rgbAtr), &(call->rgReaderStates[x].rgbAtr),
-		           sizeof(ret.rgReaderStates[x].rgbAtr));
 	}
 
-	status = smartcard_pack_locate_cards_return(smartcard, irp->output, &ret);
-
-	for (x = 0; x < call->cReaders; x++)
-	{
-		SCARD_READERSTATEW* state = &call->rgReaderStates[x];
-		free(state->szReader);
-	}
-
-	free(call->rgReaderStates);
-
-	if (status != SCARD_S_SUCCESS)
-		return status;
-
-	return ret.ReturnCode;
-}
-
-static LONG smartcard_ReadCacheA_Call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPERATION* operation)
-{
-	LONG status;
-	ReadCache_Return ret = { 0 };
-	ReadCacheA_Call* call = operation->call;
-	IRP* irp = operation->irp;
-	BOOL autoalloc = (call->Common.cbDataLen == SCARD_AUTOALLOCATE);
-
-	if (!call->Common.fPbDataIsNULL)
-	{
-		ret.cbDataLen = call->Common.cbDataLen;
-		if (!autoalloc)
-		{
-			ret.pbData = malloc(ret.cbDataLen);
-			if (!ret.pbData)
-				return SCARD_F_INTERNAL_ERROR;
-		}
-	}
-
-	if (autoalloc)
-		ret.ReturnCode = SCardReadCacheA(operation->hContext, call->Common.CardIdentifier,
-		                                 call->Common.FreshnessCounter, call->szLookupName,
-		                                 (BYTE*)&ret.pbData, &ret.cbDataLen);
-	else
-		ret.ReturnCode = SCardReadCacheA(operation->hContext, call->Common.CardIdentifier,
-		                                 call->Common.FreshnessCounter, call->szLookupName,
-		                                 ret.pbData, &ret.cbDataLen);
-	if ((ret.ReturnCode != SCARD_W_CACHE_ITEM_NOT_FOUND) &&
-	    (ret.ReturnCode != SCARD_W_CACHE_ITEM_STALE))
-	{
-		log_status_error(TAG, "SCardReadCacheA", ret.ReturnCode);
-	}
-	free(call->szLookupName);
-	free(call->Common.CardIdentifier);
-
-	status = smartcard_pack_read_cache_return(smartcard, irp->output, &ret);
-	if (autoalloc)
-		SCardFreeMemory(operation->hContext, ret.pbData);
-	else
-		free(ret.pbData);
-	if (status != SCARD_S_SUCCESS)
-		return status;
-
-	return ret.ReturnCode;
-}
-
-static LONG smartcard_ReadCacheW_Call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPERATION* operation)
-{
-	LONG status;
-	ReadCache_Return ret = { 0 };
-	ReadCacheW_Call* call = operation->call;
-	IRP* irp = operation->irp;
-	BOOL autoalloc = (call->Common.cbDataLen == SCARD_AUTOALLOCATE);
-	if (!call->Common.fPbDataIsNULL)
-	{
-		ret.cbDataLen = call->Common.cbDataLen;
-		if (!autoalloc)
-		{
-			ret.pbData = malloc(ret.cbDataLen);
-			if (!ret.pbData)
-				return SCARD_F_INTERNAL_ERROR;
-		}
-	}
+	cchReaders = filter_device_by_name_w(smartcard->names, &mszReaders, cchReaders);
+	ret.msz = (BYTE*)mszReaders;
+	ret.cBytes = cchReaders * 2;
+	smartcard_trace_list_readers_return(smartcard, &ret, TRUE);
 
-	if (autoalloc)
-		ret.ReturnCode = SCardReadCacheW(operation->hContext, call->Common.CardIdentifier,
-		                                 call->Common.FreshnessCounter, call->szLookupName,
-		                                 (BYTE*)&ret.pbData, &ret.cbDataLen);
-	else
-		ret.ReturnCode = SCardReadCacheW(operation->hContext, call->Common.CardIdentifier,
-		                                 call->Common.FreshnessCounter, call->szLookupName,
-		                                 ret.pbData, &ret.cbDataLen);
-	if ((ret.ReturnCode != SCARD_W_CACHE_ITEM_NOT_FOUND) &&
-	    (ret.ReturnCode != SCARD_W_CACHE_ITEM_STALE))
+	if ((status = smartcard_pack_list_readers_return(smartcard, irp->output, &ret)))
 	{
-		log_status_error(TAG, "SCardReadCacheA", ret.ReturnCode);
-	}
-	free(call->szLookupName);
-	free(call->Common.CardIdentifier);
-
-	status = smartcard_pack_read_cache_return(smartcard, irp->output, &ret);
-	if (autoalloc)
-		SCardFreeMemory(operation->hContext, ret.pbData);
-	else
-		free(ret.pbData);
-	if (status != SCARD_S_SUCCESS)
-		return status;
-
-	return ret.ReturnCode;
-}
-
-static LONG smartcard_WriteCacheA_Call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPERATION* operation)
-{
-	Long_Return ret;
-	WriteCacheA_Call* call = operation->call;
-
-	ret.ReturnCode = SCardWriteCacheA(operation->hContext, call->Common.CardIdentifier,
-	                                  call->Common.FreshnessCounter, call->szLookupName,
-	                                  call->Common.pbData, call->Common.cbDataLen);
-	log_status_error(TAG, "SCardWriteCacheA", ret.ReturnCode);
-	free(call->szLookupName);
-	free(call->Common.CardIdentifier);
-	free(call->Common.pbData);
-
-	smartcard_trace_long_return(smartcard, &ret, "SCardWriteCacheA");
-	return ret.ReturnCode;
-}
-
-static LONG smartcard_WriteCacheW_Call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPERATION* operation)
-{
-	Long_Return ret;
-	WriteCacheW_Call* call = operation->call;
-
-	ret.ReturnCode = SCardWriteCacheW(operation->hContext, call->Common.CardIdentifier,
-	                                  call->Common.FreshnessCounter, call->szLookupName,
-	                                  call->Common.pbData, call->Common.cbDataLen);
-	log_status_error(TAG, "SCardWriteCacheW", ret.ReturnCode);
-	free(call->szLookupName);
-	free(call->Common.CardIdentifier);
-	free(call->Common.pbData);
-
-	smartcard_trace_long_return(smartcard, &ret, "SCardWriteCacheW");
-	return ret.ReturnCode;
-}
-
-static LONG smartcard_GetTransmitCount_Call(SMARTCARD_DEVICE* smartcard,
-                                            SMARTCARD_OPERATION* operation)
-{
-	LONG status;
-	GetTransmitCount_Return ret;
-	IRP* irp = operation->irp;
-
-	ret.ReturnCode = SCardGetTransmitCount(operation->hContext, &ret.cTransmitCount);
-	log_status_error(TAG, "SCardGetTransmitCount", ret.ReturnCode);
-	status = smartcard_pack_get_transmit_count_return(smartcard, irp->output, &ret);
-	if (status != SCARD_S_SUCCESS)
-		return status;
-
-	return ret.ReturnCode;
-}
-
-static LONG smartcard_ReleaseStartedEvent_Call(SMARTCARD_DEVICE* smartcard,
-                                               SMARTCARD_OPERATION* operation)
-{
-	WINPR_UNUSED(smartcard);
-	WINPR_UNUSED(operation);
-
-	WLog_WARN(TAG, "According to [MS-RDPESC] 3.1.4 Message Processing Events and Sequencing Rules "
-	               "this is not supported?!?");
-	return SCARD_E_UNSUPPORTED_FEATURE;
-}
-
-static LONG smartcard_GetReaderIcon_Call(SMARTCARD_DEVICE* smartcard,
-                                         SMARTCARD_OPERATION* operation)
-{
-	LONG status;
-	GetReaderIcon_Return ret = { 0 };
-	GetReaderIcon_Call* call = operation->call;
-	IRP* irp = operation->irp;
-
-	ret.cbDataLen = SCARD_AUTOALLOCATE;
-	ret.ReturnCode = SCardGetReaderIconW(operation->hContext, call->szReaderName,
-	                                     (LPBYTE)&ret.pbData, &ret.cbDataLen);
-	log_status_error(TAG, "SCardGetReaderIconW", ret.ReturnCode);
-	free(call->szReaderName);
-	status = smartcard_pack_get_reader_icon_return(smartcard, irp->output, &ret);
-	SCardFreeMemory(operation->hContext, ret.pbData);
-	if (status != SCARD_S_SUCCESS)
-		return status;
-
-	return ret.ReturnCode;
-}
-
-static LONG smartcard_GetDeviceTypeId_Call(SMARTCARD_DEVICE* smartcard,
-                                           SMARTCARD_OPERATION* operation)
-{
-	LONG status;
-	GetDeviceTypeId_Return ret;
-	GetDeviceTypeId_Call* call = operation->call;
-	IRP* irp = operation->irp;
+		WLog_ERR(TAG, "smartcard_pack_list_readers_return failed with error %" PRId32 "", status);
+		return status;
+	}
 
-	ret.ReturnCode =
-	    SCardGetDeviceTypeIdW(operation->hContext, call->szReaderName, &ret.dwDeviceId);
-	log_status_error(TAG, "SCardGetDeviceTypeIdW", ret.ReturnCode);
-	free(call->szReaderName);
+	if (mszReaders)
+		SCardFreeMemory(operation->hContext, mszReaders);
 
-	status = smartcard_pack_device_type_id_return(smartcard, irp->output, &ret);
 	if (status != SCARD_S_SUCCESS)
 		return status;
 
@@ -1212,8 +654,14 @@ static LONG smartcard_GetStatusChangeA_Decode(SMARTCARD_DEVICE* smartcard,
 	if (!call)
 		return STATUS_NO_MEMORY;
 
-	status = smartcard_unpack_get_status_change_a_call(smartcard, irp->input, call);
+	if ((status = smartcard_unpack_get_status_change_a_call(smartcard, irp->input, call)))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_get_status_change_a_call failed with error %" PRId32 "",
+		         status);
+		return status;
+	}
 
+	smartcard_trace_get_status_change_a_call(smartcard, call);
 	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
 	return status;
 }
@@ -1228,7 +676,6 @@ static LONG smartcard_GetStatusChangeA_Call(SMARTCARD_DEVICE* smartcard,
 	GetStatusChangeA_Call* call = operation->call;
 	ret.ReturnCode = SCardGetStatusChangeA(operation->hContext, call->dwTimeOut,
 	                                       call->rgReaderStates, call->cReaders);
-	log_status_error(TAG, "SCardGetStatusChangeA", ret.ReturnCode);
 	ret.cReaders = call->cReaders;
 	ret.rgReaderStates = NULL;
 
@@ -1245,11 +692,11 @@ static LONG smartcard_GetStatusChangeA_Call(SMARTCARD_DEVICE* smartcard,
 		ret.rgReaderStates[index].dwCurrentState = call->rgReaderStates[index].dwCurrentState;
 		ret.rgReaderStates[index].dwEventState = call->rgReaderStates[index].dwEventState;
 		ret.rgReaderStates[index].cbAtr = call->rgReaderStates[index].cbAtr;
-		CopyMemory(&(ret.rgReaderStates[index].rgbAtr), &(call->rgReaderStates[index].rgbAtr),
-		           sizeof(ret.rgReaderStates[index].rgbAtr));
+		CopyMemory(&(ret.rgReaderStates[index].rgbAtr), &(call->rgReaderStates[index].rgbAtr), 32);
 	}
 
-	smartcard_pack_get_status_change_return(smartcard, irp->output, &ret, FALSE);
+	smartcard_trace_get_status_change_return(smartcard, &ret, FALSE);
+	smartcard_pack_get_status_change_return(smartcard, irp->output, &ret);
 
 	if (call->rgReaderStates)
 	{
@@ -1277,8 +724,11 @@ static LONG smartcard_GetStatusChangeW_Decode(SMARTCARD_DEVICE* smartcard,
 	if (!call)
 		return STATUS_NO_MEMORY;
 
-	status = smartcard_unpack_get_status_change_w_call(smartcard, irp->input, call);
+	if ((status = smartcard_unpack_get_status_change_w_call(smartcard, irp->input, call)))
+		WLog_ERR(TAG, "smartcard_unpack_get_status_change_w_call failed with error %" PRId32 "",
+		         status);
 
+	smartcard_trace_get_status_change_w_call(smartcard, call);
 	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
 	return status;
 }
@@ -1293,7 +743,6 @@ static LONG smartcard_GetStatusChangeW_Call(SMARTCARD_DEVICE* smartcard,
 	GetStatusChangeW_Call* call = operation->call;
 	ret.ReturnCode = SCardGetStatusChangeW(operation->hContext, call->dwTimeOut,
 	                                       call->rgReaderStates, call->cReaders);
-	log_status_error(TAG, "SCardGetStatusChangeW", ret.ReturnCode);
 	ret.cReaders = call->cReaders;
 	ret.rgReaderStates = NULL;
 
@@ -1310,11 +759,11 @@ static LONG smartcard_GetStatusChangeW_Call(SMARTCARD_DEVICE* smartcard,
 		ret.rgReaderStates[index].dwCurrentState = call->rgReaderStates[index].dwCurrentState;
 		ret.rgReaderStates[index].dwEventState = call->rgReaderStates[index].dwEventState;
 		ret.rgReaderStates[index].cbAtr = call->rgReaderStates[index].cbAtr;
-		CopyMemory(&(ret.rgReaderStates[index].rgbAtr), &(call->rgReaderStates[index].rgbAtr),
-		           sizeof(ret.rgReaderStates[index].rgbAtr));
+		CopyMemory(&(ret.rgReaderStates[index].rgbAtr), &(call->rgReaderStates[index].rgbAtr), 32);
 	}
 
-	smartcard_pack_get_status_change_return(smartcard, irp->output, &ret, TRUE);
+	smartcard_trace_get_status_change_return(smartcard, &ret, TRUE);
+	smartcard_pack_get_status_change_return(smartcard, irp->output, &ret);
 
 	if (call->rgReaderStates)
 	{
@@ -1341,18 +790,25 @@ static LONG smartcard_Cancel_Decode(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPERA
 	if (!call)
 		return STATUS_NO_MEMORY;
 
-	status = smartcard_unpack_context_call(smartcard, irp->input, call, "Cancel");
+	if ((status = smartcard_unpack_context_call(smartcard, irp->input, call)))
+		WLog_ERR(TAG, "smartcard_unpack_context_call failed with error %" PRId32 "", status);
 
+	smartcard_trace_context_call(smartcard, call, "Cancel");
 	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
 	return status;
 }
 
 static LONG smartcard_Cancel_Call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPERATION* operation)
 {
+	LONG status;
 	Long_Return ret;
 
-	ret.ReturnCode = SCardCancel(operation->hContext);
-	log_status_error(TAG, "SCardCancel", ret.ReturnCode);
+	if ((status = ret.ReturnCode = SCardCancel(operation->hContext)))
+	{
+		WLog_ERR(TAG, "SCardCancel failed with error %" PRId32 "", status);
+		return status;
+	}
+
 	smartcard_trace_long_return(smartcard, &ret, "Cancel");
 	return ret.ReturnCode;
 }
@@ -1367,8 +823,10 @@ static LONG smartcard_ConnectA_Decode(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPE
 	if (!call)
 		return STATUS_NO_MEMORY;
 
-	status = smartcard_unpack_connect_a_call(smartcard, irp->input, call);
+	if ((status = smartcard_unpack_connect_a_call(smartcard, irp->input, call)))
+		WLog_ERR(TAG, "smartcard_unpack_connect_a_call failed with error %" PRId32 "", status);
 
+	smartcard_trace_connect_a_call(smartcard, call);
 	operation->hContext =
 	    smartcard_scard_context_native_from_redir(smartcard, &(call->Common.hContext));
 	return status;
@@ -1393,10 +851,19 @@ static LONG smartcard_ConnectA_Call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPERA
 	                  call->Common.dwPreferredProtocols, &hCard, &ret.dwActiveProtocol);
 	smartcard_scard_context_native_to_redir(smartcard, &(ret.hContext), operation->hContext);
 	smartcard_scard_handle_native_to_redir(smartcard, &(ret.hCard), hCard);
+	smartcard_trace_connect_return(smartcard, &ret);
 
-	status = smartcard_pack_connect_return(smartcard, irp->output, &ret);
-	if (status != SCARD_S_SUCCESS)
+	if (status)
+	{
+		WLog_ERR(TAG, "SCardConnectA failed with error %" PRId32 "", status);
+		goto out_fail;
+	}
+
+	if ((status = smartcard_pack_connect_return(smartcard, irp->output, &ret)))
+	{
+		WLog_ERR(TAG, "smartcard_pack_connect_return failed with error %" PRId32 "", status);
 		goto out_fail;
+	}
 
 	status = ret.ReturnCode;
 out_fail:
@@ -1414,8 +881,10 @@ static LONG smartcard_ConnectW_Decode(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPE
 	if (!call)
 		return STATUS_NO_MEMORY;
 
-	status = smartcard_unpack_connect_w_call(smartcard, irp->input, call);
+	if ((status = smartcard_unpack_connect_w_call(smartcard, irp->input, call)))
+		WLog_ERR(TAG, "smartcard_unpack_connect_w_call failed with error %" PRId32 "", status);
 
+	smartcard_trace_connect_w_call(smartcard, call);
 	operation->hContext =
 	    smartcard_scard_context_native_from_redir(smartcard, &(call->Common.hContext));
 	return status;
@@ -1440,10 +909,19 @@ static LONG smartcard_ConnectW_Call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPERA
 	                  call->Common.dwPreferredProtocols, &hCard, &ret.dwActiveProtocol);
 	smartcard_scard_context_native_to_redir(smartcard, &(ret.hContext), operation->hContext);
 	smartcard_scard_handle_native_to_redir(smartcard, &(ret.hCard), hCard);
+	smartcard_trace_connect_return(smartcard, &ret);
 
-	status = smartcard_pack_connect_return(smartcard, irp->output, &ret);
-	if (status != SCARD_S_SUCCESS)
+	if (status)
+	{
+		WLog_ERR(TAG, "SCardConnectW failed with error %" PRId32 "", status);
+		goto out_fail;
+	}
+
+	if ((status = smartcard_pack_connect_return(smartcard, irp->output, &ret)))
+	{
+		WLog_ERR(TAG, "smartcard_pack_connect_return failed with error %" PRId32 "", status);
 		goto out_fail;
+	}
 
 	status = ret.ReturnCode;
 out_fail:
@@ -1461,8 +939,10 @@ static LONG smartcard_Reconnect_Decode(SMARTCARD_DEVICE* smartcard, SMARTCARD_OP
 	if (!call)
 		return STATUS_NO_MEMORY;
 
-	status = smartcard_unpack_reconnect_call(smartcard, irp->input, call);
+	if ((status = smartcard_unpack_reconnect_call(smartcard, irp->input, call)))
+		WLog_ERR(TAG, "smartcard_unpack_reconnect_call failed with error %" PRId32 "", status);
 
+	smartcard_trace_reconnect_call(smartcard, call);
 	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
 	operation->hCard = smartcard_scard_handle_native_from_redir(smartcard, &(call->hCard));
 	return status;
@@ -1476,10 +956,13 @@ static LONG smartcard_Reconnect_Call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPER
 	Reconnect_Call* call = operation->call;
 	ret.ReturnCode = SCardReconnect(operation->hCard, call->dwShareMode, call->dwPreferredProtocols,
 	                                call->dwInitialization, &ret.dwActiveProtocol);
-	log_status_error(TAG, "SCardReconnect", ret.ReturnCode);
-	status = smartcard_pack_reconnect_return(smartcard, irp->output, &ret);
-	if (status != SCARD_S_SUCCESS)
+	smartcard_trace_reconnect_return(smartcard, &ret);
+
+	if ((status = smartcard_pack_reconnect_return(smartcard, irp->output, &ret)))
+	{
+		WLog_ERR(TAG, "smartcard_pack_reconnect_return failed with error %" PRId32 "", status);
 		return status;
+	}
 
 	return ret.ReturnCode;
 }
@@ -1494,8 +977,11 @@ static LONG smartcard_Disconnect_Decode(SMARTCARD_DEVICE* smartcard, SMARTCARD_O
 	if (!call)
 		return STATUS_NO_MEMORY;
 
-	status = smartcard_unpack_hcard_and_disposition_call(smartcard, irp->input, call, "Disconnect");
+	if ((status = smartcard_unpack_hcard_and_disposition_call(smartcard, irp->input, call)))
+		WLog_ERR(TAG, "smartcard_unpack_hcard_and_disposition_call failed with error %" PRId32 "",
+		         status);
 
+	smartcard_trace_hcard_and_disposition_call(smartcard, call, "Disconnect");
 	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
 	operation->hCard = smartcard_scard_handle_native_from_redir(smartcard, &(call->hCard));
 	return status;
@@ -1503,13 +989,21 @@ static LONG smartcard_Disconnect_Decode(SMARTCARD_DEVICE* smartcard, SMARTCARD_O
 
 static LONG smartcard_Disconnect_Call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPERATION* operation)
 {
+	LONG status;
 	Long_Return ret;
 	HCardAndDisposition_Call* call = operation->call;
 
-	ret.ReturnCode = SCardDisconnect(operation->hCard, call->dwDisposition);
-	log_status_error(TAG, "SCardDisconnect", ret.ReturnCode);
+	if ((status = ret.ReturnCode = SCardDisconnect(operation->hCard, call->dwDisposition)))
+	{
+		WLog_ERR(TAG, "SCardDisconnect failed with error %" PRId32 "", status);
+		return status;
+	}
+
 	smartcard_trace_long_return(smartcard, &ret, "Disconnect");
 
+	if (status != SCARD_S_SUCCESS)
+		return status;
+
 	return ret.ReturnCode;
 }
 
@@ -1524,9 +1018,11 @@ static LONG smartcard_BeginTransaction_Decode(SMARTCARD_DEVICE* smartcard,
 	if (!call)
 		return STATUS_NO_MEMORY;
 
-	status = smartcard_unpack_hcard_and_disposition_call(smartcard, irp->input, call,
-	                                                     "BeginTransaction");
+	if ((status = smartcard_unpack_hcard_and_disposition_call(smartcard, irp->input, call)))
+		WLog_ERR(TAG, "smartcard_unpack_hcard_and_disposition_call failed with error %" PRId32 "",
+		         status);
 
+	smartcard_trace_hcard_and_disposition_call(smartcard, call, "BeginTransaction");
 	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
 	operation->hCard = smartcard_scard_handle_native_from_redir(smartcard, &(call->hCard));
 	return status;
@@ -1537,8 +1033,12 @@ static LONG smartcard_BeginTransaction_Call(SMARTCARD_DEVICE* smartcard,
 {
 	Long_Return ret;
 
-	ret.ReturnCode = SCardBeginTransaction(operation->hCard);
-	log_status_error(TAG, "SCardBeginTransaction", ret.ReturnCode);
+	if ((ret.ReturnCode = SCardBeginTransaction(operation->hCard)))
+	{
+		WLog_ERR(TAG, "SCardBeginTransaction failed with error %" PRId32 "", ret.ReturnCode);
+		return ret.ReturnCode;
+	}
+
 	smartcard_trace_long_return(smartcard, &ret, "BeginTransaction");
 	return ret.ReturnCode;
 }
@@ -1554,9 +1054,11 @@ static LONG smartcard_EndTransaction_Decode(SMARTCARD_DEVICE* smartcard,
 	if (!call)
 		return STATUS_NO_MEMORY;
 
-	status =
-	    smartcard_unpack_hcard_and_disposition_call(smartcard, irp->input, call, "EndTransaction");
+	if ((status = smartcard_unpack_hcard_and_disposition_call(smartcard, irp->input, call)))
+		WLog_ERR(TAG, "smartcard_unpack_hcard_and_disposition_call failed with error %" PRId32 "",
+		         status);
 
+	smartcard_trace_hcard_and_disposition_call(smartcard, call, "EndTransaction");
 	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
 	operation->hCard = smartcard_scard_handle_native_from_redir(smartcard, &(call->hCard));
 	return status;
@@ -1568,8 +1070,12 @@ static LONG smartcard_EndTransaction_Call(SMARTCARD_DEVICE* smartcard,
 	Long_Return ret;
 	HCardAndDisposition_Call* call = operation->call;
 
-	ret.ReturnCode = SCardEndTransaction(operation->hCard, call->dwDisposition);
-	log_status_error(TAG, "SCardEndTransaction", ret.ReturnCode);
+	if ((ret.ReturnCode = SCardEndTransaction(operation->hCard, call->dwDisposition)))
+	{
+		WLog_ERR(TAG, "SCardEndTransaction failed with error %" PRId32 "", ret.ReturnCode);
+		return ret.ReturnCode;
+	}
+
 	smartcard_trace_long_return(smartcard, &ret, "EndTransaction");
 	return ret.ReturnCode;
 }
@@ -1584,7 +1090,8 @@ static LONG smartcard_State_Decode(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPERAT
 	if (!call)
 		return STATUS_NO_MEMORY;
 
-	status = smartcard_unpack_state_call(smartcard, irp->input, call);
+	if ((status = smartcard_unpack_state_call(smartcard, irp->input, call)))
+		WLog_ERR(TAG, "smartcard_unpack_state_call failed with error %" PRId32 "", status);
 
 	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
 	operation->hCard = smartcard_scard_handle_native_from_redir(smartcard, &(call->hCard));
@@ -1600,10 +1107,11 @@ static LONG smartcard_State_Call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPERATIO
 	ret.ReturnCode = SCardState(operation->hCard, &ret.dwState, &ret.dwProtocol, (BYTE*)&ret.rgAtr,
 	                            &ret.cbAtrLen);
 
-	log_status_error(TAG, "SCardState", ret.ReturnCode);
-	status = smartcard_pack_state_return(smartcard, irp->output, &ret);
-	if (status != SCARD_S_SUCCESS)
+	if ((status = smartcard_pack_state_return(smartcard, irp->output, &ret)))
+	{
+		WLog_ERR(TAG, "smartcard_pack_state_return failed with error %" PRId32 "", status);
 		return status;
+	}
 
 	return ret.ReturnCode;
 }
@@ -1618,8 +1126,10 @@ static LONG smartcard_StatusA_Decode(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPER
 	if (!call)
 		return STATUS_NO_MEMORY;
 
-	status = smartcard_unpack_status_call(smartcard, irp->input, call, FALSE);
+	if ((status = smartcard_unpack_status_call(smartcard, irp->input, call)))
+		WLog_ERR(TAG, "smartcard_unpack_status_call failed with error %" PRId32 "", status);
 
+	smartcard_trace_status_call(smartcard, call, FALSE);
 	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
 	operation->hCard = smartcard_scard_handle_native_from_redir(smartcard, &(call->hCard));
 	return status;
@@ -1634,7 +1144,7 @@ static LONG smartcard_StatusA_Call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPERAT
 	LPSTR mszReaderNames = NULL;
 	IRP* irp = operation->irp;
 	Status_Call* call = operation->call;
-
+	ZeroMemory(ret.pbAtr, 32);
 	call->cbAtrLen = 32;
 	cbAtrLen = call->cbAtrLen;
 
@@ -1648,7 +1158,6 @@ static LONG smartcard_StatusA_Call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPERAT
 	                 &cchReaderLen, &ret.dwState, &ret.dwProtocol,
 	                 cbAtrLen ? (BYTE*)&ret.pbAtr : NULL, &cbAtrLen);
 
-	log_status_error(TAG, "SCardStatusA", status);
 	if (status == SCARD_S_SUCCESS)
 	{
 		if (!call->fmszReaderNamesIsNULL)
@@ -1660,13 +1169,19 @@ static LONG smartcard_StatusA_Call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPERAT
 			ret.cbAtrLen = cbAtrLen;
 	}
 
-	status = smartcard_pack_status_return(smartcard, irp->output, &ret, FALSE);
+	smartcard_trace_status_return(smartcard, &ret, FALSE);
+
+	if ((status = smartcard_pack_status_return(smartcard, irp->output, &ret)))
+	{
+		WLog_ERR(TAG, "smartcard_pack_status_return failed with error %" PRId32 "", status);
+		return status;
+	}
 
 	if (mszReaderNames)
+	{
 		SCardFreeMemory(operation->hContext, mszReaderNames);
+	}
 
-	if (status != SCARD_S_SUCCESS)
-		return status;
 	return ret.ReturnCode;
 }
 
@@ -1680,8 +1195,10 @@ static LONG smartcard_StatusW_Decode(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPER
 	if (!call)
 		return STATUS_NO_MEMORY;
 
-	status = smartcard_unpack_status_call(smartcard, irp->input, call, TRUE);
+	if ((status = smartcard_unpack_status_call(smartcard, irp->input, call)))
+		WLog_ERR(TAG, "smartcard_unpack_status_call failed with error %" PRId32 "", status);
 
+	smartcard_trace_status_call(smartcard, call, TRUE);
 	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
 	operation->hCard = smartcard_scard_handle_native_from_redir(smartcard, &(call->hCard));
 	return status;
@@ -1690,38 +1207,51 @@ static LONG smartcard_StatusW_Decode(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPER
 static LONG smartcard_StatusW_Call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPERATION* operation)
 {
 	LONG status;
-	Status_Return ret = { 0 };
+	Status_Return ret;
+	DWORD cchReaderLen = 0;
 	LPWSTR mszReaderNames = NULL;
 	IRP* irp = operation->irp;
 	Status_Call* call = operation->call;
 	DWORD cbAtrLen;
 
-	/**
-	 * [MS-RDPESC]
-	 * According to 2.2.2.18 Status_Call cbAtrLen is unused an must be ignored upon receipt.
-	 */
-	cbAtrLen = call->cbAtrLen = 32;
+	if (call->cbAtrLen > 32)
+		call->cbAtrLen = 32;
 
 	if (call->fmszReaderNamesIsNULL)
-		ret.cBytes = 0;
+		cchReaderLen = 0;
 	else
-		ret.cBytes = SCARD_AUTOALLOCATE;
+		cchReaderLen = SCARD_AUTOALLOCATE;
 
+	cbAtrLen = call->cbAtrLen;
+	ZeroMemory(ret.pbAtr, 32);
 	status = ret.ReturnCode =
 	    SCardStatusW(operation->hCard, call->fmszReaderNamesIsNULL ? NULL : (LPWSTR)&mszReaderNames,
-	                 &ret.cBytes, &ret.dwState, &ret.dwProtocol, (BYTE*)&ret.pbAtr, &cbAtrLen);
-	log_status_error(TAG, "SCardStatusW", status);
+	                 &cchReaderLen, &ret.dwState, &ret.dwProtocol, (BYTE*)&ret.pbAtr, &cbAtrLen);
+
 	if (status == SCARD_S_SUCCESS)
 	{
 		if (!call->fmszReaderNamesIsNULL)
 			ret.mszReaderNames = (BYTE*)mszReaderNames;
 
-		ret.cbAtrLen = cbAtrLen;
+			// WinScard returns the number of CHARACTERS whereas pcsc-lite returns the
+			// number of BYTES.
+#ifdef _WIN32
+		ret.cBytes = cchReaderLen * 2;
+#else
+		ret.cBytes = cchReaderLen;
+#endif
+
+		if (call->cbAtrLen)
+			ret.cbAtrLen = cbAtrLen;
 	}
 
-	status = smartcard_pack_status_return(smartcard, irp->output, &ret, TRUE);
-	if (status != SCARD_S_SUCCESS)
+	smartcard_trace_status_return(smartcard, &ret, TRUE);
+
+	if ((status = smartcard_pack_status_return(smartcard, irp->output, &ret)))
+	{
+		WLog_ERR(TAG, "smartcard_pack_status_return failed with error %" PRId32 "", status);
 		return status;
+	}
 
 	if (mszReaderNames)
 		SCardFreeMemory(operation->hContext, mszReaderNames);
@@ -1739,8 +1269,10 @@ static LONG smartcard_Transmit_Decode(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPE
 	if (!call)
 		return STATUS_NO_MEMORY;
 
-	status = smartcard_unpack_transmit_call(smartcard, irp->input, call);
+	if ((status = smartcard_unpack_transmit_call(smartcard, irp->input, call)))
+		WLog_ERR(TAG, "smartcard_unpack_transmit_call failed with error %" PRId32 "", status);
 
+	smartcard_trace_transmit_call(smartcard, call);
 	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
 	operation->hCard = smartcard_scard_handle_native_from_redir(smartcard, &(call->hCard));
 	return status;
@@ -1771,17 +1303,19 @@ static LONG smartcard_Transmit_Call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPERA
 	ret.ReturnCode =
 	    SCardTransmit(operation->hCard, call->pioSendPci, call->pbSendBuffer, call->cbSendLength,
 	                  ret.pioRecvPci, ret.pbRecvBuffer, &(ret.cbRecvLength));
-
-	log_status_error(TAG, "SCardTransmit", ret.ReturnCode);
-
+	smartcard_trace_transmit_return(smartcard, &ret);
 	status = smartcard_pack_transmit_return(smartcard, irp->output, &ret);
 	free(call->pbSendBuffer);
 	free(ret.pbRecvBuffer);
 	free(call->pioSendPci);
 	free(call->pioRecvPci);
 
-	if (status != SCARD_S_SUCCESS)
+	if (status)
+	{
+		WLog_ERR(TAG, "smartcard_pack_transmit_return failed with error %" PRId32 "", status);
 		return status;
+	}
+
 	return ret.ReturnCode;
 }
 
@@ -1795,8 +1329,10 @@ static LONG smartcard_Control_Decode(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPER
 	if (!call)
 		return STATUS_NO_MEMORY;
 
-	status = smartcard_unpack_control_call(smartcard, irp->input, call);
+	if ((status = smartcard_unpack_control_call(smartcard, irp->input, call)))
+		WLog_ERR(TAG, "smartcard_unpack_control_call failed with error %" PRId32 "", status);
 
+	smartcard_trace_control_call(smartcard, call);
 	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
 	operation->hCard = smartcard_scard_handle_native_from_redir(smartcard, &(call->hCard));
 	return status;
@@ -1805,7 +1341,7 @@ static LONG smartcard_Control_Decode(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPER
 static LONG smartcard_Control_Call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPERATION* operation)
 {
 	LONG status;
-	Control_Return ret = { 0 };
+	Control_Return ret;
 	IRP* irp = operation->irp;
 	Control_Call* call = operation->call;
 	ret.cbOutBufferSize = call->cbOutBufferSize;
@@ -1817,13 +1353,16 @@ static LONG smartcard_Control_Call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPERAT
 	ret.ReturnCode =
 	    SCardControl(operation->hCard, call->dwControlCode, call->pvInBuffer, call->cbInBufferSize,
 	                 ret.pvOutBuffer, call->cbOutBufferSize, &ret.cbOutBufferSize);
-	log_status_error(TAG, "SCardControl", ret.ReturnCode);
-	status = smartcard_pack_control_return(smartcard, irp->output, &ret);
+	smartcard_trace_control_return(smartcard, &ret);
+
+	if ((status = smartcard_pack_control_return(smartcard, irp->output, &ret)))
+	{
+		WLog_ERR(TAG, "smartcard_pack_control_return failed with error %" PRId32 "", status);
+		return status;
+	}
 
 	free(call->pvInBuffer);
 	free(ret.pvOutBuffer);
-	if (status != SCARD_S_SUCCESS)
-		return status;
 	return ret.ReturnCode;
 }
 
@@ -1837,25 +1376,10 @@ static LONG smartcard_GetAttrib_Decode(SMARTCARD_DEVICE* smartcard, SMARTCARD_OP
 	if (!call)
 		return STATUS_NO_MEMORY;
 
-	status = smartcard_unpack_get_attrib_call(smartcard, irp->input, call);
-
-	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
-	operation->hCard = smartcard_scard_handle_native_from_redir(smartcard, &(call->hCard));
-	return status;
-}
-
-static LONG smartcard_SetAttrib_Decode(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPERATION* operation)
-{
-	LONG status;
-	SetAttrib_Call* call;
-	IRP* irp = operation->irp;
-	operation->call = call = calloc(1, sizeof(SetAttrib_Call));
-
-	if (!call)
-		return STATUS_NO_MEMORY;
-
-	status = smartcard_unpack_set_attrib_call(smartcard, irp->input, call);
+	if ((status = smartcard_unpack_get_attrib_call(smartcard, irp->input, call)))
+		WLog_ERR(TAG, "smartcard_unpack_get_attrib_call failed with error %" PRId32 "", status);
 
+	smartcard_trace_get_attrib_call(smartcard, call);
 	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
 	operation->hCard = smartcard_scard_handle_native_from_redir(smartcard, &(call->hCard));
 	return status;
@@ -1888,29 +1412,25 @@ static LONG smartcard_GetAttrib_Call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPER
 	ret.ReturnCode =
 	    SCardGetAttrib(operation->hCard, call->dwAttrId,
 	                   autoAllocate ? (LPBYTE) & (ret.pbAttr) : ret.pbAttr, &cbAttrLen);
-	log_status_error(TAG, "SCardGetAttrib", ret.ReturnCode);
 	ret.cbAttrLen = cbAttrLen;
+	smartcard_trace_get_attrib_return(smartcard, &ret, call->dwAttrId);
 
-	status = smartcard_pack_get_attrib_return(smartcard, irp->output, &ret, call->dwAttrId);
-
-	if (autoAllocate)
-		SCardFreeMemory(operation->hContext, ret.pbAttr);
-	else
+	if (ret.ReturnCode)
+	{
+		WLog_WARN(TAG, "SCardGetAttrib: %s (0x%08" PRIX32 ") cbAttrLen: %" PRIu32 "",
+		          SCardGetAttributeString(call->dwAttrId), call->dwAttrId, call->cbAttrLen);
+		Stream_Zero(irp->output, 256);
 		free(ret.pbAttr);
-	return status;
-}
-
-static LONG smartcard_SetAttrib_Call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPERATION* operation)
-{
-	Long_Return ret;
-	SetAttrib_Call* call = operation->call;
+		return ret.ReturnCode;
+	}
 
-	ret.ReturnCode =
-	    SCardSetAttrib(operation->hCard, call->dwAttrId, call->pbAttr, call->cbAttrLen);
-	log_status_error(TAG, "SCardSetAttrib", ret.ReturnCode);
-	free(call->pbAttr);
-	smartcard_trace_long_return(smartcard, &ret, "SetAttrib");
+	if ((status = smartcard_pack_get_attrib_return(smartcard, irp->output, &ret)))
+	{
+		WLog_ERR(TAG, "smartcard_pack_get_attrib_return failed with error %" PRId32 "", status);
+		return status;
+	}
 
+	free(ret.pbAttr);
 	return ret.ReturnCode;
 }
 
@@ -1933,7 +1453,7 @@ static LONG smartcard_AccessStartedEvent_Decode(SMARTCARD_DEVICE* smartcard,
 		return SCARD_F_INTERNAL_ERROR;
 	}
 
-	Stream_Read_INT32(irp->input, call->LongValue); /* Unused (4 bytes) */
+	Stream_Read_UINT32(irp->input, call->LongValue); /* Unused (4 bytes) */
 	return SCARD_S_SUCCESS;
 }
 
@@ -1963,156 +1483,11 @@ static LONG smartcard_LocateCardsByATRA_Decode(SMARTCARD_DEVICE* smartcard,
 	if (!call)
 		return STATUS_NO_MEMORY;
 
-	status = smartcard_unpack_locate_cards_by_atr_a_call(smartcard, irp->input, call);
-
-	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
-	return status;
-}
-
-static LONG smartcard_LocateCardsByATRW_Decode(SMARTCARD_DEVICE* smartcard,
-                                               SMARTCARD_OPERATION* operation)
-{
-	LONG status;
-	LocateCardsByATRW_Call* call;
-	IRP* irp = operation->irp;
-	operation->call = call = calloc(1, sizeof(LocateCardsByATRW_Call));
-
-	if (!call)
-		return STATUS_NO_MEMORY;
-
-	status = smartcard_unpack_locate_cards_by_atr_w_call(smartcard, irp->input, call);
-
-	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
-	return status;
-}
-
-static LONG smartcard_ReadCacheA_Decode(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPERATION* operation)
-{
-	LONG status;
-	ReadCacheA_Call* call;
-	IRP* irp = operation->irp;
-	operation->call = call = calloc(1, sizeof(ReadCacheA_Call));
-
-	if (!call)
-		return STATUS_NO_MEMORY;
-
-	status = smartcard_unpack_read_cache_a_call(smartcard, irp->input, call);
-
-	operation->hContext =
-	    smartcard_scard_context_native_from_redir(smartcard, &(call->Common.hContext));
-	return status;
-}
-
-static LONG smartcard_ReadCacheW_Decode(SMARTCARD_DEVICE* smartcard, SMARTCARD_OPERATION* operation)
-{
-	LONG status;
-	ReadCacheW_Call* call;
-	IRP* irp = operation->irp;
-	operation->call = call = calloc(1, sizeof(ReadCacheW_Call));
-
-	if (!call)
-		return STATUS_NO_MEMORY;
-
-	status = smartcard_unpack_read_cache_w_call(smartcard, irp->input, call);
-
-	operation->hContext =
-	    smartcard_scard_context_native_from_redir(smartcard, &(call->Common.hContext));
-	return status;
-}
-
-static LONG smartcard_WriteCacheA_Decode(SMARTCARD_DEVICE* smartcard,
-                                         SMARTCARD_OPERATION* operation)
-{
-	LONG status;
-	WriteCacheA_Call* call;
-	IRP* irp = operation->irp;
-	operation->call = call = calloc(1, sizeof(WriteCacheA_Call));
-
-	if (!call)
-		return STATUS_NO_MEMORY;
-
-	status = smartcard_unpack_write_cache_a_call(smartcard, irp->input, call);
-
-	operation->hContext =
-	    smartcard_scard_context_native_from_redir(smartcard, &(call->Common.hContext));
-	return status;
-}
-
-static LONG smartcard_WriteCacheW_Decode(SMARTCARD_DEVICE* smartcard,
-                                         SMARTCARD_OPERATION* operation)
-{
-	LONG status;
-	WriteCacheW_Call* call;
-	IRP* irp = operation->irp;
-	operation->call = call = calloc(1, sizeof(WriteCacheW_Call));
-
-	if (!call)
-		return STATUS_NO_MEMORY;
-
-	status = smartcard_unpack_write_cache_w_call(smartcard, irp->input, call);
-
-	operation->hContext =
-	    smartcard_scard_context_native_from_redir(smartcard, &(call->Common.hContext));
-	return status;
-}
-
-static LONG smartcard_GetTransmitCount_Decode(SMARTCARD_DEVICE* smartcard,
-                                              SMARTCARD_OPERATION* operation)
-{
-	LONG status;
-	GetTransmitCount_Call* call;
-	IRP* irp = operation->irp;
-	operation->call = call = calloc(1, sizeof(GetTransmitCount_Call));
-
-	if (!call)
-		return STATUS_NO_MEMORY;
-
-	status = smartcard_unpack_get_transmit_count_call(smartcard, irp->input, call);
-
-	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
-	return status;
-}
-
-static LONG smartcard_ReleaseStartedEvent_Decode(SMARTCARD_DEVICE* smartcard,
-                                                 SMARTCARD_OPERATION* operation)
-{
-	WINPR_UNUSED(smartcard);
-	WINPR_UNUSED(operation);
-	WLog_WARN(TAG, "According to [MS-RDPESC] 3.1.4 Message Processing Events and Sequencing Rules "
-	               "SCARD_IOCTL_RELEASETARTEDEVENT is not supported");
-	return SCARD_E_UNSUPPORTED_FEATURE;
-}
-
-static LONG smartcard_GetReaderIcon_Decode(SMARTCARD_DEVICE* smartcard,
-                                           SMARTCARD_OPERATION* operation)
-{
-	LONG status;
-	GetReaderIcon_Call* call;
-	IRP* irp = operation->irp;
-	operation->call = call = calloc(1, sizeof(GetReaderIcon_Call));
-
-	if (!call)
-		return STATUS_NO_MEMORY;
-
-	status = smartcard_unpack_get_reader_icon_call(smartcard, irp->input, call);
-
-	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
-	return status;
-}
-
-static LONG smartcard_GetDeviceTypeId_Decode(SMARTCARD_DEVICE* smartcard,
-                                             SMARTCARD_OPERATION* operation)
-{
-	LONG status;
-	GetDeviceTypeId_Call* call;
-	IRP* irp = operation->irp;
-	operation->call = call = calloc(1, sizeof(GetDeviceTypeId_Call));
-
-	if (!call)
-		return STATUS_NO_MEMORY;
-
-	status = smartcard_unpack_get_device_type_id_call(smartcard, irp->input, call);
+	if ((status = smartcard_unpack_locate_cards_by_atr_a_call(smartcard, irp->input, call)))
+		WLog_ERR(TAG, "smartcard_unpack_locate_cards_by_atr_a_call failed with error %" PRId32 "",
+		         status);
 
+	smartcard_trace_locate_cards_by_atr_a_call(smartcard, call);
 	operation->hContext = smartcard_scard_context_native_from_redir(smartcard, &(call->hContext));
 	return status;
 }
@@ -2134,17 +1509,16 @@ static LONG smartcard_LocateCardsByATRA_Call(SMARTCARD_DEVICE* smartcard,
 
 	for (i = 0; i < call->cReaders; i++)
 	{
-		states[i].szReader = (LPSTR)call->rgReaderStates[i].szReader;
-		states[i].dwCurrentState = call->rgReaderStates[i].dwCurrentState;
-		states[i].dwEventState = call->rgReaderStates[i].dwEventState;
-		states[i].cbAtr = call->rgReaderStates[i].cbAtr;
-		CopyMemory(&(states[i].rgbAtr), &(call->rgReaderStates[i].rgbAtr), 36);
+		states[i].szReader = (LPCSTR)call->rgReaderStates[i].szReader;
+		states[i].dwCurrentState = call->rgReaderStates[i].Common.dwCurrentState;
+		states[i].dwEventState = call->rgReaderStates[i].Common.dwEventState;
+		states[i].cbAtr = call->rgReaderStates[i].Common.cbAtr;
+		CopyMemory(&(states[i].rgbAtr), &(call->rgReaderStates[i].Common.rgbAtr), 36);
 	}
 
 	status = ret.ReturnCode =
 	    SCardGetStatusChangeA(operation->hContext, 0x000001F4, states, call->cReaders);
 
-	log_status_error(TAG, "SCardGetStatusChangeA", status);
 	if (status && (status != SCARD_E_TIMEOUT) && (status != SCARD_E_CANCELLED))
 	{
 		call->cReaders = 0;
@@ -2185,15 +1559,18 @@ static LONG smartcard_LocateCardsByATRA_Call(SMARTCARD_DEVICE* smartcard,
 		ret.rgReaderStates[i].dwCurrentState = state->dwCurrentState;
 		ret.rgReaderStates[i].dwEventState = state->dwEventState;
 		ret.rgReaderStates[i].cbAtr = state->cbAtr;
-		CopyMemory(&(ret.rgReaderStates[i].rgbAtr), &(state->rgbAtr),
-		           sizeof(ret.rgReaderStates[i].rgbAtr));
+		CopyMemory(&(ret.rgReaderStates[i].rgbAtr), &(state->rgbAtr), 32);
 	}
 
 	free(states);
+	smartcard_trace_get_status_change_return(smartcard, &ret, FALSE);
 
-	status = smartcard_pack_get_status_change_return(smartcard, irp->output, &ret, FALSE);
-	if (status != SCARD_S_SUCCESS)
+	if ((status = smartcard_pack_get_status_change_return(smartcard, irp->output, &ret)))
+	{
+		WLog_ERR(TAG, "smartcard_pack_get_status_change_return failed with error %" PRId32 "",
+		         status);
 		return status;
+	}
 
 	if (call->rgReaderStates)
 	{
@@ -2253,15 +1630,21 @@ LONG smartcard_irp_device_control_decode(SMARTCARD_DEVICE* smartcard,
 	         irp->CompletionId);
 
 	if ((ioControlCode != SCARD_IOCTL_ACCESSSTARTEDEVENT) &&
-	    (ioControlCode != SCARD_IOCTL_RELEASETARTEDEVENT))
+	    (ioControlCode != SCARD_IOCTL_RELEASESTARTEDEVENT))
 	{
-		status = smartcard_unpack_common_type_header(smartcard, irp->input);
-		if (status != SCARD_S_SUCCESS)
-			return status;
+		if ((status = smartcard_unpack_common_type_header(smartcard, irp->input)))
+		{
+			WLog_ERR(TAG, "smartcard_unpack_common_type_header failed with error %" PRId32 "",
+			         status);
+			return SCARD_F_INTERNAL_ERROR;
+		}
 
-		status = smartcard_unpack_private_type_header(smartcard, irp->input);
-		if (status != SCARD_S_SUCCESS)
-			return status;
+		if ((status = smartcard_unpack_private_type_header(smartcard, irp->input)))
+		{
+			WLog_ERR(TAG, "smartcard_unpack_common_type_header failed with error %" PRId32 "",
+			         status);
+			return SCARD_F_INTERNAL_ERROR;
+		}
 	}
 
 	/* Decode */
@@ -2298,59 +1681,59 @@ LONG smartcard_irp_device_control_decode(SMARTCARD_DEVICE* smartcard,
 			break;
 
 		case SCARD_IOCTL_INTRODUCEREADERGROUPA:
-			status = smartcard_context_and_string_a_Decode(smartcard, operation);
+			status = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_INTRODUCEREADERGROUPW:
-			status = smartcard_context_and_string_w_Decode(smartcard, operation);
+			status = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_FORGETREADERGROUPA:
-			status = smartcard_context_and_string_a_Decode(smartcard, operation);
+			status = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_FORGETREADERGROUPW:
-			status = smartcard_context_and_string_w_Decode(smartcard, operation);
+			status = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_INTRODUCEREADERA:
-			status = smartcard_context_and_two_strings_a_Decode(smartcard, operation);
+			status = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_INTRODUCEREADERW:
-			status = smartcard_context_and_two_strings_w_Decode(smartcard, operation);
+			status = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_FORGETREADERA:
-			status = smartcard_context_and_string_a_Decode(smartcard, operation);
+			status = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_FORGETREADERW:
-			status = smartcard_context_and_string_w_Decode(smartcard, operation);
+			status = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_ADDREADERTOGROUPA:
-			status = smartcard_context_and_two_strings_a_Decode(smartcard, operation);
+			status = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_ADDREADERTOGROUPW:
-			status = smartcard_context_and_two_strings_w_Decode(smartcard, operation);
+			status = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_REMOVEREADERFROMGROUPA:
-			status = smartcard_context_and_two_strings_a_Decode(smartcard, operation);
+			status = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_REMOVEREADERFROMGROUPW:
-			status = smartcard_context_and_two_strings_w_Decode(smartcard, operation);
+			status = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_LOCATECARDSA:
-			status = smartcard_LocateCardsA_Decode(smartcard, operation);
+			status = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_LOCATECARDSW:
-			status = smartcard_LocateCardsW_Decode(smartcard, operation);
+			status = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_GETSTATUSCHANGEA:
@@ -2414,7 +1797,7 @@ LONG smartcard_irp_device_control_decode(SMARTCARD_DEVICE* smartcard,
 			break;
 
 		case SCARD_IOCTL_SETATTRIB:
-			status = smartcard_SetAttrib_Decode(smartcard, operation);
+			status = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_ACCESSSTARTEDEVENT:
@@ -2426,39 +1809,39 @@ LONG smartcard_irp_device_control_decode(SMARTCARD_DEVICE* smartcard,
 			break;
 
 		case SCARD_IOCTL_LOCATECARDSBYATRW:
-			status = smartcard_LocateCardsByATRW_Decode(smartcard, operation);
+			status = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_READCACHEA:
-			status = smartcard_ReadCacheA_Decode(smartcard, operation);
+			status = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_READCACHEW:
-			status = smartcard_ReadCacheW_Decode(smartcard, operation);
+			status = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_WRITECACHEA:
-			status = smartcard_WriteCacheA_Decode(smartcard, operation);
+			status = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_WRITECACHEW:
-			status = smartcard_WriteCacheW_Decode(smartcard, operation);
+			status = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_GETTRANSMITCOUNT:
-			status = smartcard_GetTransmitCount_Decode(smartcard, operation);
+			status = SCARD_F_INTERNAL_ERROR;
 			break;
 
-		case SCARD_IOCTL_RELEASETARTEDEVENT:
-			status = smartcard_ReleaseStartedEvent_Decode(smartcard, operation);
+		case SCARD_IOCTL_RELEASESTARTEDEVENT:
+			status = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_GETREADERICON:
-			status = smartcard_GetReaderIcon_Decode(smartcard, operation);
+			status = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_GETDEVICETYPEID:
-			status = smartcard_GetDeviceTypeId_Decode(smartcard, operation);
+			status = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		default:
@@ -2467,7 +1850,7 @@ LONG smartcard_irp_device_control_decode(SMARTCARD_DEVICE* smartcard,
 	}
 
 	if ((ioControlCode != SCARD_IOCTL_ACCESSSTARTEDEVENT) &&
-	    (ioControlCode != SCARD_IOCTL_RELEASETARTEDEVENT))
+	    (ioControlCode != SCARD_IOCTL_RELEASESTARTEDEVENT))
 	{
 		offset = (RDPDR_DEVICE_IO_REQUEST_LENGTH + RDPDR_DEVICE_IO_CONTROL_REQ_HDR_LENGTH);
 		smartcard_unpack_read_size_align(smartcard, irp->input,
@@ -2479,10 +1862,9 @@ LONG smartcard_irp_device_control_decode(SMARTCARD_DEVICE* smartcard,
 		SIZE_T difference;
 		difference = Stream_Length(irp->input) - Stream_GetPosition(irp->input);
 		WLog_WARN(TAG,
-		          "IRP was not fully parsed %s (%s [0x%08" PRIX32 "]): Actual: %" PRIuz
+		          "IRP was not fully parsed %s (0x%08" PRIX32 "): Actual: %" PRIuz
 		          ", Expected: %" PRIuz ", Difference: %" PRIuz "",
-		          smartcard_get_ioctl_string(ioControlCode, TRUE),
-		          smartcard_get_ioctl_string(ioControlCode, FALSE), ioControlCode,
+		          smartcard_get_ioctl_string(ioControlCode, TRUE), ioControlCode,
 		          Stream_GetPosition(irp->input), Stream_Length(irp->input), difference);
 		winpr_HexDump(TAG, WLOG_WARN, Stream_Pointer(irp->input), difference);
 	}
@@ -2524,9 +1906,7 @@ LONG smartcard_irp_device_control_call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OP
 	 * Since it's a SHOULD and not a MUST, we don't care
 	 * about it, but we still reserve at least 2048 bytes.
 	 */
-	if (!Stream_EnsureRemainingCapacity(irp->output, 2048))
-		return SCARD_E_NO_MEMORY;
-
+	Stream_EnsureRemainingCapacity(irp->output, 2048);
 	/* Device Control Response */
 	Stream_Seek_UINT32(irp->output); /* OutputBufferLength (4 bytes) */
 	Stream_Seek(irp->output, SMARTCARD_COMMON_TYPE_HEADER_LENGTH); /* CommonTypeHeader (8 bytes) */
@@ -2567,59 +1947,59 @@ LONG smartcard_irp_device_control_call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OP
 			break;
 
 		case SCARD_IOCTL_INTRODUCEREADERGROUPA:
-			result = smartcard_IntroduceReaderGroupA_Call(smartcard, operation);
+			result = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_INTRODUCEREADERGROUPW:
-			result = smartcard_IntroduceReaderGroupW_Call(smartcard, operation);
+			result = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_FORGETREADERGROUPA:
-			result = smartcard_ForgetReaderA_Call(smartcard, operation);
+			result = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_FORGETREADERGROUPW:
-			result = smartcard_ForgetReaderW_Call(smartcard, operation);
+			result = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_INTRODUCEREADERA:
-			result = smartcard_IntroduceReaderA_Call(smartcard, operation);
+			result = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_INTRODUCEREADERW:
-			result = smartcard_IntroduceReaderW_Call(smartcard, operation);
+			result = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_FORGETREADERA:
-			result = smartcard_ForgetReaderA_Call(smartcard, operation);
+			result = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_FORGETREADERW:
-			result = smartcard_ForgetReaderW_Call(smartcard, operation);
+			result = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_ADDREADERTOGROUPA:
-			result = smartcard_AddReaderToGroupA_Call(smartcard, operation);
+			result = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_ADDREADERTOGROUPW:
-			result = smartcard_AddReaderToGroupW_Call(smartcard, operation);
+			result = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_REMOVEREADERFROMGROUPA:
-			result = smartcard_RemoveReaderFromGroupA_Call(smartcard, operation);
+			result = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_REMOVEREADERFROMGROUPW:
-			result = smartcard_RemoveReaderFromGroupW_Call(smartcard, operation);
+			result = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_LOCATECARDSA:
-			result = smartcard_LocateCardsA_Call(smartcard, operation);
+			result = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_LOCATECARDSW:
-			result = smartcard_LocateCardsW_Call(smartcard, operation);
+			result = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_GETSTATUSCHANGEA:
@@ -2683,7 +2063,7 @@ LONG smartcard_irp_device_control_call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OP
 			break;
 
 		case SCARD_IOCTL_SETATTRIB:
-			result = smartcard_SetAttrib_Call(smartcard, operation);
+			result = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_ACCESSSTARTEDEVENT:
@@ -2695,39 +2075,39 @@ LONG smartcard_irp_device_control_call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OP
 			break;
 
 		case SCARD_IOCTL_LOCATECARDSBYATRW:
-			result = smartcard_LocateCardsW_Call(smartcard, operation);
+			result = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_READCACHEA:
-			result = smartcard_ReadCacheA_Call(smartcard, operation);
+			result = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_READCACHEW:
-			result = smartcard_ReadCacheW_Call(smartcard, operation);
+			result = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_WRITECACHEA:
-			result = smartcard_WriteCacheA_Call(smartcard, operation);
+			result = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_WRITECACHEW:
-			result = smartcard_WriteCacheW_Call(smartcard, operation);
+			result = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_GETTRANSMITCOUNT:
-			result = smartcard_GetTransmitCount_Call(smartcard, operation);
+			result = SCARD_F_INTERNAL_ERROR;
 			break;
 
-		case SCARD_IOCTL_RELEASETARTEDEVENT:
-			result = smartcard_ReleaseStartedEvent_Call(smartcard, operation);
+		case SCARD_IOCTL_RELEASESTARTEDEVENT:
+			result = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_GETREADERICON:
-			result = smartcard_GetReaderIcon_Call(smartcard, operation);
+			result = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		case SCARD_IOCTL_GETDEVICETYPEID:
-			result = smartcard_GetDeviceTypeId_Call(smartcard, operation);
+			result = SCARD_F_INTERNAL_ERROR;
 			break;
 
 		default:
@@ -2745,7 +2125,7 @@ LONG smartcard_irp_device_control_call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OP
 	 */
 
 	if ((ioControlCode != SCARD_IOCTL_ACCESSSTARTEDEVENT) &&
-	    (ioControlCode != SCARD_IOCTL_RELEASETARTEDEVENT))
+	    (ioControlCode != SCARD_IOCTL_RELEASESTARTEDEVENT))
 	{
 		offset = (RDPDR_DEVICE_IO_RESPONSE_LENGTH + RDPDR_DEVICE_IO_CONTROL_RSP_HDR_LENGTH);
 		smartcard_pack_write_size_align(smartcard, irp->output,
@@ -2753,8 +2133,7 @@ LONG smartcard_irp_device_control_call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OP
 	}
 
 	if ((result != SCARD_S_SUCCESS) && (result != SCARD_E_TIMEOUT) &&
-	    (result != SCARD_E_NO_READERS_AVAILABLE) && (result != SCARD_E_NO_SERVICE) &&
-	    (result != SCARD_W_CACHE_ITEM_NOT_FOUND) && (result != SCARD_W_CACHE_ITEM_STALE))
+	    (result != SCARD_E_NO_READERS_AVAILABLE) && (result != SCARD_E_NO_SERVICE))
 	{
 		WLog_WARN(TAG, "IRP failure: %s (0x%08" PRIX32 "), status: %s (0x%08" PRIX32 ")",
 		          smartcard_get_ioctl_string(ioControlCode, TRUE), ioControlCode,
@@ -2763,7 +2142,7 @@ LONG smartcard_irp_device_control_call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OP
 
 	irp->IoStatus = STATUS_SUCCESS;
 
-	if ((result & 0xC0000000L) == 0xC0000000L)
+	if ((result & 0xC0000000) == 0xC0000000)
 	{
 		/* NTSTATUS error */
 		irp->IoStatus = (UINT32)result;
@@ -2780,7 +2159,7 @@ LONG smartcard_irp_device_control_call(SMARTCARD_DEVICE* smartcard, SMARTCARD_OP
 	smartcard_pack_common_type_header(smartcard, irp->output); /* CommonTypeHeader (8 bytes) */
 	smartcard_pack_private_type_header(smartcard, irp->output,
 	                                   objectBufferLength); /* PrivateTypeHeader (8 bytes) */
-	Stream_Write_INT32(irp->output, result);                /* Result (4 bytes) */
+	Stream_Write_UINT32(irp->output, result);               /* Result (4 bytes) */
 	Stream_SetPosition(irp->output, Stream_Length(irp->output));
 	return SCARD_S_SUCCESS;
 }
diff --git a/channels/smartcard/client/smartcard_pack.c b/channels/smartcard/client/smartcard_pack.c
index a85cce6da..b2ce09a0f 100644
--- a/channels/smartcard/client/smartcard_pack.c
+++ b/channels/smartcard/client/smartcard_pack.c
@@ -5,8 +5,6 @@
  * Copyright 2014 Marc-Andre Moreau <marcandre.moreau@gmail.com>
  * Copyright 2015 Thincast Technologies GmbH
  * Copyright 2015 DI (FH) Martin Haimberger <martin.haimberger@thincast.com>
- * Copyright 2020 Armin Novak <armin.novak@thincast.com>
- * Copyright 2020 Thincast Technologies GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,2224 +28,1540 @@
 
 #include "smartcard_pack.h"
 
-static const DWORD g_LogLevel = WLOG_DEBUG;
-
-#define smartcard_unpack_redir_scard_context(smartcard, s, context, index)                \
-	smartcard_unpack_redir_scard_context_((smartcard), (s), (context), (index), __FILE__, \
-	                                      __FUNCTION__, __LINE__)
-#define smartcard_unpack_redir_scard_handle(smartcard, s, context, index)                \
-	smartcard_unpack_redir_scard_handle_((smartcard), (s), (context), (index), __FILE__, \
-	                                     __FUNCTION__, __LINE__)
-
-static LONG smartcard_unpack_redir_scard_context_(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                                  REDIR_SCARDCONTEXT* context, UINT32* index,
-                                                  const char* file, const char* function, int line);
-static LONG smartcard_pack_redir_scard_context(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                               const REDIR_SCARDCONTEXT* context, DWORD* index);
-static LONG smartcard_unpack_redir_scard_handle_(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                                 REDIR_SCARDHANDLE* handle, UINT32* index,
-                                                 const char* file, const char* function, int line);
-static LONG smartcard_pack_redir_scard_handle(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                              const REDIR_SCARDHANDLE* handle, DWORD* index);
-static LONG smartcard_unpack_redir_scard_context_ref(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                                     REDIR_SCARDCONTEXT* context);
-static LONG smartcard_pack_redir_scard_context_ref(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                                   const REDIR_SCARDCONTEXT* context);
-
-static LONG smartcard_unpack_redir_scard_handle_ref(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                                    REDIR_SCARDHANDLE* handle);
-static LONG smartcard_pack_redir_scard_handle_ref(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                                  const REDIR_SCARDHANDLE* handle);
-
-typedef enum
-{
-	NDR_PTR_FULL,
-	NDR_PTR_SIMPLE,
-	NDR_PTR_FIXED
-} ndr_ptr_t;
-
-/* Reads a NDR pointer and checks if the value read has the expected relative
- * addressing */
-#define smartcard_ndr_pointer_read(s, index, ptr) \
-	smartcard_ndr_pointer_read_((s), (index), (ptr), __FILE__, __FUNCTION__, __LINE__)
-static BOOL smartcard_ndr_pointer_read_(wStream* s, UINT32* index, UINT32* ptr, const char* file,
-                                        const char* fkt, int line)
-{
-	const UINT32 expect = 0x20000 + (*index) * 4;
-	UINT32 ndrPtr;
-	WINPR_UNUSED(file);
-	if (!s)
-		return FALSE;
-	if (Stream_GetRemainingLength(s) < 4)
-		return FALSE;
-
-	Stream_Read_UINT32(s, ndrPtr); /* mszGroupsNdrPtr (4 bytes) */
-	if (ptr)
-		*ptr = ndrPtr;
-	if (expect != ndrPtr)
-	{
-		/* Allow NULL pointer if we read the result */
-		if (ptr && (ndrPtr == 0))
-			return TRUE;
-		WLog_WARN(TAG, "[%s:%d] Read context pointer 0x%08" PRIx32 ", expected 0x%08" PRIx32, fkt,
-		          line, ndrPtr, expect);
-		return FALSE;
-	}
-
-	(*index) = (*index) + 1;
-	return TRUE;
-}
-
-static LONG smartcard_ndr_read(wStream* s, BYTE** data, size_t min, size_t elementSize,
-                               ndr_ptr_t type)
+LONG smartcard_unpack_common_type_header(SMARTCARD_DEVICE* smartcard, wStream* s)
 {
-	size_t len, offset, len2;
-	void* r;
-	size_t required;
+	UINT8 version;
+	UINT32 filler;
+	UINT8 endianness;
+	UINT16 commonHeaderLength;
+	WINPR_UNUSED(smartcard);
 
-	switch (type)
+	if (Stream_GetRemainingLength(s) < 8)
 	{
-		case NDR_PTR_FULL:
-			required = 12;
-			break;
-		case NDR_PTR_SIMPLE:
-			required = 4;
-			break;
-		case NDR_PTR_FIXED:
-			required = min;
-			break;
+		WLog_WARN(TAG, "CommonTypeHeader is too short: %" PRIuz "", Stream_GetRemainingLength(s));
+		return STATUS_BUFFER_TOO_SMALL;
 	}
 
-	if (Stream_GetRemainingLength(s) < required)
+	/* Process CommonTypeHeader */
+	Stream_Read_UINT8(s, version);             /* Version (1 byte) */
+	Stream_Read_UINT8(s, endianness);          /* Endianness (1 byte) */
+	Stream_Read_UINT16(s, commonHeaderLength); /* CommonHeaderLength (2 bytes) */
+	Stream_Read_UINT32(s, filler);             /* Filler (4 bytes), should be 0xCCCCCCCC */
+
+	if (version != 1)
 	{
-		WLog_ERR(TAG, "Short data while trying to read NDR pointer, expected 4, got %" PRIu32,
-		         Stream_GetRemainingLength(s));
-		return STATUS_BUFFER_TOO_SMALL;
+		WLog_WARN(TAG, "Unsupported CommonTypeHeader Version %" PRIu8 "", version);
+		return STATUS_INVALID_PARAMETER;
 	}
 
-	switch (type)
+	if (endianness != 0x10)
 	{
-		case NDR_PTR_FULL:
-			Stream_Read_UINT32(s, len);
-			Stream_Read_UINT32(s, offset);
-			Stream_Read_UINT32(s, len2);
-			if (len != offset + len2)
-			{
-				WLog_ERR(TAG,
-				         "Invalid data when reading full NDR pointer: total=%" PRIu32
-				         ", offset=%" PRIu32 ", remaining=%" PRIu32,
-				         len, offset, len2);
-				return STATUS_BUFFER_TOO_SMALL;
-			}
-			break;
-		case NDR_PTR_SIMPLE:
-			Stream_Read_UINT32(s, len);
-
-			if ((len != min) && (min > 0))
-			{
-				WLog_ERR(TAG,
-				         "Invalid data when reading simple NDR pointer: total=%" PRIu32
-				         ", expected=%" PRIu32,
-				         len, min);
-				return STATUS_BUFFER_TOO_SMALL;
-			}
-			break;
-		case NDR_PTR_FIXED:
-			len = (UINT32)min;
-			break;
+		WLog_WARN(TAG, "Unsupported CommonTypeHeader Endianness %" PRIu8 "", endianness);
+		return STATUS_INVALID_PARAMETER;
 	}
 
-	if (min > len)
+	if (commonHeaderLength != 8)
 	{
-		WLog_ERR(TAG, "Invalid length read from NDR pointer, minimum %" PRIu32 ", got %" PRIu32,
-		         min, len);
-		return STATUS_DATA_ERROR;
+		WLog_WARN(TAG, "Unsupported CommonTypeHeader CommonHeaderLength %" PRIu16 "",
+		          commonHeaderLength);
+		return STATUS_INVALID_PARAMETER;
 	}
 
-	if (len > SIZE_MAX / 2)
-		return STATUS_BUFFER_TOO_SMALL;
-
-	if (Stream_GetRemainingLength(s) / elementSize < len)
+	if (filler != 0xCCCCCCCC)
 	{
-		WLog_ERR(TAG,
-		         "Short data while trying to read data from NDR pointer, expected %" PRIu32
-		         ", got %" PRIu32,
-		         len, Stream_GetRemainingLength(s));
-		return STATUS_BUFFER_TOO_SMALL;
+		WLog_WARN(TAG, "Unexpected CommonTypeHeader Filler 0x%08" PRIX32 "", filler);
+		return STATUS_INVALID_PARAMETER;
 	}
-	len *= elementSize;
 
-	r = calloc(len + 1, sizeof(CHAR));
-	if (!r)
-		return SCARD_E_NO_MEMORY;
-	Stream_Read(s, r, len);
-	smartcard_unpack_read_size_align(NULL, s, len, 4);
-	*data = r;
-	return STATUS_SUCCESS;
+	return SCARD_S_SUCCESS;
 }
 
-static BOOL smartcard_ndr_pointer_write(wStream* s, UINT32* index, DWORD length)
+void smartcard_pack_common_type_header(SMARTCARD_DEVICE* smartcard, wStream* s)
 {
-	const UINT32 ndrPtr = 0x20000 + (*index) * 4;
-
-	if (!s)
-		return FALSE;
-	if (!Stream_EnsureRemainingCapacity(s, 4))
-		return FALSE;
-
-	if (length > 0)
-	{
-		Stream_Write_UINT32(s, ndrPtr); /* mszGroupsNdrPtr (4 bytes) */
-		(*index) = (*index) + 1;
-	}
-	else
-		Stream_Write_UINT32(s, 0);
-	return TRUE;
+	WINPR_UNUSED(smartcard);
+	Stream_Write_UINT8(s, 1);           /* Version (1 byte) */
+	Stream_Write_UINT8(s, 0x10);        /* Endianness (1 byte) */
+	Stream_Write_UINT16(s, 8);          /* CommonHeaderLength (2 bytes) */
+	Stream_Write_UINT32(s, 0xCCCCCCCC); /* Filler (4 bytes), should be 0xCCCCCCCC */
 }
 
-static LONG smartcard_ndr_write(wStream* s, const BYTE* data, UINT32 size, UINT32 elementSize,
-                                ndr_ptr_t type)
+LONG smartcard_unpack_private_type_header(SMARTCARD_DEVICE* smartcard, wStream* s)
 {
-	const UINT32 offset = 0;
-	const UINT32 len = size;
-	const UINT32 dataLen = size * elementSize;
-	size_t required;
-
-	if (size == 0)
-		return SCARD_S_SUCCESS;
+	UINT32 filler;
+	UINT32 objectBufferLength;
+	WINPR_UNUSED(smartcard);
 
-	switch (type)
+	if (Stream_GetRemainingLength(s) < 8)
 	{
-		case NDR_PTR_FULL:
-			required = 12;
-			break;
-		case NDR_PTR_SIMPLE:
-			required = 4;
-			break;
-		case NDR_PTR_FIXED:
-			required = 0;
-			break;
+		WLog_WARN(TAG, "PrivateTypeHeader is too short: %" PRIuz "", Stream_GetRemainingLength(s));
+		return STATUS_BUFFER_TOO_SMALL;
 	}
 
-	if (!Stream_EnsureRemainingCapacity(s, required + dataLen + 4))
-		return STATUS_BUFFER_TOO_SMALL;
+	Stream_Read_UINT32(s, objectBufferLength); /* ObjectBufferLength (4 bytes) */
+	Stream_Read_UINT32(s, filler);             /* Filler (4 bytes), should be 0x00000000 */
 
-	switch (type)
+	if (filler != 0x00000000)
 	{
-		case NDR_PTR_FULL:
-			Stream_Write_UINT32(s, len);
-			Stream_Write_UINT32(s, offset);
-			Stream_Write_UINT32(s, len);
-			break;
-		case NDR_PTR_SIMPLE:
-			Stream_Write_UINT32(s, len);
-			break;
-		case NDR_PTR_FIXED:
-			break;
+		WLog_WARN(TAG, "Unexpected PrivateTypeHeader Filler 0x%08" PRIX32 "", filler);
+		return STATUS_INVALID_PARAMETER;
 	}
 
-	if (data)
-		Stream_Write(s, data, dataLen);
-	else
-		Stream_Zero(s, dataLen);
-	return smartcard_pack_write_size_align(NULL, s, len, 4);
-}
-
-static LONG smartcard_ndr_write_state(wStream* s, const ReaderState_Return* data, UINT32 size,
-                                      ndr_ptr_t type)
-{
-	union {
-		const ReaderState_Return* reader;
-		const BYTE* data;
-	} cnv;
-
-	cnv.reader = data;
-	return smartcard_ndr_write(s, cnv.data, size, sizeof(ReaderState_Return), type);
-}
-
-static LONG smartcard_ndr_read_atrmask(wStream* s, LocateCards_ATRMask** data, size_t min,
-                                       ndr_ptr_t type)
-{
-	union {
-		LocateCards_ATRMask** ppc;
-		BYTE** ppv;
-	} u;
-	u.ppc = data;
-	return smartcard_ndr_read(s, u.ppv, min, sizeof(LocateCards_ATRMask), type);
-}
+	if (objectBufferLength != Stream_GetRemainingLength(s))
+	{
+		WLog_WARN(TAG,
+		          "PrivateTypeHeader ObjectBufferLength mismatch: Actual: %" PRIu32
+		          ", Expected: %" PRIuz "",
+		          objectBufferLength, Stream_GetRemainingLength(s));
+		return STATUS_INVALID_PARAMETER;
+	}
 
-static LONG smartcard_ndr_read_fixed_string_a(wStream* s, CHAR** data, size_t min, ndr_ptr_t type)
-{
-	union {
-		CHAR** ppc;
-		BYTE** ppv;
-	} u;
-	u.ppc = data;
-	return smartcard_ndr_read(s, u.ppv, min, sizeof(CHAR), type);
+	return SCARD_S_SUCCESS;
 }
 
-static LONG smartcard_ndr_read_fixed_string_w(wStream* s, WCHAR** data, size_t min, ndr_ptr_t type)
+void smartcard_pack_private_type_header(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                        UINT32 objectBufferLength)
 {
-	union {
-		WCHAR** ppc;
-		BYTE** ppv;
-	} u;
-	u.ppc = data;
-	return smartcard_ndr_read(s, u.ppv, min, sizeof(WCHAR), type);
+	WINPR_UNUSED(smartcard);
+	Stream_Write_UINT32(s, objectBufferLength); /* ObjectBufferLength (4 bytes) */
+	Stream_Write_UINT32(s, 0x00000000);         /* Filler (4 bytes), should be 0x00000000 */
 }
 
-static LONG smartcard_ndr_read_a(wStream* s, CHAR** data, ndr_ptr_t type)
+LONG smartcard_unpack_read_size_align(SMARTCARD_DEVICE* smartcard, wStream* s, UINT32 size,
+                                      UINT32 alignment)
 {
-	union {
-		CHAR** ppc;
-		BYTE** ppv;
-	} u;
-	u.ppc = data;
-	return smartcard_ndr_read(s, u.ppv, 0, sizeof(CHAR), type);
-}
+	UINT32 pad;
+	WINPR_UNUSED(smartcard);
+	pad = size;
+	size = (size + alignment - 1) & ~(alignment - 1);
+	pad = size - pad;
 
-static LONG smartcard_ndr_read_w(wStream* s, WCHAR** data, ndr_ptr_t type)
-{
-	union {
-		WCHAR** ppc;
-		BYTE** ppv;
-	} u;
-	u.ppc = data;
-	return smartcard_ndr_read(s, u.ppv, 0, sizeof(WCHAR), type);
-}
+	if (pad)
+		Stream_Seek(s, pad);
 
-static LONG smartcard_ndr_read_u(wStream* s, UUID** data)
-{
-	union {
-		UUID** ppc;
-		BYTE** ppv;
-	} u;
-	u.ppc = data;
-	return smartcard_ndr_read(s, u.ppv, 1, sizeof(UUID), NDR_PTR_FIXED);
+	return pad;
 }
 
-static char* smartcard_convert_string_list(const void* in, size_t bytes, BOOL unicode)
+LONG smartcard_pack_write_size_align(SMARTCARD_DEVICE* smartcard, wStream* s, UINT32 size,
+                                     UINT32 alignment)
 {
-	size_t index, length;
-	union {
-		const void* pv;
-		const char* sz;
-		const WCHAR* wz;
-	} string;
-	char* mszA = NULL;
-
-	string.pv = in;
-
-	if (bytes < 1)
-		return NULL;
+	UINT32 pad;
+	WINPR_UNUSED(smartcard);
+	pad = size;
+	size = (size + alignment - 1) & ~(alignment - 1);
+	pad = size - pad;
 
-	if (unicode)
+	if (pad)
 	{
-		length = (bytes / 2);
-		if (ConvertFromUnicode(CP_UTF8, 0, string.wz, (int)length, &mszA, 0, NULL, NULL) !=
-		    (int)length)
+		if (!Stream_EnsureRemainingCapacity(s, pad))
 		{
-			free(mszA);
-			return NULL;
+			WLog_ERR(TAG, "Stream_EnsureRemainingCapacity failed!");
+			return SCARD_F_INTERNAL_ERROR;
 		}
-	}
-	else
-	{
-		length = bytes;
-		mszA = (char*)malloc(length);
-		if (!mszA)
-			return NULL;
-		CopyMemory(mszA, string.sz, length);
-	}
 
-	for (index = 0; index < length - 1; index++)
-	{
-		if (mszA[index] == '\0')
-			mszA[index] = ',';
+		Stream_Zero(s, pad);
 	}
 
-	return mszA;
+	return SCARD_S_SUCCESS;
 }
 
-static char* smartcard_msz_dump_a(const char* msz, size_t len, char* buffer, size_t bufferLen)
+SCARDCONTEXT smartcard_scard_context_native_from_redir(SMARTCARD_DEVICE* smartcard,
+                                                       REDIR_SCARDCONTEXT* context)
 {
-	char* buf = buffer;
-	const char* cur = msz;
+	SCARDCONTEXT hContext = { 0 };
+	WINPR_UNUSED(smartcard);
 
-	while ((len > 0) && cur && cur[0] != '\0' && (bufferLen > 0))
+	if ((context->cbContext != sizeof(ULONG_PTR)) && (context->cbContext != 0))
 	{
-		size_t clen = strnlen(cur, len);
-		int rc = _snprintf(buf, bufferLen, "%s", cur);
-		bufferLen -= (size_t)rc;
-		buf += rc;
-
-		cur += clen;
+		WLog_WARN(TAG,
+		          "REDIR_SCARDCONTEXT does not match native size: Actual: %" PRIu32
+		          ", Expected: %" PRIuz "",
+		          context->cbContext, sizeof(ULONG_PTR));
+		return 0;
 	}
 
-	return buffer;
+	if (context->cbContext)
+		CopyMemory(&hContext, &(context->pbContext), context->cbContext);
+
+	return hContext;
 }
 
-static char* smartcard_msz_dump_w(const WCHAR* msz, size_t len, char* buffer, size_t bufferLen)
+void smartcard_scard_context_native_to_redir(SMARTCARD_DEVICE* smartcard,
+                                             REDIR_SCARDCONTEXT* context, SCARDCONTEXT hContext)
 {
-	char* sz = NULL;
-	ConvertFromUnicode(CP_UTF8, 0, msz, (int)len, &sz, 0, NULL, NULL);
-	return smartcard_msz_dump_a(sz, len, buffer, bufferLen);
+	WINPR_UNUSED(smartcard);
+	ZeroMemory(context, sizeof(REDIR_SCARDCONTEXT));
+	context->cbContext = sizeof(ULONG_PTR);
+	CopyMemory(&(context->pbContext), &hContext, context->cbContext);
 }
 
-static char* smartcard_array_dump(const void* pd, size_t len, char* buffer, size_t bufferLen)
+SCARDHANDLE smartcard_scard_handle_native_from_redir(SMARTCARD_DEVICE* smartcard,
+                                                     REDIR_SCARDHANDLE* handle)
 {
-	const BYTE* data = pd;
-	size_t x;
-	int rc;
-	char* start = buffer;
-
-	/* Ensure '\0' termination */
-	if (bufferLen > 0)
-	{
-		buffer[bufferLen - 1] = '\0';
-		bufferLen--;
-	}
-
-	rc = _snprintf(buffer, bufferLen, "{ ");
-	if ((rc < 0) || ((size_t)rc > bufferLen))
-		goto fail;
-	buffer += rc;
-	bufferLen -= (size_t)rc;
+	SCARDHANDLE hCard = 0;
+	WINPR_UNUSED(smartcard);
 
-	for (x = 0; x < len; x++)
+	if (handle->cbHandle != sizeof(ULONG_PTR))
 	{
-		rc = _snprintf(buffer, bufferLen, "%02X", data[x]);
-		if ((rc < 0) || ((size_t)rc > bufferLen))
-			goto fail;
-		buffer += rc;
-		bufferLen -= (size_t)rc;
+		WLog_WARN(TAG,
+		          "REDIR_SCARDHANDLE does not match native size: Actual: %" PRIu32
+		          ", Expected: %" PRIuz "",
+		          handle->cbHandle, sizeof(ULONG_PTR));
+		return 0;
 	}
 
-	rc = _snprintf(buffer, bufferLen, " }");
-	if ((rc < 0) || ((size_t)rc > bufferLen))
-		goto fail;
-	buffer += rc;
-	bufferLen -= (size_t)rc;
-
-fail:
-	return start;
-}
-static void smartcard_log_redir_handle(const char* tag, const REDIR_SCARDHANDLE* pHandle)
-{
-	char buffer[128];
+	if (handle->cbHandle)
+		CopyMemory(&hCard, &(handle->pbHandle), handle->cbHandle);
 
-	WLog_LVL(tag, g_LogLevel, "  hContext: %s",
-	         smartcard_array_dump(pHandle->pbHandle, pHandle->cbHandle, buffer, sizeof(buffer)));
+	return hCard;
 }
 
-static void smartcard_log_context(const char* tag, const REDIR_SCARDCONTEXT* phContext)
+void smartcard_scard_handle_native_to_redir(SMARTCARD_DEVICE* smartcard, REDIR_SCARDHANDLE* handle,
+                                            SCARDHANDLE hCard)
 {
-	char buffer[128];
-	WLog_DBG(
-	    tag, "hContext: %s",
-	    smartcard_array_dump(phContext->pbContext, phContext->cbContext, buffer, sizeof(buffer)));
+	WINPR_UNUSED(smartcard);
+	ZeroMemory(handle, sizeof(REDIR_SCARDHANDLE));
+	handle->cbHandle = sizeof(ULONG_PTR);
+	CopyMemory(&(handle->pbHandle), &hCard, handle->cbHandle);
 }
 
-static void smartcard_trace_context_and_string_call_a(const char* name,
-                                                      const REDIR_SCARDCONTEXT* phContext,
-                                                      const CHAR* sz)
+LONG smartcard_unpack_redir_scard_context(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                          REDIR_SCARDCONTEXT* context)
 {
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
-
-	WLog_LVL(TAG, g_LogLevel, "%s {", name);
-	smartcard_log_context(TAG, phContext);
-	WLog_LVL(TAG, g_LogLevel, "  sz=%s", sz);
+	UINT32 pbContextNdrPtr;
+	WINPR_UNUSED(smartcard);
+	ZeroMemory(context, sizeof(REDIR_SCARDCONTEXT));
 
-	WLog_LVL(TAG, g_LogLevel, "}");
-}
+	if (Stream_GetRemainingLength(s) < 4)
+	{
+		WLog_WARN(TAG, "REDIR_SCARDCONTEXT is too short: %" PRIuz "", Stream_GetRemainingLength(s));
+		return STATUS_BUFFER_TOO_SMALL;
+	}
 
-static void smartcard_trace_context_and_string_call_w(const char* name,
-                                                      const REDIR_SCARDCONTEXT* phContext,
-                                                      const WCHAR* sz)
-{
-	char* tmp = NULL;
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
+	Stream_Read_UINT32(s, context->cbContext); /* cbContext (4 bytes) */
 
-	WLog_LVL(TAG, g_LogLevel, "%s {", name);
-	smartcard_log_context(TAG, phContext);
-	ConvertFromUnicode(CP_UTF8, 0, sz, -1, &tmp, 0, NULL, NULL);
-	WLog_LVL(TAG, g_LogLevel, "  sz=%s", tmp);
-	free(tmp);
+	if (Stream_GetRemainingLength(s) < context->cbContext)
+	{
+		WLog_WARN(TAG, "REDIR_SCARDCONTEXT is too short: Actual: %" PRIuz ", Expected: %" PRIu32 "",
+		          Stream_GetRemainingLength(s), context->cbContext);
+		return STATUS_BUFFER_TOO_SMALL;
+	}
 
-	WLog_LVL(TAG, g_LogLevel, "}");
-}
+	if ((context->cbContext != 0) && (context->cbContext != 4) && (context->cbContext != 8))
+	{
+		WLog_WARN(TAG, "REDIR_SCARDCONTEXT length is not 0, 4 or 8: %" PRIu32 "",
+		          context->cbContext);
+		return STATUS_INVALID_PARAMETER;
+	}
 
-static void smartcard_trace_context_call(SMARTCARD_DEVICE* smartcard, const Context_Call* call,
-                                         const char* name)
-{
-	WINPR_UNUSED(smartcard);
+	Stream_Read_UINT32(s, pbContextNdrPtr); /* pbContextNdrPtr (4 bytes) */
 
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
+	if (((context->cbContext == 0) && pbContextNdrPtr) ||
+	    ((context->cbContext != 0) && !pbContextNdrPtr))
+	{
+		WLog_WARN(TAG,
+		          "REDIR_SCARDCONTEXT cbContext (%" PRIu32 ") pbContextNdrPtr (%" PRIu32
+		          ") inconsistency",
+		          context->cbContext, pbContextNdrPtr);
+		return STATUS_INVALID_PARAMETER;
+	}
 
-	WLog_LVL(TAG, g_LogLevel, "%s_Call {", name);
-	smartcard_log_context(TAG, &call->hContext);
+	if (context->cbContext > Stream_GetRemainingLength(s))
+	{
+		WLog_WARN(TAG, "REDIR_SCARDCONTEXT is too long: Actual: %" PRIuz ", Expected: %" PRIu32 "",
+		          Stream_GetRemainingLength(s), context->cbContext);
+		return STATUS_INVALID_PARAMETER;
+	}
 
-	WLog_LVL(TAG, g_LogLevel, "}");
+	return SCARD_S_SUCCESS;
 }
 
-static void smartcard_trace_list_reader_groups_call(SMARTCARD_DEVICE* smartcard,
-                                                    const ListReaderGroups_Call* call, BOOL unicode)
+LONG smartcard_pack_redir_scard_context(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                        REDIR_SCARDCONTEXT* context)
 {
+	UINT32 pbContextNdrPtr;
 	WINPR_UNUSED(smartcard);
-
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
-
-	WLog_LVL(TAG, g_LogLevel, "ListReaderGroups%S_Call {", unicode ? "W" : "A");
-	smartcard_log_context(TAG, &call->hContext);
-
-	WLog_LVL(TAG, g_LogLevel, "fmszGroupsIsNULL: %" PRId32 " cchGroups: 0x%08" PRIx32,
-	         call->fmszGroupsIsNULL, call->cchGroups);
-	WLog_LVL(TAG, g_LogLevel, "}");
+	pbContextNdrPtr = (context->cbContext) ? 0x00020001 : 0;
+	Stream_Write_UINT32(s, context->cbContext); /* cbContext (4 bytes) */
+	Stream_Write_UINT32(s, pbContextNdrPtr);    /* pbContextNdrPtr (4 bytes) */
+	return SCARD_S_SUCCESS;
 }
 
-static void smartcard_trace_get_status_change_w_call(SMARTCARD_DEVICE* smartcard,
-                                                     const GetStatusChangeW_Call* call)
+LONG smartcard_unpack_redir_scard_context_ref(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                              REDIR_SCARDCONTEXT* context)
 {
-	UINT32 index;
-	char* szEventState;
-	char* szCurrentState;
-	LPSCARD_READERSTATEW readerState;
+	UINT32 length;
 	WINPR_UNUSED(smartcard);
 
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
+	if (context->cbContext == 0)
+		return SCARD_S_SUCCESS;
 
-	WLog_LVL(TAG, g_LogLevel, "GetStatusChangeW_Call {");
-	smartcard_log_context(TAG, &call->hContext);
+	if (Stream_GetRemainingLength(s) < 4)
+	{
+		WLog_WARN(TAG, "REDIR_SCARDCONTEXT is too short: Actual: %" PRIuz ", Expected: 4",
+		          Stream_GetRemainingLength(s));
+		return STATUS_BUFFER_TOO_SMALL;
+	}
 
-	WLog_LVL(TAG, g_LogLevel, "dwTimeOut: 0x%08" PRIX32 " cReaders: %" PRIu32 "", call->dwTimeOut,
-	         call->cReaders);
+	Stream_Read_UINT32(s, length); /* Length (4 bytes) */
 
-	for (index = 0; index < call->cReaders; index++)
+	if (length != context->cbContext)
 	{
-		char* szReaderA = NULL;
-		readerState = &call->rgReaderStates[index];
-		ConvertFromUnicode(CP_UTF8, 0, readerState->szReader, -1, &szReaderA, 0, NULL, NULL);
-		WLog_LVL(TAG, g_LogLevel, "\t[%" PRIu32 "]: szReader: %s cbAtr: %" PRIu32 "", index,
-		         szReaderA, readerState->cbAtr);
-		szCurrentState = SCardGetReaderStateString(readerState->dwCurrentState);
-		szEventState = SCardGetReaderStateString(readerState->dwEventState);
-		WLog_LVL(TAG, g_LogLevel, "\t[%" PRIu32 "]: dwCurrentState: %s (0x%08" PRIX32 ")", index,
-		         szCurrentState, readerState->dwCurrentState);
-		WLog_LVL(TAG, g_LogLevel, "\t[%" PRIu32 "]: dwEventState: %s (0x%08" PRIX32 ")", index,
-		         szEventState, readerState->dwEventState);
-		free(szCurrentState);
-		free(szEventState);
-		free(szReaderA);
+		WLog_WARN(TAG, "REDIR_SCARDCONTEXT length (%" PRIu32 ") cbContext (%" PRIu32 ") mismatch",
+		          length, context->cbContext);
+		return STATUS_INVALID_PARAMETER;
 	}
 
-	WLog_LVL(TAG, g_LogLevel, "}");
-}
-
-static void smartcard_trace_list_reader_groups_return(SMARTCARD_DEVICE* smartcard,
-                                                      const ListReaderGroups_Return* ret,
-                                                      BOOL unicode)
-{
-	char* mszA = NULL;
-	WINPR_UNUSED(smartcard);
+	if ((context->cbContext != 0) && (context->cbContext != 4) && (context->cbContext != 8))
+	{
+		WLog_WARN(TAG, "REDIR_SCARDCONTEXT length is not 4 or 8: %" PRIu32 "", context->cbContext);
+		return STATUS_INVALID_PARAMETER;
+	}
 
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
+	if (Stream_GetRemainingLength(s) < context->cbContext)
+	{
+		WLog_WARN(TAG, "REDIR_SCARDCONTEXT is too short: Actual: %" PRIuz ", Expected: %" PRIu32 "",
+		          Stream_GetRemainingLength(s), context->cbContext);
+		return STATUS_BUFFER_TOO_SMALL;
+	}
 
-	mszA = smartcard_convert_string_list(ret->msz, ret->cBytes, unicode);
+	if (context->cbContext)
+		Stream_Read(s, &(context->pbContext), context->cbContext);
+	else
+		ZeroMemory(&(context->pbContext), sizeof(context->pbContext));
 
-	WLog_LVL(TAG, g_LogLevel, "ListReaderGroups%s_Return {", unicode ? "W" : "A");
-	WLog_LVL(TAG, g_LogLevel, "  ReturnCode: %s (0x%08" PRIx32 ")",
-	         SCardGetErrorString(ret->ReturnCode), ret->ReturnCode);
-	WLog_LVL(TAG, g_LogLevel, "  cBytes: %" PRIu32 " msz: %s", ret->cBytes, mszA);
-	WLog_LVL(TAG, g_LogLevel, "}");
-	free(mszA);
+	return SCARD_S_SUCCESS;
 }
 
-static void smartcard_trace_list_readers_call(SMARTCARD_DEVICE* smartcard,
-                                              const ListReaders_Call* call, BOOL unicode)
+LONG smartcard_pack_redir_scard_context_ref(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                            REDIR_SCARDCONTEXT* context)
 {
-	char* mszGroupsA = NULL;
 	WINPR_UNUSED(smartcard);
+	Stream_Write_UINT32(s, context->cbContext); /* Length (4 bytes) */
 
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
-
-	mszGroupsA = smartcard_convert_string_list(call->mszGroups, call->cBytes, unicode);
-
-	WLog_LVL(TAG, g_LogLevel, "ListReaders%s_Call {", unicode ? "W" : "A");
-	smartcard_log_context(TAG, &call->hContext);
-
-	WLog_LVL(TAG, g_LogLevel,
-	         "cBytes: %" PRIu32 " mszGroups: %s fmszReadersIsNULL: %" PRId32
-	         " cchReaders: 0x%08" PRIX32 "",
-	         call->cBytes, mszGroupsA, call->fmszReadersIsNULL, call->cchReaders);
-	WLog_LVL(TAG, g_LogLevel, "}");
+	if (context->cbContext)
+	{
+		Stream_Write(s, &(context->pbContext), context->cbContext);
+	}
 
-	free(mszGroupsA);
+	return SCARD_S_SUCCESS;
 }
 
-static void smartcard_trace_locate_cards_by_atr_a_call(SMARTCARD_DEVICE* smartcard,
-                                                       const LocateCardsByATRA_Call* call)
+LONG smartcard_unpack_redir_scard_handle(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                         REDIR_SCARDHANDLE* handle)
 {
-	UINT32 index;
-	char* szEventState;
-	char* szCurrentState;
-
+	UINT32 pbHandleNdrPtr;
 	WINPR_UNUSED(smartcard);
+	ZeroMemory(handle, sizeof(REDIR_SCARDHANDLE));
 
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
-
-	WLog_LVL(TAG, g_LogLevel, "LocateCardsByATRA_Call {");
-	smartcard_log_context(TAG, &call->hContext);
-
-	for (index = 0; index < call->cReaders; index++)
+	if (Stream_GetRemainingLength(s) < 4)
 	{
-		char buffer[1024];
-		const LPSCARD_READERSTATEA readerState = &call->rgReaderStates[index];
-
-		WLog_LVL(TAG, g_LogLevel, "\t[%" PRIu32 "]: szReader: %s cbAtr: %" PRIu32 "", index,
-		         readerState->szReader, readerState->cbAtr);
-		szCurrentState = SCardGetReaderStateString(readerState->dwCurrentState);
-		szEventState = SCardGetReaderStateString(readerState->dwEventState);
-		WLog_LVL(TAG, g_LogLevel, "\t[%" PRIu32 "]: dwCurrentState: %s (0x%08" PRIX32 ")", index,
-		         szCurrentState, readerState->dwCurrentState);
-		WLog_LVL(TAG, g_LogLevel, "\t[%" PRIu32 "]: dwEventState: %s (0x%08" PRIX32 ")", index,
-		         szEventState, readerState->dwEventState);
+		WLog_WARN(TAG, "SCARDHANDLE is too short: %" PRIuz "", Stream_GetRemainingLength(s));
+		return STATUS_BUFFER_TOO_SMALL;
+	}
 
-		WLog_DBG(
-		    TAG, "\t[%" PRIu32 "]: cbAtr: %" PRIu32 " rgbAtr: %s", index, readerState->cbAtr,
-		    smartcard_array_dump(readerState->rgbAtr, readerState->cbAtr, buffer, sizeof(buffer)));
+	Stream_Read_UINT32(s, handle->cbHandle); /* Length (4 bytes) */
 
-		free(szCurrentState);
-		free(szEventState);
+	if ((Stream_GetRemainingLength(s) < handle->cbHandle) || (!handle->cbHandle))
+	{
+		WLog_WARN(TAG, "SCARDHANDLE is too short: Actual: %" PRIuz ", Expected: %" PRIu32 "",
+		          Stream_GetRemainingLength(s), handle->cbHandle);
+		return STATUS_BUFFER_TOO_SMALL;
 	}
 
-	WLog_LVL(TAG, g_LogLevel, "}");
+	Stream_Read_UINT32(s, pbHandleNdrPtr); /* NdrPtr (4 bytes) */
+	return SCARD_S_SUCCESS;
 }
 
-static void smartcard_trace_locate_cards_a_call(SMARTCARD_DEVICE* smartcard,
-                                                const LocateCardsA_Call* call)
+LONG smartcard_pack_redir_scard_handle(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                       REDIR_SCARDHANDLE* handle)
 {
-	char buffer[8192];
+	UINT32 pbHandleNdrPtr;
 	WINPR_UNUSED(smartcard);
-
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
-
-	WLog_LVL(TAG, g_LogLevel, "LocateCardsA_Call {");
-	smartcard_log_context(TAG, &call->hContext);
-	WLog_LVL(TAG, g_LogLevel, " cBytes=%" PRId32, call->cBytes);
-	WLog_LVL(TAG, g_LogLevel, " mszCards=%s",
-	         smartcard_msz_dump_a(call->mszCards, call->cBytes, buffer, sizeof(buffer)));
-	WLog_LVL(TAG, g_LogLevel, " cReaders=%" PRId32, call->cReaders);
-	// WLog_LVL(TAG, g_LogLevel, " cReaders=%" PRId32, call->rgReaderStates);
-
-	WLog_LVL(TAG, g_LogLevel, "}");
+	pbHandleNdrPtr = (handle->cbHandle) ? 0x00020002 : 0;
+	Stream_Write_UINT32(s, handle->cbHandle); /* cbHandle (4 bytes) */
+	Stream_Write_UINT32(s, pbHandleNdrPtr);   /* pbHandleNdrPtr (4 bytes) */
+	return SCARD_S_SUCCESS;
 }
 
-static void smartcard_trace_locate_cards_return(SMARTCARD_DEVICE* smartcard,
-                                                const LocateCards_Return* ret)
+LONG smartcard_unpack_redir_scard_handle_ref(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                             REDIR_SCARDHANDLE* handle)
 {
+	UINT32 length;
 	WINPR_UNUSED(smartcard);
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
 
-	WLog_LVL(TAG, g_LogLevel, "LocateCards_Return {");
-	WLog_LVL(TAG, g_LogLevel, "  ReturnCode: %s (0x%08" PRIX32 ")",
-	         SCardGetErrorString(ret->ReturnCode), ret->ReturnCode);
-
-	if (ret->ReturnCode == SCARD_S_SUCCESS)
+	if (Stream_GetRemainingLength(s) < 4)
 	{
-		WLog_LVL(TAG, g_LogLevel, "  cReaders=%" PRId32, ret->cReaders);
+		WLog_WARN(TAG, "REDIR_SCARDHANDLE is too short: Actual: %" PRIuz ", Expected: 4",
+		          Stream_GetRemainingLength(s));
+		return STATUS_BUFFER_TOO_SMALL;
 	}
-	WLog_LVL(TAG, g_LogLevel, "}");
-}
 
-static void smartcard_trace_get_reader_icon_return(SMARTCARD_DEVICE* smartcard,
-                                                   const GetReaderIcon_Return* ret)
-{
-	WINPR_UNUSED(smartcard);
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
+	Stream_Read_UINT32(s, length); /* Length (4 bytes) */
+
+	if (length != handle->cbHandle)
+	{
+		WLog_WARN(TAG, "REDIR_SCARDHANDLE length (%" PRIu32 ") cbHandle (%" PRIu32 ") mismatch",
+		          length, handle->cbHandle);
+		return STATUS_INVALID_PARAMETER;
+	}
 
-	WLog_LVL(TAG, g_LogLevel, "GetReaderIcon_Return {");
-	WLog_LVL(TAG, g_LogLevel, "  ReturnCode: %s (0x%08" PRIX32 ")",
-	         SCardGetErrorString(ret->ReturnCode), ret->ReturnCode);
+	if ((handle->cbHandle != 4) && (handle->cbHandle != 8))
+	{
+		WLog_WARN(TAG, "REDIR_SCARDHANDLE length is not 4 or 8: %" PRIu32 "", handle->cbHandle);
+		return STATUS_INVALID_PARAMETER;
+	}
 
-	if (ret->ReturnCode == SCARD_S_SUCCESS)
+	if ((Stream_GetRemainingLength(s) < handle->cbHandle) || (!handle->cbHandle))
 	{
-		WLog_LVL(TAG, g_LogLevel, "  cbDataLen=%" PRId32, ret->cbDataLen);
+		WLog_WARN(TAG, "REDIR_SCARDHANDLE is too short: Actual: %" PRIuz ", Expected: %" PRIu32 "",
+		          Stream_GetRemainingLength(s), handle->cbHandle);
+		return STATUS_BUFFER_TOO_SMALL;
 	}
-	WLog_LVL(TAG, g_LogLevel, "}");
+
+	if (handle->cbHandle)
+		Stream_Read(s, &(handle->pbHandle), handle->cbHandle);
+
+	return SCARD_S_SUCCESS;
 }
 
-static void smartcard_trace_get_transmit_count_return(SMARTCARD_DEVICE* smartcard,
-                                                      const GetTransmitCount_Return* ret)
+LONG smartcard_pack_redir_scard_handle_ref(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                           REDIR_SCARDHANDLE* handle)
 {
 	WINPR_UNUSED(smartcard);
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
+	Stream_Write_UINT32(s, handle->cbHandle); /* Length (4 bytes) */
 
-	WLog_LVL(TAG, g_LogLevel, "GetTransmitCount_Return {");
-	WLog_LVL(TAG, g_LogLevel, "  ReturnCode: %s (0x%08" PRIX32 ")",
-	         SCardGetErrorString(ret->ReturnCode), ret->ReturnCode);
+	if (handle->cbHandle)
+		Stream_Write(s, &(handle->pbHandle), handle->cbHandle);
 
-	WLog_LVL(TAG, g_LogLevel, "  cTransmitCount=%" PRIu32, ret->cTransmitCount);
-	WLog_LVL(TAG, g_LogLevel, "}");
+	return SCARD_S_SUCCESS;
 }
 
-static void smartcard_trace_read_cache_return(SMARTCARD_DEVICE* smartcard,
-                                              const ReadCache_Return* ret)
+LONG smartcard_unpack_establish_context_call(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                             EstablishContext_Call* call)
 {
 	WINPR_UNUSED(smartcard);
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
 
-	WLog_LVL(TAG, g_LogLevel, "ReadCache_Return {");
-	WLog_LVL(TAG, g_LogLevel, "  ReturnCode: %s (0x%08" PRIX32 ")",
-	         SCardGetErrorString(ret->ReturnCode), ret->ReturnCode);
-
-	if (ret->ReturnCode == SCARD_S_SUCCESS)
+	if (Stream_GetRemainingLength(s) < 4)
 	{
-		char buffer[1024];
-		WLog_LVL(TAG, g_LogLevel, " cbDataLen=%" PRId32, ret->cbDataLen);
-		WLog_LVL(TAG, g_LogLevel, "  cbData: %s",
-		         smartcard_array_dump(ret->pbData, ret->cbDataLen, buffer, sizeof(buffer)));
+		WLog_WARN(TAG, "EstablishContext_Call is too short: Actual: %" PRIuz ", Expected: 4",
+		          Stream_GetRemainingLength(s));
+		return STATUS_BUFFER_TOO_SMALL;
 	}
-	WLog_LVL(TAG, g_LogLevel, "}");
+
+	Stream_Read_UINT32(s, call->dwScope); /* dwScope (4 bytes) */
+	return SCARD_S_SUCCESS;
 }
 
-static void smartcard_trace_locate_cards_w_call(SMARTCARD_DEVICE* smartcard,
-                                                const LocateCardsW_Call* call)
+void smartcard_trace_establish_context_call(SMARTCARD_DEVICE* smartcard,
+                                            const EstablishContext_Call* call)
 {
-	char buffer[8192];
 	WINPR_UNUSED(smartcard);
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
+
+	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
 
-	WLog_LVL(TAG, g_LogLevel, "LocateCardsW_Call {");
-	smartcard_log_context(TAG, &call->hContext);
-	WLog_LVL(TAG, g_LogLevel, " cBytes=%" PRId32, call->cBytes);
-	WLog_LVL(TAG, g_LogLevel, " sz2=%s",
-	         smartcard_msz_dump_w(call->mszCards, call->cBytes, buffer, sizeof(buffer)));
-	WLog_LVL(TAG, g_LogLevel, " cReaders=%" PRId32, call->cReaders);
-	// WLog_LVL(TAG, g_LogLevel, " sz2=%s", call->rgReaderStates);
-	WLog_LVL(TAG, g_LogLevel, "}");
+	WLog_DBG(TAG, "EstablishContext_Call {");
+	WLog_DBG(TAG, "dwScope: %s (0x%08" PRIX32 ")", SCardGetScopeString(call->dwScope),
+	         call->dwScope);
+	WLog_DBG(TAG, "}");
 }
 
-static void smartcard_trace_list_readers_return(SMARTCARD_DEVICE* smartcard,
-                                                const ListReaders_Return* ret, BOOL unicode)
+LONG smartcard_pack_establish_context_return(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                             EstablishContext_Return* ret)
 {
-	char* mszA = NULL;
-	WINPR_UNUSED(smartcard);
-
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
-
-	WLog_LVL(TAG, g_LogLevel, "ListReaders%s_Return {", unicode ? "W" : "A");
-	WLog_LVL(TAG, g_LogLevel, "  ReturnCode: %s (0x%08" PRIX32 ")",
-	         SCardGetErrorString(ret->ReturnCode), ret->ReturnCode);
+	LONG status;
 
-	if (ret->ReturnCode != SCARD_S_SUCCESS)
+	if ((status = smartcard_pack_redir_scard_context(smartcard, s, &(ret->hContext))))
 	{
-		WLog_LVL(TAG, g_LogLevel, "}");
-		return;
+		WLog_ERR(TAG, "smartcard_pack_redir_scard_context failed with error %" PRId32 "", status);
+		return status;
 	}
 
-	mszA = smartcard_convert_string_list(ret->msz, ret->cBytes, unicode);
+	if ((status = smartcard_pack_redir_scard_context_ref(smartcard, s, &(ret->hContext))))
+		WLog_ERR(TAG, "smartcard_pack_redir_scard_context_ref failed with error %" PRId32 "",
+		         status);
 
-	WLog_LVL(TAG, g_LogLevel, "  cBytes: %" PRIu32 " msz: %s", ret->cBytes, mszA);
-	WLog_LVL(TAG, g_LogLevel, "}");
-	free(mszA);
+	return status;
 }
 
-static void smartcard_trace_get_status_change_return(SMARTCARD_DEVICE* smartcard,
-                                                     const GetStatusChange_Return* ret,
-                                                     BOOL unicode)
+void smartcard_trace_establish_context_return(SMARTCARD_DEVICE* smartcard,
+                                              const EstablishContext_Return* ret)
 {
-	UINT32 index;
-	char* szEventState;
-	char* szCurrentState;
-
+	BYTE* pb;
 	WINPR_UNUSED(smartcard);
 
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
+	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
 
-	WLog_LVL(TAG, g_LogLevel, "GetStatusChange%s_Return {", unicode ? "W" : "A");
-	WLog_LVL(TAG, g_LogLevel, "  ReturnCode: %s (0x%08" PRIX32 ")",
-	         SCardGetErrorString(ret->ReturnCode), ret->ReturnCode);
-	WLog_LVL(TAG, g_LogLevel, "  cReaders: %" PRIu32 "", ret->cReaders);
+	WLog_DBG(TAG, "EstablishContext_Return {");
+	WLog_DBG(TAG, "ReturnCode: %s (0x%08" PRIX32 ")", SCardGetErrorString(ret->ReturnCode),
+	         ret->ReturnCode);
+	pb = (BYTE*)&(ret->hContext.pbContext);
 
-	for (index = 0; index < ret->cReaders; index++)
+	if (ret->hContext.cbContext > 4)
 	{
-		char buffer[1024];
-		const ReaderState_Return* rgReaderState = &(ret->rgReaderStates[index]);
-		szCurrentState = SCardGetReaderStateString(rgReaderState->dwCurrentState);
-		szEventState = SCardGetReaderStateString(rgReaderState->dwEventState);
-		WLog_LVL(TAG, g_LogLevel, "    [%" PRIu32 "]: dwCurrentState: %s (0x%08" PRIX32 ")", index,
-		         szCurrentState, rgReaderState->dwCurrentState);
-		WLog_LVL(TAG, g_LogLevel, "    [%" PRIu32 "]: dwEventState: %s (0x%08" PRIX32 ")", index,
-		         szEventState, rgReaderState->dwEventState);
-		WLog_LVL(TAG, g_LogLevel, "    [%" PRIu32 "]: cbAtr: %" PRIu32 " rgbAtr: %s", index,
-		         rgReaderState->cbAtr,
-		         smartcard_array_dump(rgReaderState->rgbAtr, rgReaderState->cbAtr, buffer,
-		                              sizeof(buffer)));
-		free(szCurrentState);
-		free(szEventState);
+		WLog_DBG(TAG,
+		         "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8
+		         "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], pb[4], pb[5], pb[6], pb[7], ret->hContext.cbContext);
+	}
+	else
+	{
+		WLog_DBG(TAG, "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], ret->hContext.cbContext);
 	}
 
-	WLog_LVL(TAG, g_LogLevel, "}");
+	WLog_DBG(TAG, "}");
 }
 
-static void smartcard_trace_context_and_two_strings_a_call(SMARTCARD_DEVICE* smartcard,
-                                                           const ContextAndTwoStringA_Call* call)
+LONG smartcard_unpack_context_call(SMARTCARD_DEVICE* smartcard, wStream* s, Context_Call* call)
 {
-	WINPR_UNUSED(smartcard);
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
+	LONG status;
+
+	if ((status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context failed with error %" PRId32 "", status);
+		return status;
+	}
+
+	if ((status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &(call->hContext))))
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context_ref failed with error %" PRId32 "",
+		         status);
 
-	WLog_LVL(TAG, g_LogLevel, "ContextAndTwoStringW_Call {");
-	smartcard_log_context(TAG, &call->hContext);
-	WLog_LVL(TAG, g_LogLevel, " sz1=%s", call->sz1);
-	WLog_LVL(TAG, g_LogLevel, " sz2=%s", call->sz2);
-	WLog_LVL(TAG, g_LogLevel, "}");
+	return status;
 }
 
-static void smartcard_trace_context_and_two_strings_w_call(SMARTCARD_DEVICE* smartcard,
-                                                           const ContextAndTwoStringW_Call* call)
+void smartcard_trace_context_call(SMARTCARD_DEVICE* smartcard, const Context_Call* call,
+                                  const char* name)
 {
-	CHAR* sz1 = NULL;
-	CHAR* sz2 = NULL;
-
+	BYTE* pb;
 	WINPR_UNUSED(smartcard);
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
+
+	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
 
-	WLog_LVL(TAG, g_LogLevel, "ContextAndTwoStringW_Call {");
-	smartcard_log_context(TAG, &call->hContext);
-	ConvertFromUnicode(CP_UTF8, 0, call->sz1, -1, &sz1, 0, NULL, NULL);
-	ConvertFromUnicode(CP_UTF8, 0, call->sz2, -1, &sz2, 0, NULL, NULL);
-	WLog_LVL(TAG, g_LogLevel, " sz1=%s", sz1);
-	WLog_LVL(TAG, g_LogLevel, " sz2=%s", sz2);
-	free(sz1);
-	free(sz2);
+	WLog_DBG(TAG, "%s_Call {", name);
+	pb = (BYTE*)&(call->hContext.pbContext);
+
+	if (call->hContext.cbContext > 4)
+	{
+		WLog_DBG(TAG,
+		         "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8
+		         "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], pb[4], pb[5], pb[6], pb[7], call->hContext.cbContext);
+	}
+	else
+	{
+		WLog_DBG(TAG, "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], call->hContext.cbContext);
+	}
 
-	WLog_LVL(TAG, g_LogLevel, "}");
+	WLog_DBG(TAG, "}");
 }
 
-static void smartcard_trace_get_transmit_count_call(SMARTCARD_DEVICE* smartcard,
-                                                    const GetTransmitCount_Call* call)
+void smartcard_trace_long_return(SMARTCARD_DEVICE* smartcard, const Long_Return* ret,
+                                 const char* name)
 {
 	WINPR_UNUSED(smartcard);
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
 
-	WLog_LVL(TAG, g_LogLevel, "GetTransmitCount_Call {");
-	smartcard_log_context(TAG, &call->hContext);
-	smartcard_log_redir_handle(TAG, &call->hCard);
+	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
+		return;
 
-	WLog_LVL(TAG, g_LogLevel, "}");
+	WLog_DBG(TAG, "%s_Return {", name);
+	WLog_DBG(TAG, "ReturnCode: %s (0x%08" PRIX32 ")", SCardGetErrorString(ret->ReturnCode),
+	         ret->ReturnCode);
+	WLog_DBG(TAG, "}");
 }
 
-static void smartcard_trace_write_cache_a_call(SMARTCARD_DEVICE* smartcard,
-                                               const WriteCacheA_Call* call)
+LONG smartcard_unpack_list_reader_groups_call(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                              ListReaderGroups_Call* call)
 {
-	char buffer[1024];
-	WINPR_UNUSED(smartcard);
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
-
-	WLog_LVL(TAG, g_LogLevel, "GetTransmitCount_Call {");
+	LONG status;
+	status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext));
 
-	WLog_LVL(TAG, g_LogLevel, "  szLookupName=%s", call->szLookupName);
+	if (status)
+		return status;
 
-	smartcard_log_context(TAG, &call->Common.hContext);
-	WLog_DBG(
-	    TAG, "..CardIdentifier=%s",
-	    smartcard_array_dump(call->Common.CardIdentifier, sizeof(UUID), buffer, sizeof(buffer)));
-	WLog_LVL(TAG, g_LogLevel, "  FreshnessCounter=%" PRIu32, call->Common.FreshnessCounter);
-	WLog_LVL(TAG, g_LogLevel, "  cbDataLen=%" PRIu32, call->Common.cbDataLen);
-	WLog_DBG(
-	    TAG, "  pbData=%s",
-	    smartcard_array_dump(call->Common.pbData, call->Common.cbDataLen, buffer, sizeof(buffer)));
-	WLog_LVL(TAG, g_LogLevel, "}");
-}
+	if (Stream_GetRemainingLength(s) < 8)
+	{
+		WLog_WARN(TAG, "ListReaderGroups_Call is too short: %d", (int)Stream_GetRemainingLength(s));
+		return STATUS_BUFFER_TOO_SMALL;
+	}
 
-static void smartcard_trace_write_cache_w_call(SMARTCARD_DEVICE* smartcard,
-                                               const WriteCacheW_Call* call)
-{
-	char* tmp = NULL;
-	char buffer[1024];
-	WINPR_UNUSED(smartcard);
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
+	Stream_Read_UINT32(s, call->fmszGroupsIsNULL); /* fmszGroupsIsNULL (4 bytes) */
+	Stream_Read_UINT32(s, call->cchGroups);        /* cchGroups (4 bytes) */
+	status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &(call->hContext));
 
-	WLog_LVL(TAG, g_LogLevel, "GetTransmitCount_Call {");
+	if (status)
+		return status;
 
-	ConvertFromUnicode(CP_UTF8, 0, call->szLookupName, -1, &tmp, 0, NULL, NULL);
-	WLog_LVL(TAG, g_LogLevel, "  szLookupName=%s", tmp);
-	free(tmp);
-	smartcard_log_context(TAG, &call->Common.hContext);
-	WLog_DBG(
-	    TAG, "..CardIdentifier=%s",
-	    smartcard_array_dump(call->Common.CardIdentifier, sizeof(UUID), buffer, sizeof(buffer)));
-	WLog_LVL(TAG, g_LogLevel, "  FreshnessCounter=%" PRIu32, call->Common.FreshnessCounter);
-	WLog_LVL(TAG, g_LogLevel, "  cbDataLen=%" PRIu32, call->Common.cbDataLen);
-	WLog_DBG(
-	    TAG, "  pbData=%s",
-	    smartcard_array_dump(call->Common.pbData, call->Common.cbDataLen, buffer, sizeof(buffer)));
-	WLog_LVL(TAG, g_LogLevel, "}");
+	return SCARD_S_SUCCESS;
 }
 
-static void smartcard_trace_read_cache_a_call(SMARTCARD_DEVICE* smartcard,
-                                              const ReadCacheA_Call* call)
+void smartcard_trace_list_reader_groups_call(SMARTCARD_DEVICE* smartcard,
+                                             const ListReaderGroups_Call* call, BOOL unicode)
 {
-	char buffer[1024];
+	BYTE* pb;
 	WINPR_UNUSED(smartcard);
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
+
+	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
 
-	WLog_LVL(TAG, g_LogLevel, "GetTransmitCount_Call {");
+	WLog_DBG(TAG, "ListReaderGroups%S_Call {", unicode ? "W" : "A");
+	pb = (BYTE*)&(call->hContext.pbContext);
 
-	WLog_LVL(TAG, g_LogLevel, "  szLookupName=%s", call->szLookupName);
-	smartcard_log_context(TAG, &call->Common.hContext);
-	WLog_DBG(
-	    TAG, "..CardIdentifier=%s",
-	    smartcard_array_dump(call->Common.CardIdentifier, sizeof(UUID), buffer, sizeof(buffer)));
-	WLog_LVL(TAG, g_LogLevel, "  FreshnessCounter=%" PRIu32, call->Common.FreshnessCounter);
-	WLog_LVL(TAG, g_LogLevel, "  fPbDataIsNULL=%" PRId32, call->Common.fPbDataIsNULL);
-	WLog_LVL(TAG, g_LogLevel, "  cbDataLen=%" PRIu32, call->Common.cbDataLen);
+	if (call->hContext.cbContext > 4)
+	{
+		WLog_DBG(TAG,
+		         "hContext: 0x%02" PRIx8 "%02" PRIx8 "%02" PRIx8 "%02" PRIx8 "%02" PRIx8 "%02" PRIx8
+		         "%02" PRIx8 "%02" PRIx8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], pb[4], pb[5], pb[6], pb[7], call->hContext.cbContext);
+	}
+	else
+	{
+		WLog_DBG(TAG, "hContext: 0x%02" PRIx8 "%02" PRIx8 "%02" PRIx8 "%02" PRIx8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], call->hContext.cbContext);
+	}
 
-	WLog_LVL(TAG, g_LogLevel, "}");
+	WLog_DBG(TAG, "fmszGroupsIsNULL: %" PRId32 " cchGroups: 0x%08" PRIx32, call->fmszGroupsIsNULL,
+	         call->cchGroups);
+	WLog_DBG(TAG, "}");
 }
 
-static void smartcard_trace_read_cache_w_call(SMARTCARD_DEVICE* smartcard,
-                                              const ReadCacheW_Call* call)
+LONG smartcard_pack_list_reader_groups_return(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                              ListReaderGroups_Return* ret)
 {
-	char* tmp = NULL;
-	char buffer[1024];
-	WINPR_UNUSED(smartcard);
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
+	UINT32 mszNdrPtr;
+	mszNdrPtr = (ret->cBytes) ? 0x00020008 : 0;
+	Stream_EnsureRemainingCapacity(s, ret->cBytes + 32);
+	Stream_Write_UINT32(s, ret->cBytes); /* cBytes (4 bytes) */
+	Stream_Write_UINT32(s, mszNdrPtr);   /* mszNdrPtr (4 bytes) */
+
+	if (mszNdrPtr)
+	{
+		Stream_Write_UINT32(s, ret->cBytes); /* mszNdrLen (4 bytes) */
 
-	WLog_LVL(TAG, g_LogLevel, "GetTransmitCount_Call {");
+		if (ret->msz)
+			Stream_Write(s, ret->msz, ret->cBytes);
+		else
+			Stream_Zero(s, ret->cBytes);
 
-	ConvertFromUnicode(CP_UTF8, 0, call->szLookupName, -1, &tmp, 0, NULL, NULL);
-	WLog_LVL(TAG, g_LogLevel, "  szLookupName=%s", tmp);
-	free(tmp);
-	smartcard_log_context(TAG, &call->Common.hContext);
-	WLog_DBG(
-	    TAG, "..CardIdentifier=%s",
-	    smartcard_array_dump(call->Common.CardIdentifier, sizeof(UUID), buffer, sizeof(buffer)));
-	WLog_LVL(TAG, g_LogLevel, "  FreshnessCounter=%" PRIu32, call->Common.FreshnessCounter);
-	WLog_LVL(TAG, g_LogLevel, "  fPbDataIsNULL=%" PRId32, call->Common.fPbDataIsNULL);
-	WLog_LVL(TAG, g_LogLevel, "  cbDataLen=%" PRIu32, call->Common.cbDataLen);
+		smartcard_pack_write_size_align(smartcard, s, ret->cBytes, 4);
+	}
 
-	WLog_LVL(TAG, g_LogLevel, "}");
+	return SCARD_S_SUCCESS;
 }
 
-static void smartcard_trace_transmit_call(SMARTCARD_DEVICE* smartcard, const Transmit_Call* call)
+void smartcard_trace_list_reader_groups_return(SMARTCARD_DEVICE* smartcard,
+                                               const ListReaderGroups_Return* ret, BOOL unicode)
 {
-	UINT32 cbExtraBytes;
-	BYTE* pbExtraBytes;
+	int index;
+	int length;
+	char* mszA = NULL;
 	WINPR_UNUSED(smartcard);
 
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
+	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
 
-	WLog_LVL(TAG, g_LogLevel, "Transmit_Call {");
-	smartcard_log_context(TAG, &call->hContext);
-	smartcard_log_redir_handle(TAG, &call->hCard);
-
-	if (call->pioSendPci)
+	if (unicode)
 	{
-		cbExtraBytes = (UINT32)(call->pioSendPci->cbPciLength - sizeof(SCARD_IO_REQUEST));
-		pbExtraBytes = &((BYTE*)call->pioSendPci)[sizeof(SCARD_IO_REQUEST)];
-		WLog_LVL(TAG, g_LogLevel, "pioSendPci: dwProtocol: %" PRIu32 " cbExtraBytes: %" PRIu32 "",
-		         call->pioSendPci->dwProtocol, cbExtraBytes);
-
-		if (cbExtraBytes)
-		{
-			char buffer[1024];
-			WLog_LVL(TAG, g_LogLevel, "pbExtraBytes: %s",
-			         smartcard_array_dump(pbExtraBytes, cbExtraBytes, buffer, sizeof(buffer)));
-		}
+		length = ret->cBytes / 2;
+		ConvertFromUnicode(CP_UTF8, 0, (WCHAR*)ret->msz, length, &mszA, 0, NULL, NULL);
 	}
 	else
 	{
-		WLog_LVL(TAG, g_LogLevel, "pioSendPci: null");
+		length = ret->cBytes;
+		mszA = (char*)malloc(length);
+		CopyMemory(mszA, ret->msz, ret->cBytes);
 	}
 
-	WLog_LVL(TAG, g_LogLevel, "cbSendLength: %" PRIu32 "", call->cbSendLength);
-
-	if (call->pbSendBuffer)
+	for (index = 0; index < length - 2; index++)
 	{
-		char buffer[1024];
-		WLog_DBG(
-		    TAG, "pbSendBuffer: %s",
-		    smartcard_array_dump(call->pbSendBuffer, call->cbSendLength, buffer, sizeof(buffer)));
+		if (mszA[index] == '\0')
+			mszA[index] = ',';
 	}
-	else
+
+	WLog_DBG(TAG, "ListReaderGroups%s_Return {", unicode ? "W" : "A");
+	WLog_DBG(TAG, "ReturnCode: %s (0x%08" PRIx32 ")", SCardGetErrorString(ret->ReturnCode),
+	         ret->ReturnCode);
+	WLog_DBG(TAG, "cBytes: %" PRIu32 " msz: %s", ret->cBytes, mszA);
+	WLog_DBG(TAG, "}");
+	free(mszA);
+}
+
+LONG smartcard_unpack_list_readers_call(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                        ListReaders_Call* call)
+{
+	LONG status;
+	UINT32 count;
+	UINT32 mszGroupsNdrPtr;
+	call->mszGroups = NULL;
+
+	if ((status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext))))
 	{
-		WLog_LVL(TAG, g_LogLevel, "pbSendBuffer: null");
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context failed with error %" PRId32 "", status);
+		return status;
 	}
 
-	if (call->pioRecvPci)
+	if (Stream_GetRemainingLength(s) < 16)
 	{
-		cbExtraBytes = (UINT32)(call->pioRecvPci->cbPciLength - sizeof(SCARD_IO_REQUEST));
-		pbExtraBytes = &((BYTE*)call->pioRecvPci)[sizeof(SCARD_IO_REQUEST)];
-		WLog_LVL(TAG, g_LogLevel, "pioRecvPci: dwProtocol: %" PRIu32 " cbExtraBytes: %" PRIu32 "",
-		         call->pioRecvPci->dwProtocol, cbExtraBytes);
+		WLog_WARN(TAG, "ListReaders_Call is too short: %" PRIuz "", Stream_GetRemainingLength(s));
+		return STATUS_BUFFER_TOO_SMALL;
+	}
 
-		if (cbExtraBytes)
-		{
-			char buffer[1024];
-			WLog_LVL(TAG, g_LogLevel, "pbExtraBytes: %s",
-			         smartcard_array_dump(pbExtraBytes, cbExtraBytes, buffer, sizeof(buffer)));
-		}
-	}
-	else
+	Stream_Read_UINT32(s, call->cBytes);            /* cBytes (4 bytes) */
+	Stream_Read_UINT32(s, mszGroupsNdrPtr);         /* mszGroupsNdrPtr (4 bytes) */
+	Stream_Read_UINT32(s, call->fmszReadersIsNULL); /* fmszReadersIsNULL (4 bytes) */
+	Stream_Read_UINT32(s, call->cchReaders);        /* cchReaders (4 bytes) */
+
+	if ((status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &(call->hContext))))
 	{
-		WLog_LVL(TAG, g_LogLevel, "pioRecvPci: null");
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context_ref failed with error %" PRId32 "",
+		         status);
+		return status;
 	}
 
-	WLog_LVL(TAG, g_LogLevel, "fpbRecvBufferIsNULL: %" PRId32 " cbRecvLength: %" PRIu32 "",
-	         call->fpbRecvBufferIsNULL, call->cbRecvLength);
-	WLog_LVL(TAG, g_LogLevel, "}");
-}
-
-static void smartcard_trace_locate_cards_by_atr_w_call(SMARTCARD_DEVICE* smartcard,
-                                                       const LocateCardsByATRW_Call* call)
-{
-	UINT32 index;
-	char* szEventState;
-	char* szCurrentState;
-
-	WINPR_UNUSED(smartcard);
+	if ((mszGroupsNdrPtr && !call->cBytes) || (!mszGroupsNdrPtr && call->cBytes))
+	{
+		WLog_WARN(TAG,
+		          "ListReaders_Call mszGroupsNdrPtr (0x%08" PRIX32 ") and cBytes (0x%08" PRIX32
+		          ") inconsistency",
+		          mszGroupsNdrPtr, call->cBytes);
+		return STATUS_INVALID_PARAMETER;
+	}
 
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
+	if (mszGroupsNdrPtr)
+	{
+		Stream_Read_UINT32(s, count); /* NdrCount (4 bytes) */
 
-	WLog_LVL(TAG, g_LogLevel, "LocateCardsByATRW_Call {");
-	smartcard_log_context(TAG, &call->hContext);
+		if (count != call->cBytes)
+		{
+			WLog_WARN(TAG,
+			          "ListReaders_Call NdrCount (0x%08" PRIX32 ") and cBytes (0x%08" PRIX32
+			          ") inconsistency",
+			          count, call->cBytes);
+			return STATUS_INVALID_PARAMETER;
+		}
 
-	for (index = 0; index < call->cReaders; index++)
-	{
-		char buffer[1024];
-		char* tmp = NULL;
-		const LPSCARD_READERSTATEW readerState =
-		    (const LPSCARD_READERSTATEW)&call->rgReaderStates[index];
+		if (Stream_GetRemainingLength(s) < call->cBytes)
+		{
+			WLog_WARN(TAG,
+			          "ListReaders_Call is too short: Actual: %" PRIuz ", Expected: %" PRIu32 "",
+			          Stream_GetRemainingLength(s), call->cBytes);
+			return STATUS_BUFFER_TOO_SMALL;
+		}
 
-		ConvertFromUnicode(CP_UTF8, 0, readerState->szReader, -1, &tmp, 0, NULL, NULL);
-		WLog_LVL(TAG, g_LogLevel, "\t[%" PRIu32 "]: szReader: %s cbAtr: %" PRIu32 "", index, tmp,
-		         readerState->cbAtr);
-		szCurrentState = SCardGetReaderStateString(readerState->dwCurrentState);
-		szEventState = SCardGetReaderStateString(readerState->dwEventState);
-		WLog_LVL(TAG, g_LogLevel, "\t[%" PRIu32 "]: dwCurrentState: %s (0x%08" PRIX32 ")", index,
-		         szCurrentState, readerState->dwCurrentState);
-		WLog_LVL(TAG, g_LogLevel, "\t[%" PRIu32 "]: dwEventState: %s (0x%08" PRIX32 ")", index,
-		         szEventState, readerState->dwEventState);
+		call->mszGroups = (BYTE*)calloc(1, call->cBytes + 4);
 
-		WLog_DBG(
-		    TAG, "\t[%" PRIu32 "]: cbAtr: %" PRIu32 " rgbAtr: %s", index, readerState->cbAtr,
-		    smartcard_array_dump(readerState->rgbAtr, readerState->cbAtr, buffer, sizeof(buffer)));
+		if (!call->mszGroups)
+		{
+			WLog_WARN(TAG, "ListReaders_Call out of memory error (mszGroups)");
+			return STATUS_NO_MEMORY;
+		}
 
-		free(szCurrentState);
-		free(szEventState);
-		free(tmp);
+		Stream_Read(s, call->mszGroups, call->cBytes);
+		smartcard_unpack_read_size_align(smartcard, s, call->cBytes, 4);
 	}
 
-	WLog_LVL(TAG, g_LogLevel, "}");
+	return SCARD_S_SUCCESS;
 }
 
-static void smartcard_trace_transmit_return(SMARTCARD_DEVICE* smartcard, const Transmit_Return* ret)
+void smartcard_trace_list_readers_call(SMARTCARD_DEVICE* smartcard, const ListReaders_Call* call,
+                                       BOOL unicode)
 {
-	UINT32 cbExtraBytes;
-	BYTE* pbExtraBytes;
+	BYTE* pb;
+	char* mszGroupsA = NULL;
 	WINPR_UNUSED(smartcard);
 
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
+	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
 
-	WLog_LVL(TAG, g_LogLevel, "Transmit_Return {");
-	WLog_LVL(TAG, g_LogLevel, "  ReturnCode: %s (0x%08" PRIX32 ")",
-	         SCardGetErrorString(ret->ReturnCode), ret->ReturnCode);
-
-	if (ret->pioRecvPci)
-	{
-		cbExtraBytes = (UINT32)(ret->pioRecvPci->cbPciLength - sizeof(SCARD_IO_REQUEST));
-		pbExtraBytes = &((BYTE*)ret->pioRecvPci)[sizeof(SCARD_IO_REQUEST)];
-		WLog_LVL(TAG, g_LogLevel, "  pioRecvPci: dwProtocol: %" PRIu32 " cbExtraBytes: %" PRIu32 "",
-		         ret->pioRecvPci->dwProtocol, cbExtraBytes);
-
-		if (cbExtraBytes)
-		{
-			char buffer[1024];
-			WLog_LVL(TAG, g_LogLevel, "  pbExtraBytes: %s",
-			         smartcard_array_dump(pbExtraBytes, cbExtraBytes, buffer, sizeof(buffer)));
-		}
-	}
-	else
-	{
-		WLog_LVL(TAG, g_LogLevel, "  pioRecvPci: null");
-	}
+	if (unicode)
+		ConvertFromUnicode(CP_UTF8, 0, (WCHAR*)call->mszGroups, call->cBytes / 2, &mszGroupsA, 0,
+		                   NULL, NULL);
 
-	WLog_LVL(TAG, g_LogLevel, "  cbRecvLength: %" PRIu32 "", ret->cbRecvLength);
+	WLog_DBG(TAG, "ListReaders%s_Call {", unicode ? "W" : "A");
+	pb = (BYTE*)&(call->hContext.pbContext);
 
-	if (ret->pbRecvBuffer)
+	if (call->hContext.cbContext > 4)
 	{
-		char buffer[1024];
-		WLog_DBG(
-		    TAG, "  pbRecvBuffer: %s",
-		    smartcard_array_dump(ret->pbRecvBuffer, ret->cbRecvLength, buffer, sizeof(buffer)));
+		WLog_DBG(TAG,
+		         "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8
+		         "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], pb[4], pb[5], pb[6], pb[7], call->hContext.cbContext);
 	}
 	else
 	{
-		WLog_LVL(TAG, g_LogLevel, "  pbRecvBuffer: null");
+		WLog_DBG(TAG, "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], call->hContext.cbContext);
 	}
 
-	WLog_LVL(TAG, g_LogLevel, "}");
+	WLog_DBG(TAG,
+	         "cBytes: %" PRIu32 " mszGroups: %s fmszReadersIsNULL: %" PRId32
+	         " cchReaders: 0x%08" PRIX32 "",
+	         call->cBytes, mszGroupsA, call->fmszReadersIsNULL, call->cchReaders);
+	WLog_DBG(TAG, "}");
+
+	if (unicode)
+		free(mszGroupsA);
 }
 
-static void smartcard_trace_control_return(SMARTCARD_DEVICE* smartcard, const Control_Return* ret)
+LONG smartcard_pack_list_readers_return(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                        ListReaders_Return* ret)
 {
-	WINPR_UNUSED(smartcard);
+	UINT32 mszNdrPtr;
+	LONG error;
 
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
+	if (ret->ReturnCode != SCARD_S_SUCCESS)
+		return ret->ReturnCode;
 
-	WLog_LVL(TAG, g_LogLevel, "Control_Return {");
-	WLog_LVL(TAG, g_LogLevel, "  ReturnCode: %s (0x%08" PRIX32 ")",
-	         SCardGetErrorString(ret->ReturnCode), ret->ReturnCode);
-	WLog_LVL(TAG, g_LogLevel, "  cbOutBufferSize: %" PRIu32 "", ret->cbOutBufferSize);
+	mszNdrPtr = (ret->cBytes) ? 0x00020008 : 0;
 
-	if (ret->pvOutBuffer)
+	if (!Stream_EnsureRemainingCapacity(s, ret->cBytes + 32))
 	{
-		char buffer[1024];
-		WLog_DBG(
-		    TAG, "pvOutBuffer: %s",
-		    smartcard_array_dump(ret->pvOutBuffer, ret->cbOutBufferSize, buffer, sizeof(buffer)));
+		WLog_ERR(TAG, "Stream_EnsureRemainingCapacity failed!");
+		return SCARD_F_INTERNAL_ERROR;
 	}
-	else
+
+	Stream_Write_UINT32(s, ret->cBytes); /* cBytes (4 bytes) */
+	Stream_Write_UINT32(s, mszNdrPtr);   /* mszNdrPtr (4 bytes) */
+
+	if (mszNdrPtr)
 	{
-		WLog_LVL(TAG, g_LogLevel, "pvOutBuffer: null");
+		Stream_Write_UINT32(s, ret->cBytes); /* mszNdrLen (4 bytes) */
+
+		if (ret->msz)
+			Stream_Write(s, ret->msz, ret->cBytes);
+		else
+			Stream_Zero(s, ret->cBytes);
+
+		if ((error = smartcard_pack_write_size_align(smartcard, s, ret->cBytes, 4)))
+		{
+			WLog_ERR(TAG, "smartcard_pack_write_size_align failed with error %" PRId32 "", error);
+			return error;
+		}
 	}
 
-	WLog_LVL(TAG, g_LogLevel, "}");
+	return SCARD_S_SUCCESS;
 }
 
-static void smartcard_trace_control_call(SMARTCARD_DEVICE* smartcard, const Control_Call* call)
+void smartcard_trace_list_readers_return(SMARTCARD_DEVICE* smartcard, const ListReaders_Return* ret,
+                                         BOOL unicode)
 {
+	size_t index;
+	size_t length;
+	char* mszA = NULL;
 	WINPR_UNUSED(smartcard);
 
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
+	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
 
-	WLog_LVL(TAG, g_LogLevel, "Control_Call {");
-	smartcard_log_context(TAG, &call->hContext);
-	smartcard_log_redir_handle(TAG, &call->hCard);
+	WLog_DBG(TAG, "ListReaders%s_Return {", unicode ? "W" : "A");
+	WLog_DBG(TAG, "ReturnCode: %s (0x%08" PRIX32 ")", SCardGetErrorString(ret->ReturnCode),
+	         ret->ReturnCode);
 
-	WLog_LVL(TAG, g_LogLevel,
-	         "dwControlCode: 0x%08" PRIX32 " cbInBufferSize: %" PRIu32
-	         " fpvOutBufferIsNULL: %" PRId32 " cbOutBufferSize: %" PRIu32 "",
-	         call->dwControlCode, call->cbInBufferSize, call->fpvOutBufferIsNULL,
-	         call->cbOutBufferSize);
+	if (ret->ReturnCode != SCARD_S_SUCCESS)
+	{
+		WLog_DBG(TAG, "}");
+		return;
+	}
 
-	if (call->pvInBuffer)
+	if (unicode)
 	{
-		char buffer[1024];
-		WLog_DBG(
-		    TAG, "pbInBuffer: %s",
-		    smartcard_array_dump(call->pvInBuffer, call->cbInBufferSize, buffer, sizeof(buffer)));
+		length = ret->cBytes / 2;
+
+		if (ConvertFromUnicode(CP_UTF8, 0, (WCHAR*)ret->msz, (int)length, &mszA, 0, NULL, NULL) < 1)
+		{
+			WLog_ERR(TAG, "ConvertFromUnicode failed");
+			return;
+		}
 	}
 	else
 	{
-		WLog_LVL(TAG, g_LogLevel, "pvInBuffer: null");
-	}
+		length = ret->cBytes;
+		mszA = (char*)malloc(length);
 
-	WLog_LVL(TAG, g_LogLevel, "}");
-}
+		if (!mszA)
+		{
+			WLog_ERR(TAG, "malloc failed!");
+			return;
+		}
 
-static void smartcard_trace_set_attrib_call(SMARTCARD_DEVICE* smartcard, const SetAttrib_Call* call)
-{
-	char buffer[8192];
-	WINPR_UNUSED(smartcard);
+		CopyMemory(mszA, ret->msz, ret->cBytes);
+	}
 
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
+	for (index = 0; index < length - 1; index++)
+	{
+		if (mszA[index] == '\0')
+			mszA[index] = ',';
+	}
 
-	WLog_LVL(TAG, g_LogLevel, "GetAttrib_Call {");
-	smartcard_log_context(TAG, &call->hContext);
-	smartcard_log_redir_handle(TAG, &call->hCard);
-	WLog_LVL(TAG, g_LogLevel, "dwAttrId: 0x%08" PRIX32, call->dwAttrId);
-	WLog_LVL(TAG, g_LogLevel, "cbAttrLen: 0x%08" PRId32, call->cbAttrLen);
-	WLog_LVL(TAG, g_LogLevel, "pbAttr: %s",
-	         smartcard_array_dump(call->pbAttr, call->cbAttrLen, buffer, sizeof(buffer)));
-	WLog_LVL(TAG, g_LogLevel, "}");
+	WLog_DBG(TAG, "cBytes: %" PRIu32 " msz: %s", ret->cBytes, mszA);
+	WLog_DBG(TAG, "}");
+	free(mszA);
 }
 
-static void smartcard_trace_get_attrib_return(SMARTCARD_DEVICE* smartcard,
-                                              const GetAttrib_Return* ret, DWORD dwAttrId)
+LONG smartcard_unpack_connect_common(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                     Connect_Common* common)
 {
-	WINPR_UNUSED(smartcard);
-
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
-
-	WLog_LVL(TAG, g_LogLevel, "GetAttrib_Return {");
-	WLog_LVL(TAG, g_LogLevel, "  ReturnCode: %s (0x%08" PRIX32 ")",
-	         SCardGetErrorString(ret->ReturnCode), ret->ReturnCode);
-	WLog_LVL(TAG, g_LogLevel, "  dwAttrId: %s (0x%08" PRIX32 ") cbAttrLen: 0x%08" PRIX32 "",
-	         SCardGetAttributeString(dwAttrId), dwAttrId, ret->cbAttrLen);
+	LONG status;
 
-	if (dwAttrId == SCARD_ATTR_VENDOR_NAME)
+	if (Stream_GetRemainingLength(s) < 8)
 	{
-		WLog_LVL(TAG, g_LogLevel, "  pbAttr: %.*s", ret->cbAttrLen, (char*)ret->pbAttr);
+		WLog_WARN(TAG, "Connect_Common is too short: %" PRIuz "", Stream_GetRemainingLength(s));
+		return STATUS_BUFFER_TOO_SMALL;
 	}
-	else if (dwAttrId == SCARD_ATTR_CURRENT_PROTOCOL_TYPE)
+
+	if ((status = smartcard_unpack_redir_scard_context(smartcard, s, &(common->hContext))))
 	{
-		union {
-			BYTE* pb;
-			DWORD* pd;
-		} attr;
-		attr.pb = ret->pbAttr;
-		WLog_LVL(TAG, g_LogLevel, "  dwProtocolType: %s (0x%08" PRIX32 ")",
-		         SCardGetProtocolString(*attr.pd), *attr.pd);
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context failed with error %" PRId32 "", status);
+		return status;
 	}
 
-	WLog_LVL(TAG, g_LogLevel, "}");
+	Stream_Read_UINT32(s, common->dwShareMode);          /* dwShareMode (4 bytes) */
+	Stream_Read_UINT32(s, common->dwPreferredProtocols); /* dwPreferredProtocols (4 bytes) */
+	return SCARD_S_SUCCESS;
 }
 
-static void smartcard_trace_get_attrib_call(SMARTCARD_DEVICE* smartcard, const GetAttrib_Call* call)
+LONG smartcard_unpack_connect_a_call(SMARTCARD_DEVICE* smartcard, wStream* s, ConnectA_Call* call)
 {
-	WINPR_UNUSED(smartcard);
+	LONG status;
+	UINT32 count;
+	call->szReader = NULL;
 
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
+	if (Stream_GetRemainingLength(s) < 4)
+	{
+		WLog_WARN(TAG, "ConnectA_Call is too short: %" PRIuz "", Stream_GetRemainingLength(s));
+		return STATUS_BUFFER_TOO_SMALL;
+	}
 
-	WLog_LVL(TAG, g_LogLevel, "GetAttrib_Call {");
-	smartcard_log_context(TAG, &call->hContext);
-	smartcard_log_redir_handle(TAG, &call->hCard);
+	Stream_Seek_UINT32(s); /* szReaderNdrPtr (4 bytes) */
 
-	WLog_LVL(TAG, g_LogLevel,
-	         "dwAttrId: %s (0x%08" PRIX32 ") fpbAttrIsNULL: %" PRId32 " cbAttrLen: 0x%08" PRIX32 "",
-	         SCardGetAttributeString(call->dwAttrId), call->dwAttrId, call->fpbAttrIsNULL,
-	         call->cbAttrLen);
-	WLog_LVL(TAG, g_LogLevel, "}");
-}
+	if ((status = smartcard_unpack_connect_common(smartcard, s, &(call->Common))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_connect_common failed with error %" PRId32 "", status);
+		return status;
+	}
 
-static void smartcard_trace_status_call(SMARTCARD_DEVICE* smartcard, const Status_Call* call,
-                                        BOOL unicode)
-{
-	WINPR_UNUSED(smartcard);
+	/* szReader */
+	Stream_Seek_UINT32(s);        /* NdrMaxCount (4 bytes) */
+	Stream_Seek_UINT32(s);        /* NdrOffset (4 bytes) */
+	Stream_Read_UINT32(s, count); /* NdrActualCount (4 bytes) */
+	call->szReader = (unsigned char*)malloc(count + 1);
 
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
+	if (!call->szReader)
+	{
+		WLog_WARN(TAG, "ConnectA_Call out of memory error (call->szReader)");
+		return STATUS_NO_MEMORY;
+	}
 
-	WLog_LVL(TAG, g_LogLevel, "Status%s_Call {", unicode ? "W" : "A");
-	smartcard_log_context(TAG, &call->hContext);
-	smartcard_log_redir_handle(TAG, &call->hCard);
+	Stream_Read(s, call->szReader, count);
+	smartcard_unpack_read_size_align(smartcard, s, count, 4);
+	call->szReader[count] = '\0';
 
-	WLog_LVL(TAG, g_LogLevel,
-	         "fmszReaderNamesIsNULL: %" PRId32 " cchReaderLen: %" PRIu32 " cbAtrLen: %" PRIu32 "",
-	         call->fmszReaderNamesIsNULL, call->cchReaderLen, call->cbAtrLen);
-	WLog_LVL(TAG, g_LogLevel, "}");
+	if ((status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &(call->Common.hContext))))
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context_ref failed with error %" PRId32 "",
+		         status);
+
+	return status;
 }
 
-static void smartcard_trace_status_return(SMARTCARD_DEVICE* smartcard, const Status_Return* ret,
-                                          BOOL unicode)
+void smartcard_trace_connect_a_call(SMARTCARD_DEVICE* smartcard, const ConnectA_Call* call)
 {
-	char* mszReaderNamesA = NULL;
-	char buffer[1024];
-
+	BYTE* pb;
 	WINPR_UNUSED(smartcard);
 
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
+	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
 
-	mszReaderNamesA = smartcard_convert_string_list(ret->mszReaderNames, ret->cBytes, unicode);
-
-	WLog_LVL(TAG, g_LogLevel, "Status%s_Return {", unicode ? "W" : "A");
-	WLog_LVL(TAG, g_LogLevel, "  ReturnCode: %s (0x%08" PRIX32 ")",
-	         SCardGetErrorString(ret->ReturnCode), ret->ReturnCode);
-	WLog_LVL(TAG, g_LogLevel, "  dwState: %s (0x%08" PRIX32 ") dwProtocol: %s (0x%08" PRIX32 ")",
-	         SCardGetCardStateString(ret->dwState), ret->dwState,
-	         SCardGetProtocolString(ret->dwProtocol), ret->dwProtocol);
+	WLog_DBG(TAG, "ConnectA_Call {");
+	pb = (BYTE*)&(call->Common.hContext.pbContext);
 
-	WLog_LVL(TAG, g_LogLevel, "  cBytes: %" PRIu32 " mszReaderNames: %s", ret->cBytes,
-	         mszReaderNamesA);
+	if (call->Common.hContext.cbContext > 4)
+	{
+		WLog_DBG(TAG,
+		         "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8
+		         "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], pb[4], pb[5], pb[6], pb[7],
+		         call->Common.hContext.cbContext);
+	}
+	else
+	{
+		WLog_DBG(TAG, "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], call->Common.hContext.cbContext);
+	}
 
-	WLog_LVL(TAG, g_LogLevel, "  cbAtrLen: %" PRIu32 " pbAtr: %s", ret->cbAtrLen,
-	         smartcard_array_dump(ret->pbAtr, ret->cbAtrLen, buffer, sizeof(buffer)));
-	WLog_LVL(TAG, g_LogLevel, "}");
-	free(mszReaderNamesA);
+	WLog_DBG(TAG,
+	         "szReader: %s dwShareMode: %s (0x%08" PRIX32 ") dwPreferredProtocols: %s (0x%08" PRIX32
+	         ")",
+	         call->szReader, SCardGetShareModeString(call->Common.dwShareMode),
+	         call->Common.dwShareMode, SCardGetProtocolString(call->Common.dwPreferredProtocols),
+	         call->Common.dwPreferredProtocols);
+	WLog_DBG(TAG, "}");
 }
 
-static void smartcard_trace_state_return(SMARTCARD_DEVICE* smartcard, const State_Return* ret)
+LONG smartcard_unpack_connect_w_call(SMARTCARD_DEVICE* smartcard, wStream* s, ConnectW_Call* call)
 {
-	char buffer[1024];
-
-	WINPR_UNUSED(smartcard);
-
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
+	LONG status;
+	UINT32 count;
+	call->szReader = NULL;
 
-	WLog_LVL(TAG, g_LogLevel, "Reconnect_Return {");
-	WLog_LVL(TAG, g_LogLevel, "  ReturnCode: %s (0x%08" PRIX32 ")",
-	         SCardGetErrorString(ret->ReturnCode), ret->ReturnCode);
-	WLog_LVL(TAG, g_LogLevel, "  dwState:    %s (0x%08" PRIX32 ")", ret->dwState);
-	WLog_LVL(TAG, g_LogLevel, "  dwProtocol: %s (0x%08" PRIX32 ")", ret->dwProtocol);
-	WLog_LVL(TAG, g_LogLevel, "  cbAtrLen:   %s (0x%08" PRIX32 ")", ret->cbAtrLen);
-	WLog_LVL(TAG, g_LogLevel, "  rgAtr:      %s",
-	         smartcard_array_dump(ret->rgAtr, sizeof(ret->rgAtr), buffer, sizeof(buffer)));
-	WLog_LVL(TAG, g_LogLevel, "}");
-}
+	if (Stream_GetRemainingLength(s) < 4)
+	{
+		WLog_WARN(TAG, "ConnectW_Call is too short: %" PRIuz "", Stream_GetRemainingLength(s));
+		return STATUS_BUFFER_TOO_SMALL;
+	}
 
-static void smartcard_trace_reconnect_return(SMARTCARD_DEVICE* smartcard,
-                                             const Reconnect_Return* ret)
-{
-	WINPR_UNUSED(smartcard);
+	Stream_Seek_UINT32(s); /* szReaderNdrPtr (4 bytes) */
 
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
+	if ((status = smartcard_unpack_connect_common(smartcard, s, &(call->Common))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_connect_common failed with error %" PRId32 "", status);
+		return status;
+	}
 
-	WLog_LVL(TAG, g_LogLevel, "Reconnect_Return {");
-	WLog_LVL(TAG, g_LogLevel, "  ReturnCode: %s (0x%08" PRIX32 ")",
-	         SCardGetErrorString(ret->ReturnCode), ret->ReturnCode);
-	WLog_LVL(TAG, g_LogLevel, "  dwActiveProtocol: %s (0x%08" PRIX32 ")",
-	         SCardGetProtocolString(ret->dwActiveProtocol), ret->dwActiveProtocol);
-	WLog_LVL(TAG, g_LogLevel, "}");
-}
+	/* szReader */
+	Stream_Seek_UINT32(s);        /* NdrMaxCount (4 bytes) */
+	Stream_Seek_UINT32(s);        /* NdrOffset (4 bytes) */
+	Stream_Read_UINT32(s, count); /* NdrActualCount (4 bytes) */
+	call->szReader = (WCHAR*)calloc((count + 1), 2);
 
-static void smartcard_trace_connect_a_call(SMARTCARD_DEVICE* smartcard, const ConnectA_Call* call)
-{
-	WINPR_UNUSED(smartcard);
+	if (!call->szReader)
+	{
+		WLog_WARN(TAG, "ConnectW_Call out of memory error (call->szReader)");
+		return STATUS_NO_MEMORY;
+	}
 
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
+	Stream_Read(s, call->szReader, (count * 2));
+	smartcard_unpack_read_size_align(smartcard, s, (count * 2), 4);
+	call->szReader[count] = '\0';
 
-	WLog_LVL(TAG, g_LogLevel, "ConnectA_Call {");
-	smartcard_log_context(TAG, &call->Common.hContext);
+	if ((status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &(call->Common.hContext))))
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context_ref failed with error %" PRId32 "",
+		         status);
 
-	WLog_LVL(TAG, g_LogLevel,
-	         "szReader: %s dwShareMode: %s (0x%08" PRIX32 ") dwPreferredProtocols: %s (0x%08" PRIX32
-	         ")",
-	         call->szReader, SCardGetShareModeString(call->Common.dwShareMode),
-	         call->Common.dwShareMode, SCardGetProtocolString(call->Common.dwPreferredProtocols),
-	         call->Common.dwPreferredProtocols);
-	WLog_LVL(TAG, g_LogLevel, "}");
+	return status;
 }
 
-static void smartcard_trace_connect_w_call(SMARTCARD_DEVICE* smartcard, const ConnectW_Call* call)
+void smartcard_trace_connect_w_call(SMARTCARD_DEVICE* smartcard, const ConnectW_Call* call)
 {
+	BYTE* pb;
 	char* szReaderA = NULL;
 	WINPR_UNUSED(smartcard);
 
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
+	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
 
 	ConvertFromUnicode(CP_UTF8, 0, call->szReader, -1, &szReaderA, 0, NULL, NULL);
-	WLog_LVL(TAG, g_LogLevel, "ConnectW_Call {");
-	smartcard_log_context(TAG, &call->Common.hContext);
+	WLog_DBG(TAG, "ConnectW_Call {");
+	pb = (BYTE*)&(call->Common.hContext.pbContext);
+
+	if (call->Common.hContext.cbContext > 4)
+	{
+		WLog_DBG(TAG,
+		         "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8
+		         "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], pb[4], pb[5], pb[6], pb[7],
+		         call->Common.hContext.cbContext);
+	}
+	else
+	{
+		WLog_DBG(TAG, "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], call->Common.hContext.cbContext);
+	}
 
-	WLog_LVL(TAG, g_LogLevel,
+	WLog_DBG(TAG,
 	         "szReader: %s dwShareMode: %s (0x%08" PRIX32 ") dwPreferredProtocols: %s (0x%08" PRIX32
 	         ")",
 	         szReaderA, SCardGetShareModeString(call->Common.dwShareMode), call->Common.dwShareMode,
 	         SCardGetProtocolString(call->Common.dwPreferredProtocols),
 	         call->Common.dwPreferredProtocols);
-	WLog_LVL(TAG, g_LogLevel, "}");
+	WLog_DBG(TAG, "}");
 	free(szReaderA);
 }
 
-static void smartcard_trace_hcard_and_disposition_call(SMARTCARD_DEVICE* smartcard,
-                                                       const HCardAndDisposition_Call* call,
-                                                       const char* name)
+LONG smartcard_pack_connect_return(SMARTCARD_DEVICE* smartcard, wStream* s, Connect_Return* ret)
 {
-	WINPR_UNUSED(smartcard);
+	LONG status;
 
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
+	if ((status = smartcard_pack_redir_scard_context(smartcard, s, &(ret->hContext))))
+	{
+		WLog_ERR(TAG, "smartcard_pack_redir_scard_context failed with error %" PRId32 "", status);
+		return status;
+	}
 
-	WLog_LVL(TAG, g_LogLevel, "%s_Call {", name);
-	smartcard_log_context(TAG, &call->hContext);
-	smartcard_log_redir_handle(TAG, &call->hCard);
+	if ((status = smartcard_pack_redir_scard_handle(smartcard, s, &(ret->hCard))))
+	{
+		WLog_ERR(TAG, "smartcard_pack_redir_scard_handle failed with error %" PRId32 "", status);
+		return status;
+	}
 
-	WLog_LVL(TAG, g_LogLevel, "dwDisposition: %s (0x%08" PRIX32 ")",
-	         SCardGetDispositionString(call->dwDisposition), call->dwDisposition);
-	WLog_LVL(TAG, g_LogLevel, "}");
-}
+	Stream_Write_UINT32(s, ret->dwActiveProtocol); /* dwActiveProtocol (4 bytes) */
 
-static void smartcard_trace_establish_context_call(SMARTCARD_DEVICE* smartcard,
-                                                   const EstablishContext_Call* call)
-{
-	WINPR_UNUSED(smartcard);
+	if ((status = smartcard_pack_redir_scard_context_ref(smartcard, s, &(ret->hContext))))
+	{
+		WLog_ERR(TAG, "smartcard_pack_redir_scard_context_ref failed with error %" PRId32 "",
+		         status);
+		return status;
+	}
 
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
+	if ((status = smartcard_pack_redir_scard_handle_ref(smartcard, s, &(ret->hCard))))
+		WLog_ERR(TAG, "smartcard_pack_redir_scard_handle_ref failed with error %" PRId32 "",
+		         status);
 
-	WLog_LVL(TAG, g_LogLevel, "EstablishContext_Call {");
-	WLog_LVL(TAG, g_LogLevel, "dwScope: %s (0x%08" PRIX32 ")", SCardGetScopeString(call->dwScope),
-	         call->dwScope);
-	WLog_LVL(TAG, g_LogLevel, "}");
+	return status;
 }
 
-static void smartcard_trace_establish_context_return(SMARTCARD_DEVICE* smartcard,
-                                                     const EstablishContext_Return* ret)
+void smartcard_trace_connect_return(SMARTCARD_DEVICE* smartcard, const Connect_Return* ret)
 {
+	BYTE* pb;
 	WINPR_UNUSED(smartcard);
 
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
+	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
 
-	WLog_LVL(TAG, g_LogLevel, "EstablishContext_Return {");
-	WLog_LVL(TAG, g_LogLevel, "  ReturnCode: %s (0x%08" PRIX32 ")",
-	         SCardGetErrorString(ret->ReturnCode), ret->ReturnCode);
-	smartcard_log_context(TAG, &ret->hContext);
+	WLog_DBG(TAG, "Connect_Return {");
+	WLog_DBG(TAG, "ReturnCode: %s (0x%08" PRIX32 ")", SCardGetErrorString(ret->ReturnCode),
+	         ret->ReturnCode);
+	pb = (BYTE*)&(ret->hContext.pbContext);
 
-	WLog_LVL(TAG, g_LogLevel, "}");
-}
+	if (ret->hContext.cbContext > 4)
+	{
+		WLog_DBG(TAG,
+		         "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8
+		         "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], pb[4], pb[5], pb[6], pb[7], ret->hContext.cbContext);
+	}
+	else
+	{
+		WLog_DBG(TAG, "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], ret->hContext.cbContext);
+	}
 
-void smartcard_trace_long_return(SMARTCARD_DEVICE* smartcard, const Long_Return* ret,
-                                 const char* name)
-{
-	WINPR_UNUSED(smartcard);
+	pb = (BYTE*)&(ret->hCard.pbHandle);
 
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
+	if (ret->hCard.cbHandle > 4)
+	{
+		WLog_DBG(TAG,
+		         "hCard: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8
+		         "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], pb[4], pb[5], pb[6], pb[7], ret->hCard.cbHandle);
+	}
+	else
+	{
+		WLog_DBG(TAG, "hCard: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], ret->hCard.cbHandle);
+	}
 
-	WLog_LVL(TAG, g_LogLevel, "%s_Return {", name);
-	WLog_LVL(TAG, g_LogLevel, "  ReturnCode: %s (0x%08" PRIX32 ")",
-	         SCardGetErrorString(ret->ReturnCode), ret->ReturnCode);
-	WLog_LVL(TAG, g_LogLevel, "}");
+	WLog_DBG(TAG, "dwActiveProtocol: %s (0x%08" PRIX32 ")",
+	         SCardGetProtocolString(ret->dwActiveProtocol), ret->dwActiveProtocol);
+	WLog_DBG(TAG, "}");
 }
 
-static void smartcard_trace_connect_return(SMARTCARD_DEVICE* smartcard, const Connect_Return* ret)
+LONG smartcard_unpack_reconnect_call(SMARTCARD_DEVICE* smartcard, wStream* s, Reconnect_Call* call)
 {
-	WINPR_UNUSED(smartcard);
+	LONG status;
 
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
+	if ((status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context failed with error %" PRId32 "", status);
+		return status;
+	}
+
+	if ((status = smartcard_unpack_redir_scard_handle(smartcard, s, &(call->hCard))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_handle failed with error %" PRId32 "", status);
+		return status;
+	}
+
+	if (Stream_GetRemainingLength(s) < 12)
+	{
+		WLog_WARN(TAG, "Reconnect_Call is too short: %" PRIuz "", Stream_GetRemainingLength(s));
+		return STATUS_BUFFER_TOO_SMALL;
+	}
 
-	WLog_LVL(TAG, g_LogLevel, "Connect_Return {");
-	WLog_LVL(TAG, g_LogLevel, "  ReturnCode: %s (0x%08" PRIX32 ")",
-	         SCardGetErrorString(ret->ReturnCode), ret->ReturnCode);
-	smartcard_log_context(TAG, &ret->hContext);
-	smartcard_log_redir_handle(TAG, &ret->hCard);
+	Stream_Read_UINT32(s, call->dwShareMode);          /* dwShareMode (4 bytes) */
+	Stream_Read_UINT32(s, call->dwPreferredProtocols); /* dwPreferredProtocols (4 bytes) */
+	Stream_Read_UINT32(s, call->dwInitialization);     /* dwInitialization (4 bytes) */
 
-	WLog_LVL(TAG, g_LogLevel, "  dwActiveProtocol: %s (0x%08" PRIX32 ")",
-	         SCardGetProtocolString(ret->dwActiveProtocol), ret->dwActiveProtocol);
-	WLog_LVL(TAG, g_LogLevel, "}");
+	if ((status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &(call->hContext))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context_ref failed with error %" PRId32 "",
+		         status);
+		return status;
+	}
+
+	if ((status = smartcard_unpack_redir_scard_handle_ref(smartcard, s, &(call->hCard))))
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_handle_ref failed with error %" PRId32 "",
+		         status);
+
+	return status;
 }
 
 void smartcard_trace_reconnect_call(SMARTCARD_DEVICE* smartcard, const Reconnect_Call* call)
 {
+	BYTE* pb;
 	WINPR_UNUSED(smartcard);
 
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
+	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
 
-	WLog_LVL(TAG, g_LogLevel, "Reconnect_Call {");
-	smartcard_log_context(TAG, &call->hContext);
-	smartcard_log_redir_handle(TAG, &call->hCard);
+	WLog_DBG(TAG, "Reconnect_Call {");
+	pb = (BYTE*)&(call->hContext.pbContext);
+
+	if (call->hContext.cbContext > 4)
+	{
+		WLog_DBG(TAG,
+		         "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8
+		         "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], pb[4], pb[5], pb[6], pb[7], call->hContext.cbContext);
+	}
+	else
+	{
+		WLog_DBG(TAG, "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], call->hContext.cbContext);
+	}
+
+	pb = (BYTE*)&(call->hCard.pbHandle);
 
-	WLog_LVL(TAG, g_LogLevel,
+	if (call->hCard.cbHandle > 4)
+	{
+		WLog_DBG(TAG,
+		         "hCard: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8
+		         "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], pb[4], pb[5], pb[6], pb[7], call->hCard.cbHandle);
+	}
+	else
+	{
+		WLog_DBG(TAG, "hCard: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], call->hCard.cbHandle);
+	}
+
+	WLog_DBG(TAG,
 	         "dwShareMode: %s (0x%08" PRIX32 ") dwPreferredProtocols: %s (0x%08" PRIX32
 	         ") dwInitialization: %s (0x%08" PRIX32 ")",
 	         SCardGetShareModeString(call->dwShareMode), call->dwShareMode,
 	         SCardGetProtocolString(call->dwPreferredProtocols), call->dwPreferredProtocols,
 	         SCardGetDispositionString(call->dwInitialization), call->dwInitialization);
-	WLog_LVL(TAG, g_LogLevel, "}");
+	WLog_DBG(TAG, "}");
+}
+
+LONG smartcard_pack_reconnect_return(SMARTCARD_DEVICE* smartcard, wStream* s, Reconnect_Return* ret)
+{
+	WINPR_UNUSED(smartcard);
+	Stream_Write_UINT32(s, ret->dwActiveProtocol); /* dwActiveProtocol (4 bytes) */
+	return SCARD_S_SUCCESS;
 }
 
-static void smartcard_trace_device_type_id_return(SMARTCARD_DEVICE* smartcard,
-                                                  const GetDeviceTypeId_Return* ret)
+void smartcard_trace_reconnect_return(SMARTCARD_DEVICE* smartcard, const Reconnect_Return* ret)
 {
 	WINPR_UNUSED(smartcard);
 
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
+	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
 		return;
 
-	WLog_LVL(TAG, g_LogLevel, "GetDeviceTypeId_Return {");
-	WLog_LVL(TAG, g_LogLevel, "  ReturnCode: %s (0x%08" PRIX32 ")",
-	         SCardGetErrorString(ret->ReturnCode), ret->ReturnCode);
-	WLog_LVL(TAG, g_LogLevel, "  dwDeviceId=%08" PRIx32, ret->dwDeviceId);
-
-	WLog_LVL(TAG, g_LogLevel, "}");
+	WLog_DBG(TAG, "Reconnect_Return {");
+	WLog_DBG(TAG, "ReturnCode: %s (0x%08" PRIX32 ")", SCardGetErrorString(ret->ReturnCode),
+	         ret->ReturnCode);
+	WLog_DBG(TAG, "dwActiveProtocol: %s (0x%08" PRIX32 ")",
+	         SCardGetProtocolString(ret->dwActiveProtocol), ret->dwActiveProtocol);
+	WLog_DBG(TAG, "}");
 }
 
-static LONG smartcard_unpack_common_context_and_string_a(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                                         REDIR_SCARDCONTEXT* phContext,
-                                                         CHAR** pszReaderName)
+LONG smartcard_unpack_hcard_and_disposition_call(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                                 HCardAndDisposition_Call* call)
 {
 	LONG status;
-	UINT32 index = 0;
-	status = smartcard_unpack_redir_scard_context(smartcard, s, phContext, &index);
-	if (status != SCARD_S_SUCCESS)
-		return status;
 
-	if (!smartcard_ndr_pointer_read(s, &index, NULL))
-		return ERROR_INVALID_DATA;
-
-	status = smartcard_unpack_redir_scard_context_ref(smartcard, s, phContext);
-	if (status != SCARD_S_SUCCESS)
+	if ((status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context failed with error %" PRId32 "", status);
 		return status;
+	}
 
-	status = smartcard_ndr_read_a(s, pszReaderName, NDR_PTR_FULL);
-	if (status != SCARD_S_SUCCESS)
+	if ((status = smartcard_unpack_redir_scard_handle(smartcard, s, &(call->hCard))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_handle failed with error %" PRId32 "", status);
 		return status;
+	}
 
-	smartcard_trace_context_and_string_call_a(__FUNCTION__, phContext, *pszReaderName);
-	return SCARD_S_SUCCESS;
-}
-
-static LONG smartcard_unpack_common_context_and_string_w(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                                         REDIR_SCARDCONTEXT* phContext,
-                                                         WCHAR** pszReaderName)
-{
-	LONG status;
-	UINT32 index = 0;
-
-	status = smartcard_unpack_redir_scard_context(smartcard, s, phContext, &index);
-	if (status != SCARD_S_SUCCESS)
-		return status;
+	if (Stream_GetRemainingLength(s) < 4)
+	{
+		WLog_WARN(TAG, "HCardAndDisposition_Call is too short: %" PRIuz "",
+		          Stream_GetRemainingLength(s));
+		return STATUS_BUFFER_TOO_SMALL;
+	}
 
-	if (!smartcard_ndr_pointer_read(s, &index, NULL))
-		return ERROR_INVALID_DATA;
+	Stream_Read_UINT32(s, call->dwDisposition); /* dwDisposition (4 bytes) */
 
-	status = smartcard_unpack_redir_scard_context_ref(smartcard, s, phContext);
-	if (status != SCARD_S_SUCCESS)
+	if ((status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &(call->hContext))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context_ref failed with error %" PRId32 "",
+		         status);
 		return status;
+	}
 
-	status = smartcard_ndr_read_w(s, pszReaderName, NDR_PTR_FULL);
-	if (status != SCARD_S_SUCCESS)
-		return status;
+	if ((status = smartcard_unpack_redir_scard_handle_ref(smartcard, s, &(call->hCard))))
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_handle_ref failed with error %" PRId32 "",
+		         status);
 
-	smartcard_trace_context_and_string_call_w(__FUNCTION__, phContext, *pszReaderName);
-	return SCARD_S_SUCCESS;
+	return status;
 }
 
-LONG smartcard_unpack_common_type_header(SMARTCARD_DEVICE* smartcard, wStream* s)
+void smartcard_trace_hcard_and_disposition_call(SMARTCARD_DEVICE* smartcard,
+                                                HCardAndDisposition_Call* call, const char* name)
 {
-	UINT8 version;
-	UINT32 filler;
-	UINT8 endianness;
-	UINT16 commonHeaderLength;
+	BYTE* pb;
 	WINPR_UNUSED(smartcard);
 
-	if (Stream_GetRemainingLength(s) < 8)
-	{
-		WLog_WARN(TAG, "CommonTypeHeader is too short: %" PRIuz "", Stream_GetRemainingLength(s));
-		return STATUS_BUFFER_TOO_SMALL;
-	}
+	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
+		return;
 
-	/* Process CommonTypeHeader */
-	Stream_Read_UINT8(s, version);             /* Version (1 byte) */
-	Stream_Read_UINT8(s, endianness);          /* Endianness (1 byte) */
-	Stream_Read_UINT16(s, commonHeaderLength); /* CommonHeaderLength (2 bytes) */
-	Stream_Read_UINT32(s, filler);             /* Filler (4 bytes), should be 0xCCCCCCCC */
+	WLog_DBG(TAG, "%s_Call {", name);
+	pb = (BYTE*)&(call->hContext.pbContext);
 
-	if (version != 1)
+	if (call->hContext.cbContext > 4)
 	{
-		WLog_WARN(TAG, "Unsupported CommonTypeHeader Version %" PRIu8 "", version);
-		return STATUS_INVALID_PARAMETER;
+		WLog_DBG(TAG,
+		         "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8
+		         "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], pb[4], pb[5], pb[6], pb[7], call->hContext.cbContext);
 	}
-
-	if (endianness != 0x10)
+	else
 	{
-		WLog_WARN(TAG, "Unsupported CommonTypeHeader Endianness %" PRIu8 "", endianness);
-		return STATUS_INVALID_PARAMETER;
+		WLog_DBG(TAG, "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], call->hContext.cbContext);
 	}
 
-	if (commonHeaderLength != 8)
+	pb = (BYTE*)&(call->hCard.pbHandle);
+
+	if (call->hCard.cbHandle > 4)
 	{
-		WLog_WARN(TAG, "Unsupported CommonTypeHeader CommonHeaderLength %" PRIu16 "",
-		          commonHeaderLength);
-		return STATUS_INVALID_PARAMETER;
+		WLog_DBG(TAG,
+		         "hCard: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8
+		         "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], pb[4], pb[5], pb[6], pb[7], call->hCard.cbHandle);
 	}
-
-	if (filler != 0xCCCCCCCC)
+	else
 	{
-		WLog_WARN(TAG, "Unexpected CommonTypeHeader Filler 0x%08" PRIX32 "", filler);
-		return STATUS_INVALID_PARAMETER;
+		WLog_DBG(TAG, "hCard: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], call->hCard.cbHandle);
 	}
 
-	return SCARD_S_SUCCESS;
+	WLog_DBG(TAG, "dwDisposition: %s (0x%08" PRIX32 ")",
+	         SCardGetDispositionString(call->dwDisposition), call->dwDisposition);
+	WLog_DBG(TAG, "}");
 }
 
-void smartcard_pack_common_type_header(SMARTCARD_DEVICE* smartcard, wStream* s)
+LONG smartcard_unpack_get_status_change_a_call(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                               GetStatusChangeA_Call* call)
 {
-	WINPR_UNUSED(smartcard);
-	Stream_Write_UINT8(s, 1);           /* Version (1 byte) */
-	Stream_Write_UINT8(s, 0x10);        /* Endianness (1 byte) */
-	Stream_Write_UINT16(s, 8);          /* CommonHeaderLength (2 bytes) */
-	Stream_Write_UINT32(s, 0xCCCCCCCC); /* Filler (4 bytes), should be 0xCCCCCCCC */
-}
+	UINT32 index;
+	UINT32 count;
+	LONG status;
+	UINT32 offset;
+	UINT32 maxCount;
+	UINT32 szReaderNdrPtr;
+	UINT32 rgReaderStatesNdrPtr;
+	LPSCARD_READERSTATEA readerState;
+	call->rgReaderStates = NULL;
 
-LONG smartcard_unpack_private_type_header(SMARTCARD_DEVICE* smartcard, wStream* s)
-{
-	UINT32 filler;
-	UINT32 objectBufferLength;
-	WINPR_UNUSED(smartcard);
+	if ((status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context failed with error %" PRId32 "", status);
+		return status;
+	}
 
-	if (Stream_GetRemainingLength(s) < 8)
+	if (Stream_GetRemainingLength(s) < 12)
 	{
-		WLog_WARN(TAG, "PrivateTypeHeader is too short: %" PRIuz "", Stream_GetRemainingLength(s));
+		WLog_WARN(TAG, "GetStatusChangeA_Call is too short: %" PRIuz "",
+		          Stream_GetRemainingLength(s));
 		return STATUS_BUFFER_TOO_SMALL;
 	}
 
-	Stream_Read_UINT32(s, objectBufferLength); /* ObjectBufferLength (4 bytes) */
-	Stream_Read_UINT32(s, filler);             /* Filler (4 bytes), should be 0x00000000 */
+	Stream_Read_UINT32(s, call->dwTimeOut);      /* dwTimeOut (4 bytes) */
+	Stream_Read_UINT32(s, call->cReaders);       /* cReaders (4 bytes) */
+	Stream_Read_UINT32(s, rgReaderStatesNdrPtr); /* rgReaderStatesNdrPtr (4 bytes) */
 
-	if (filler != 0x00000000)
+	if ((status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &(call->hContext))))
 	{
-		WLog_WARN(TAG, "Unexpected PrivateTypeHeader Filler 0x%08" PRIX32 "", filler);
-		return STATUS_INVALID_PARAMETER;
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context_ref failed with error %" PRId32 "",
+		         status);
+		return status;
 	}
 
-	if (objectBufferLength != Stream_GetRemainingLength(s))
+	if (Stream_GetRemainingLength(s) < 4)
+	{
+		WLog_WARN(TAG, "GetStatusChangeA_Call is too short: %" PRIuz "",
+		          Stream_GetRemainingLength(s));
+		return STATUS_BUFFER_TOO_SMALL;
+	}
+
+	Stream_Read_UINT32(s, count); /* NdrCount (4 bytes) */
+
+	if (count != call->cReaders)
 	{
 		WLog_WARN(TAG,
-		          "PrivateTypeHeader ObjectBufferLength mismatch: Actual: %" PRIu32
-		          ", Expected: %" PRIuz "",
-		          objectBufferLength, Stream_GetRemainingLength(s));
+		          "GetStatusChangeA_Call unexpected reader count: Actual: %" PRIu32
+		          ", Expected: %" PRIu32 "",
+		          count, call->cReaders);
 		return STATUS_INVALID_PARAMETER;
 	}
 
-	return SCARD_S_SUCCESS;
-}
-
-void smartcard_pack_private_type_header(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                        UINT32 objectBufferLength)
-{
-	WINPR_UNUSED(smartcard);
-	Stream_Write_UINT32(s, objectBufferLength); /* ObjectBufferLength (4 bytes) */
-	Stream_Write_UINT32(s, 0x00000000);         /* Filler (4 bytes), should be 0x00000000 */
-}
+	if (call->cReaders > 0)
+	{
+		call->rgReaderStates =
+		    (LPSCARD_READERSTATEA)calloc(call->cReaders, sizeof(SCARD_READERSTATEA));
 
-LONG smartcard_unpack_read_size_align(SMARTCARD_DEVICE* smartcard, wStream* s, size_t size,
-                                      UINT32 alignment)
-{
-	size_t pad;
-	WINPR_UNUSED(smartcard);
-	pad = size;
-	size = (size + alignment - 1) & ~(alignment - 1);
-	pad = size - pad;
+		if (!call->rgReaderStates)
+		{
+			WLog_WARN(TAG, "GetStatusChangeA_Call out of memory error (call->rgReaderStates)");
+			return STATUS_NO_MEMORY;
+		}
 
-	if (pad)
-		Stream_Seek(s, pad);
+		for (index = 0; index < call->cReaders; index++)
+		{
+			readerState = &call->rgReaderStates[index];
 
-	return (LONG)pad;
-}
+			if (Stream_GetRemainingLength(s) < 52)
+			{
+				WLog_WARN(TAG, "GetStatusChangeA_Call is too short: %" PRIuz "",
+				          Stream_GetRemainingLength(s));
+				return STATUS_BUFFER_TOO_SMALL;
+			}
 
-LONG smartcard_pack_write_size_align(SMARTCARD_DEVICE* smartcard, wStream* s, size_t size,
-                                     UINT32 alignment)
-{
-	size_t pad;
-	WINPR_UNUSED(smartcard);
-	pad = size;
-	size = (size + alignment - 1) & ~(alignment - 1);
-	pad = size - pad;
+			Stream_Read_UINT32(s, szReaderNdrPtr);              /* szReaderNdrPtr (4 bytes) */
+			Stream_Read_UINT32(s, readerState->dwCurrentState); /* dwCurrentState (4 bytes) */
+			Stream_Read_UINT32(s, readerState->dwEventState);   /* dwEventState (4 bytes) */
+			Stream_Read_UINT32(s, readerState->cbAtr);          /* cbAtr (4 bytes) */
+			Stream_Read(s, readerState->rgbAtr, 32);            /* rgbAtr [0..32] (32 bytes) */
+			Stream_Seek(s, 4);                                  /* rgbAtr [32..36] (4 bytes) */
+		}
 
-	if (pad)
-	{
-		if (!Stream_EnsureRemainingCapacity(s, pad))
+		for (index = 0; index < call->cReaders; index++)
 		{
-			WLog_ERR(TAG, "Stream_EnsureRemainingCapacity failed!");
-			return SCARD_F_INTERNAL_ERROR;
-		}
+			readerState = &call->rgReaderStates[index];
 
-		Stream_Zero(s, pad);
+			if (Stream_GetRemainingLength(s) < 12)
+			{
+				WLog_WARN(TAG, "GetStatusChangeA_Call is too short: %" PRIuz "",
+				          Stream_GetRemainingLength(s));
+				return STATUS_BUFFER_TOO_SMALL;
+			}
+
+			Stream_Read_UINT32(s, maxCount); /* NdrMaxCount (4 bytes) */
+			Stream_Read_UINT32(s, offset);   /* NdrOffset (4 bytes) */
+			Stream_Read_UINT32(s, count);    /* NdrActualCount (4 bytes) */
+
+			if (Stream_GetRemainingLength(s) < count)
+			{
+				WLog_WARN(TAG, "GetStatusChangeA_Call is too short: %" PRIuz "",
+				          Stream_GetRemainingLength(s));
+				return STATUS_BUFFER_TOO_SMALL;
+			}
+
+			readerState->szReader = (LPCSTR)malloc(count + 1);
+
+			if (!readerState->szReader)
+			{
+				WLog_WARN(TAG, "GetStatusChangeA_Call out of memory error (readerState->szReader)");
+				return STATUS_NO_MEMORY;
+			}
+
+			Stream_Read(s, (void*)readerState->szReader, count);
+			smartcard_unpack_read_size_align(smartcard, s, count, 4);
+			((char*)readerState->szReader)[count] = '\0';
+
+			if (!readerState->szReader)
+			{
+				WLog_WARN(TAG, "GetStatusChangeA_Call null reader name");
+				return STATUS_INVALID_PARAMETER;
+			}
+		}
 	}
 
 	return SCARD_S_SUCCESS;
 }
 
-SCARDCONTEXT smartcard_scard_context_native_from_redir(SMARTCARD_DEVICE* smartcard,
-                                                       REDIR_SCARDCONTEXT* context)
+void smartcard_trace_get_status_change_a_call(SMARTCARD_DEVICE* smartcard,
+                                              const GetStatusChangeA_Call* call)
 {
-	SCARDCONTEXT hContext = { 0 };
+	BYTE* pb;
+	UINT32 index;
+	char* szEventState;
+	char* szCurrentState;
+	LPSCARD_READERSTATEA readerState;
 	WINPR_UNUSED(smartcard);
 
-	if ((context->cbContext != sizeof(ULONG_PTR)) && (context->cbContext != 0))
+	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
+		return;
+
+	WLog_DBG(TAG, "GetStatusChangeA_Call {");
+	pb = (BYTE*)&(call->hContext.pbContext);
+
+	if (call->hContext.cbContext > 4)
 	{
-		WLog_WARN(TAG,
-		          "REDIR_SCARDCONTEXT does not match native size: Actual: %" PRIu32
-		          ", Expected: %" PRIuz "",
-		          context->cbContext, sizeof(ULONG_PTR));
-		return 0;
-	}
-
-	if (context->cbContext)
-		CopyMemory(&hContext, &(context->pbContext), context->cbContext);
-
-	return hContext;
-}
-
-void smartcard_scard_context_native_to_redir(SMARTCARD_DEVICE* smartcard,
-                                             REDIR_SCARDCONTEXT* context, SCARDCONTEXT hContext)
-{
-	WINPR_UNUSED(smartcard);
-	ZeroMemory(context, sizeof(REDIR_SCARDCONTEXT));
-	context->cbContext = sizeof(ULONG_PTR);
-	CopyMemory(&(context->pbContext), &hContext, context->cbContext);
-}
-
-SCARDHANDLE smartcard_scard_handle_native_from_redir(SMARTCARD_DEVICE* smartcard,
-                                                     REDIR_SCARDHANDLE* handle)
-{
-	SCARDHANDLE hCard = 0;
-	WINPR_UNUSED(smartcard);
-
-	if (handle->cbHandle != sizeof(ULONG_PTR))
-	{
-		WLog_WARN(TAG,
-		          "REDIR_SCARDHANDLE does not match native size: Actual: %" PRIu32
-		          ", Expected: %" PRIuz "",
-		          handle->cbHandle, sizeof(ULONG_PTR));
-		return 0;
-	}
-
-	if (handle->cbHandle)
-		CopyMemory(&hCard, &(handle->pbHandle), handle->cbHandle);
-
-	return hCard;
-}
-
-void smartcard_scard_handle_native_to_redir(SMARTCARD_DEVICE* smartcard, REDIR_SCARDHANDLE* handle,
-                                            SCARDHANDLE hCard)
-{
-	WINPR_UNUSED(smartcard);
-	ZeroMemory(handle, sizeof(REDIR_SCARDHANDLE));
-	handle->cbHandle = sizeof(ULONG_PTR);
-	CopyMemory(&(handle->pbHandle), &hCard, handle->cbHandle);
-}
-
-LONG smartcard_unpack_redir_scard_context_(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                           REDIR_SCARDCONTEXT* context, UINT32* index,
-                                           const char* file, const char* function, int line)
-{
-	UINT32 pbContextNdrPtr;
-	WINPR_UNUSED(smartcard);
-	WINPR_UNUSED(file);
-
-	ZeroMemory(context, sizeof(REDIR_SCARDCONTEXT));
-
-	if (Stream_GetRemainingLength(s) < 4)
-	{
-		WLog_WARN(TAG, "REDIR_SCARDCONTEXT is too short: %" PRIuz "", Stream_GetRemainingLength(s));
-		return STATUS_BUFFER_TOO_SMALL;
-	}
-
-	Stream_Read_UINT32(s, context->cbContext); /* cbContext (4 bytes) */
-
-	if (Stream_GetRemainingLength(s) < context->cbContext)
-	{
-		WLog_WARN(TAG, "REDIR_SCARDCONTEXT is too short: Actual: %" PRIuz ", Expected: %" PRIu32 "",
-		          Stream_GetRemainingLength(s), context->cbContext);
-		return STATUS_BUFFER_TOO_SMALL;
-	}
-
-	if ((context->cbContext != 0) && (context->cbContext != 4) && (context->cbContext != 8))
-	{
-		WLog_WARN(TAG, "REDIR_SCARDCONTEXT length is not 0, 4 or 8: %" PRIu32 "",
-		          context->cbContext);
-		return STATUS_INVALID_PARAMETER;
-	}
-
-	if (!smartcard_ndr_pointer_read_(s, index, &pbContextNdrPtr, file, function, line))
-		return ERROR_INVALID_DATA;
-
-	if (((context->cbContext == 0) && pbContextNdrPtr) ||
-	    ((context->cbContext != 0) && !pbContextNdrPtr))
-	{
-		WLog_WARN(TAG,
-		          "REDIR_SCARDCONTEXT cbContext (%" PRIu32 ") pbContextNdrPtr (%" PRIu32
-		          ") inconsistency",
-		          context->cbContext, pbContextNdrPtr);
-		return STATUS_INVALID_PARAMETER;
-	}
-
-	if (context->cbContext > Stream_GetRemainingLength(s))
-	{
-		WLog_WARN(TAG, "REDIR_SCARDCONTEXT is too long: Actual: %" PRIuz ", Expected: %" PRIu32 "",
-		          Stream_GetRemainingLength(s), context->cbContext);
-		return STATUS_INVALID_PARAMETER;
-	}
-
-	return SCARD_S_SUCCESS;
-}
-
-LONG smartcard_pack_redir_scard_context(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                        const REDIR_SCARDCONTEXT* context, DWORD* index)
-{
-	const UINT32 pbContextNdrPtr = 0x00020000 + *index * 4;
-	WINPR_UNUSED(smartcard);
-
-	if (context->cbContext != 0)
-	{
-		Stream_Write_UINT32(s, context->cbContext); /* cbContext (4 bytes) */
-		Stream_Write_UINT32(s, pbContextNdrPtr);    /* pbContextNdrPtr (4 bytes) */
-		*index = *index + 1;
-	}
-	else
-		Stream_Zero(s, 8);
-
-	return SCARD_S_SUCCESS;
-}
-
-LONG smartcard_unpack_redir_scard_context_ref(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                              REDIR_SCARDCONTEXT* context)
-{
-	UINT32 length;
-	WINPR_UNUSED(smartcard);
-
-	if (context->cbContext == 0)
-		return SCARD_S_SUCCESS;
-
-	if (Stream_GetRemainingLength(s) < 4)
-	{
-		WLog_WARN(TAG, "REDIR_SCARDCONTEXT is too short: Actual: %" PRIuz ", Expected: 4",
-		          Stream_GetRemainingLength(s));
-		return STATUS_BUFFER_TOO_SMALL;
-	}
-
-	Stream_Read_UINT32(s, length); /* Length (4 bytes) */
-
-	if (length != context->cbContext)
-	{
-		WLog_WARN(TAG, "REDIR_SCARDCONTEXT length (%" PRIu32 ") cbContext (%" PRIu32 ") mismatch",
-		          length, context->cbContext);
-		return STATUS_INVALID_PARAMETER;
-	}
-
-	if ((context->cbContext != 0) && (context->cbContext != 4) && (context->cbContext != 8))
-	{
-		WLog_WARN(TAG, "REDIR_SCARDCONTEXT length is not 4 or 8: %" PRIu32 "", context->cbContext);
-		return STATUS_INVALID_PARAMETER;
-	}
-
-	if (Stream_GetRemainingLength(s) < context->cbContext)
-	{
-		WLog_WARN(TAG, "REDIR_SCARDCONTEXT is too short: Actual: %" PRIuz ", Expected: %" PRIu32 "",
-		          Stream_GetRemainingLength(s), context->cbContext);
-		return STATUS_BUFFER_TOO_SMALL;
-	}
-
-	if (context->cbContext)
-		Stream_Read(s, &(context->pbContext), context->cbContext);
-	else
-		ZeroMemory(&(context->pbContext), sizeof(context->pbContext));
-
-	return SCARD_S_SUCCESS;
-}
-
-LONG smartcard_pack_redir_scard_context_ref(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                            const REDIR_SCARDCONTEXT* context)
-{
-	WINPR_UNUSED(smartcard);
-	Stream_Write_UINT32(s, context->cbContext); /* Length (4 bytes) */
-
-	if (context->cbContext)
-	{
-		Stream_Write(s, &(context->pbContext), context->cbContext);
-	}
-
-	return SCARD_S_SUCCESS;
-}
-
-LONG smartcard_unpack_redir_scard_handle_(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                          REDIR_SCARDHANDLE* handle, UINT32* index,
-                                          const char* file, const char* function, int line)
-{
-	WINPR_UNUSED(smartcard);
-	ZeroMemory(handle, sizeof(REDIR_SCARDHANDLE));
-
-	if (Stream_GetRemainingLength(s) < 4)
-	{
-		WLog_WARN(TAG, "SCARDHANDLE is too short: %" PRIuz "", Stream_GetRemainingLength(s));
-		return STATUS_BUFFER_TOO_SMALL;
-	}
-
-	Stream_Read_UINT32(s, handle->cbHandle); /* Length (4 bytes) */
-
-	if ((Stream_GetRemainingLength(s) < handle->cbHandle) || (!handle->cbHandle))
-	{
-		WLog_WARN(TAG, "SCARDHANDLE is too short: Actual: %" PRIuz ", Expected: %" PRIu32 "",
-		          Stream_GetRemainingLength(s), handle->cbHandle);
-		return STATUS_BUFFER_TOO_SMALL;
-	}
-
-	if (!smartcard_ndr_pointer_read_(s, index, NULL, file, function, line))
-		return ERROR_INVALID_DATA;
-
-	return SCARD_S_SUCCESS;
-}
-
-LONG smartcard_pack_redir_scard_handle(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                       const REDIR_SCARDHANDLE* handle, DWORD* index)
-{
-	const UINT32 pbContextNdrPtr = 0x00020000 + *index * 4;
-	WINPR_UNUSED(smartcard);
-
-	if (handle->cbHandle != 0)
-	{
-		Stream_Write_UINT32(s, handle->cbHandle); /* cbContext (4 bytes) */
-		Stream_Write_UINT32(s, pbContextNdrPtr);  /* pbContextNdrPtr (4 bytes) */
-		*index = *index + 1;
-	}
-	else
-		Stream_Zero(s, 8);
-	return SCARD_S_SUCCESS;
-}
-
-LONG smartcard_unpack_redir_scard_handle_ref(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                             REDIR_SCARDHANDLE* handle)
-{
-	UINT32 length;
-	WINPR_UNUSED(smartcard);
-
-	if (Stream_GetRemainingLength(s) < 4)
-	{
-		WLog_WARN(TAG, "REDIR_SCARDHANDLE is too short: Actual: %" PRIuz ", Expected: 4",
-		          Stream_GetRemainingLength(s));
-		return STATUS_BUFFER_TOO_SMALL;
-	}
-
-	Stream_Read_UINT32(s, length); /* Length (4 bytes) */
-
-	if (length != handle->cbHandle)
-	{
-		WLog_WARN(TAG, "REDIR_SCARDHANDLE length (%" PRIu32 ") cbHandle (%" PRIu32 ") mismatch",
-		          length, handle->cbHandle);
-		return STATUS_INVALID_PARAMETER;
-	}
-
-	if ((handle->cbHandle != 4) && (handle->cbHandle != 8))
-	{
-		WLog_WARN(TAG, "REDIR_SCARDHANDLE length is not 4 or 8: %" PRIu32 "", handle->cbHandle);
-		return STATUS_INVALID_PARAMETER;
-	}
-
-	if ((Stream_GetRemainingLength(s) < handle->cbHandle) || (!handle->cbHandle))
-	{
-		WLog_WARN(TAG, "REDIR_SCARDHANDLE is too short: Actual: %" PRIuz ", Expected: %" PRIu32 "",
-		          Stream_GetRemainingLength(s), handle->cbHandle);
-		return STATUS_BUFFER_TOO_SMALL;
-	}
-
-	if (handle->cbHandle)
-		Stream_Read(s, &(handle->pbHandle), handle->cbHandle);
-
-	return SCARD_S_SUCCESS;
-}
-
-LONG smartcard_pack_redir_scard_handle_ref(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                           const REDIR_SCARDHANDLE* handle)
-{
-	WINPR_UNUSED(smartcard);
-	Stream_Write_UINT32(s, handle->cbHandle); /* Length (4 bytes) */
-
-	if (handle->cbHandle)
-		Stream_Write(s, &(handle->pbHandle), handle->cbHandle);
-
-	return SCARD_S_SUCCESS;
-}
-
-LONG smartcard_unpack_establish_context_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                             EstablishContext_Call* call)
-{
-	WINPR_UNUSED(smartcard);
-
-	if (Stream_GetRemainingLength(s) < 4)
-	{
-		WLog_WARN(TAG, "EstablishContext_Call is too short: Actual: %" PRIuz ", Expected: 4",
-		          Stream_GetRemainingLength(s));
-		return STATUS_BUFFER_TOO_SMALL;
-	}
-
-	Stream_Read_UINT32(s, call->dwScope); /* dwScope (4 bytes) */
-	smartcard_trace_establish_context_call(smartcard, call);
-	return SCARD_S_SUCCESS;
-}
-
-LONG smartcard_pack_establish_context_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                             const EstablishContext_Return* ret)
-{
-	LONG status;
-	DWORD index = 0;
-
-	smartcard_trace_establish_context_return(smartcard, ret);
-	if (ret->ReturnCode != SCARD_S_SUCCESS)
-		return ret->ReturnCode;
-
-	if ((status = smartcard_pack_redir_scard_context(smartcard, s, &(ret->hContext), &index)))
-		return status;
-
-	return smartcard_pack_redir_scard_context_ref(smartcard, s, &(ret->hContext));
-}
-
-LONG smartcard_unpack_context_call(SMARTCARD_DEVICE* smartcard, wStream* s, Context_Call* call,
-                                   const char* name)
-{
-	LONG status;
-	UINT32 index = 0;
-
-	status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext), &index);
-	if (status != SCARD_S_SUCCESS)
-		return status;
-
-	if ((status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &(call->hContext))))
-		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context_ref failed with error %" PRId32 "",
-		         status);
-
-	smartcard_trace_context_call(smartcard, call, name);
-	return status;
-}
-
-LONG smartcard_unpack_list_reader_groups_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                              ListReaderGroups_Call* call, BOOL unicode)
-{
-	LONG status;
-	UINT32 index = 0;
-	status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext), &index);
-
-	if (status != SCARD_S_SUCCESS)
-		return status;
-
-	if (Stream_GetRemainingLength(s) < 8)
-	{
-		WLog_WARN(TAG, "ListReaderGroups_Call is too short: %" PRIdz, Stream_GetRemainingLength(s));
-		return STATUS_BUFFER_TOO_SMALL;
-	}
-
-	Stream_Read_INT32(s, call->fmszGroupsIsNULL); /* fmszGroupsIsNULL (4 bytes) */
-	Stream_Read_UINT32(s, call->cchGroups);       /* cchGroups (4 bytes) */
-	status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &(call->hContext));
-
-	if (status != SCARD_S_SUCCESS)
-		return status;
-
-	smartcard_trace_list_reader_groups_call(smartcard, call, unicode);
-	return SCARD_S_SUCCESS;
-}
-
-LONG smartcard_pack_list_reader_groups_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                              const ListReaderGroups_Return* ret, BOOL unicode)
-{
-	DWORD index = 0;
-	UINT32 size = unicode ? sizeof(WCHAR) : sizeof(CHAR);
-	size *= ret->cBytes;
-
-	smartcard_trace_list_reader_groups_return(smartcard, ret, unicode);
-	if (ret->ReturnCode != SCARD_S_SUCCESS)
-		return ret->ReturnCode;
-
-	if (!Stream_EnsureRemainingCapacity(s, 4))
-		return SCARD_E_NO_MEMORY;
-
-	Stream_Write_UINT32(s, size); /* cBytes (4 bytes) */
-	if (!smartcard_ndr_pointer_write(s, &index, size))
-		return SCARD_E_NO_MEMORY;
-
-	return smartcard_ndr_write(s, ret->msz, size, 1, NDR_PTR_SIMPLE);
-}
-
-LONG smartcard_unpack_list_readers_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                        ListReaders_Call* call, BOOL unicode)
-{
-	LONG status;
-	UINT32 index = 0;
-	UINT32 mszGroupsNdrPtr;
-	call->mszGroups = NULL;
-
-	status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext), &index);
-	if (status != SCARD_S_SUCCESS)
-		return status;
-
-	if (Stream_GetRemainingLength(s) < 16)
-	{
-		WLog_WARN(TAG, "ListReaders_Call is too short: %" PRIuz "", Stream_GetRemainingLength(s));
-		return STATUS_BUFFER_TOO_SMALL;
-	}
-
-	Stream_Read_UINT32(s, call->cBytes); /* cBytes (4 bytes) */
-	if (!smartcard_ndr_pointer_read(s, &index, &mszGroupsNdrPtr))
-		return ERROR_INVALID_DATA;
-	Stream_Read_INT32(s, call->fmszReadersIsNULL); /* fmszReadersIsNULL (4 bytes) */
-	Stream_Read_UINT32(s, call->cchReaders);       /* cchReaders (4 bytes) */
-
-	if ((status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &(call->hContext))))
-		return status;
-
-	if (mszGroupsNdrPtr)
-	{
-		status = smartcard_ndr_read(s, &call->mszGroups, call->cBytes, 1, NDR_PTR_SIMPLE);
-		if (status != SCARD_S_SUCCESS)
-			return status;
-	}
-
-	smartcard_trace_list_readers_call(smartcard, call, unicode);
-	return SCARD_S_SUCCESS;
-}
-
-LONG smartcard_pack_list_readers_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                        const ListReaders_Return* ret, BOOL unicode)
-{
-	DWORD index = 0;
-	UINT32 size = unicode ? sizeof(WCHAR) : sizeof(CHAR);
-
-	size *= ret->cBytes;
-
-	smartcard_trace_list_readers_return(smartcard, ret, unicode);
-	if (ret->ReturnCode != SCARD_S_SUCCESS)
-		return ret->ReturnCode;
-
-	if (!Stream_EnsureRemainingCapacity(s, 4))
-	{
-		WLog_ERR(TAG, "Stream_EnsureRemainingCapacity failed!");
-		return SCARD_F_INTERNAL_ERROR;
-	}
-
-	Stream_Write_UINT32(s, size); /* cBytes (4 bytes) */
-	if (!smartcard_ndr_pointer_write(s, &index, size))
-		return SCARD_E_NO_MEMORY;
-
-	return smartcard_ndr_write(s, ret->msz, size, 1, NDR_PTR_SIMPLE);
-}
-
-static LONG smartcard_unpack_connect_common(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                            Connect_Common* common, UINT32* index)
-{
-	LONG status;
-
-	status = smartcard_unpack_redir_scard_context(smartcard, s, &(common->hContext), index);
-	if (status != SCARD_S_SUCCESS)
-		return status;
-
-	if (Stream_GetRemainingLength(s) < 8)
-	{
-		WLog_WARN(TAG, "Connect_Common is too short: %" PRIuz "", Stream_GetRemainingLength(s));
-		return STATUS_BUFFER_TOO_SMALL;
-	}
-
-	Stream_Read_UINT32(s, common->dwShareMode);          /* dwShareMode (4 bytes) */
-	Stream_Read_UINT32(s, common->dwPreferredProtocols); /* dwPreferredProtocols (4 bytes) */
-	return SCARD_S_SUCCESS;
-}
-
-LONG smartcard_unpack_connect_a_call(SMARTCARD_DEVICE* smartcard, wStream* s, ConnectA_Call* call)
-{
-	LONG status;
-	UINT32 index = 0;
-	call->szReader = NULL;
-
-	if (!smartcard_ndr_pointer_read(s, &index, NULL))
-		return ERROR_INVALID_DATA;
-
-	if ((status = smartcard_unpack_connect_common(smartcard, s, &(call->Common), &index)))
+		WLog_DBG(TAG,
+		         "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8
+		         "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], pb[4], pb[5], pb[6], pb[7], call->hContext.cbContext);
+	}
+	else
 	{
-		WLog_ERR(TAG, "smartcard_unpack_connect_common failed with error %" PRId32 "", status);
-		return status;
+		WLog_DBG(TAG, "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], call->hContext.cbContext);
 	}
 
-	status = smartcard_ndr_read_a(s, &call->szReader, NDR_PTR_FULL);
-	if (status != SCARD_S_SUCCESS)
-		return status;
-
-	if ((status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &(call->Common.hContext))))
-		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context_ref failed with error %" PRId32 "",
-		         status);
-
-	smartcard_trace_connect_a_call(smartcard, call);
-	return status;
-}
-
-LONG smartcard_unpack_connect_w_call(SMARTCARD_DEVICE* smartcard, wStream* s, ConnectW_Call* call)
-{
-	LONG status;
-	UINT32 index = 0;
-
-	call->szReader = NULL;
-
-	if (!smartcard_ndr_pointer_read(s, &index, NULL))
-		return ERROR_INVALID_DATA;
+	WLog_DBG(TAG, "dwTimeOut: 0x%08" PRIX32 " cReaders: %" PRIu32 "", call->dwTimeOut,
+	         call->cReaders);
 
-	if ((status = smartcard_unpack_connect_common(smartcard, s, &(call->Common), &index)))
+	for (index = 0; index < call->cReaders; index++)
 	{
-		WLog_ERR(TAG, "smartcard_unpack_connect_common failed with error %" PRId32 "", status);
-		return status;
+		readerState = &call->rgReaderStates[index];
+		WLog_DBG(TAG, "\t[%" PRIu32 "]: szReader: %s cbAtr: %" PRIu32 "", index,
+		         readerState->szReader, readerState->cbAtr);
+		szCurrentState = SCardGetReaderStateString(readerState->dwCurrentState);
+		szEventState = SCardGetReaderStateString(readerState->dwEventState);
+		WLog_DBG(TAG, "\t[%" PRIu32 "]: dwCurrentState: %s (0x%08" PRIX32 ")", index,
+		         szCurrentState, readerState->dwCurrentState);
+		WLog_DBG(TAG, "\t[%" PRIu32 "]: dwEventState: %s (0x%08" PRIX32 ")", index, szEventState,
+		         readerState->dwEventState);
+		free(szCurrentState);
+		free(szEventState);
 	}
 
-	status = smartcard_ndr_read_w(s, &call->szReader, NDR_PTR_FULL);
-	if (status != SCARD_S_SUCCESS)
-		return status;
-
-	if ((status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &(call->Common.hContext))))
-		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context_ref failed with error %" PRId32 "",
-		         status);
-
-	smartcard_trace_connect_w_call(smartcard, call);
-	return status;
-}
-
-LONG smartcard_pack_connect_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                   const Connect_Return* ret)
-{
-	LONG status;
-	DWORD index = 0;
-
-	smartcard_trace_connect_return(smartcard, ret);
-	if (ret->ReturnCode != SCARD_S_SUCCESS)
-		return ret->ReturnCode;
-
-	status = smartcard_pack_redir_scard_context(smartcard, s, &ret->hContext, &index);
-	if (status != SCARD_S_SUCCESS)
-		return status;
-
-	status = smartcard_pack_redir_scard_handle(smartcard, s, &ret->hCard, &index);
-	if (status != SCARD_S_SUCCESS)
-		return status;
-
-	if (!Stream_EnsureRemainingCapacity(s, 4))
-		return SCARD_E_NO_MEMORY;
-
-	Stream_Write_UINT32(s, ret->dwActiveProtocol); /* dwActiveProtocol (4 bytes) */
-	status = smartcard_pack_redir_scard_context_ref(smartcard, s, &ret->hContext);
-	if (status != SCARD_S_SUCCESS)
-		return status;
-	return smartcard_pack_redir_scard_handle_ref(smartcard, s, &(ret->hCard));
+	WLog_DBG(TAG, "}");
 }
 
-LONG smartcard_unpack_reconnect_call(SMARTCARD_DEVICE* smartcard, wStream* s, Reconnect_Call* call)
+LONG smartcard_unpack_get_status_change_w_call(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                               GetStatusChangeW_Call* call)
 {
+	UINT32 index;
+	UINT32 count;
 	LONG status;
-	UINT32 index = 0;
-
-	status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext), &index);
-	if (status != SCARD_S_SUCCESS)
-		return status;
+	UINT32 offset;
+	UINT32 maxCount;
+	UINT32 szReaderNdrPtr;
+	UINT32 rgReaderStatesNdrPtr;
+	LPSCARD_READERSTATEW readerState;
+	call->rgReaderStates = NULL;
 
-	status = smartcard_unpack_redir_scard_handle(smartcard, s, &(call->hCard), &index);
-	if (status != SCARD_S_SUCCESS)
+	if ((status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context failed with error %" PRId32 "", status);
 		return status;
+	}
 
 	if (Stream_GetRemainingLength(s) < 12)
 	{
-		WLog_WARN(TAG, "Reconnect_Call is too short: %" PRIuz "", Stream_GetRemainingLength(s));
+		WLog_WARN(TAG, "GetStatusChangeW_Call is too short: %" PRIuz "",
+		          Stream_GetRemainingLength(s));
 		return STATUS_BUFFER_TOO_SMALL;
 	}
 
-	Stream_Read_UINT32(s, call->dwShareMode);          /* dwShareMode (4 bytes) */
-	Stream_Read_UINT32(s, call->dwPreferredProtocols); /* dwPreferredProtocols (4 bytes) */
-	Stream_Read_UINT32(s, call->dwInitialization);     /* dwInitialization (4 bytes) */
+	Stream_Read_UINT32(s, call->dwTimeOut);      /* dwTimeOut (4 bytes) */
+	Stream_Read_UINT32(s, call->cReaders);       /* cReaders (4 bytes) */
+	Stream_Read_UINT32(s, rgReaderStatesNdrPtr); /* rgReaderStatesNdrPtr (4 bytes) */
 
 	if ((status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &(call->hContext))))
 	{
@@ -2256,336 +1570,219 @@ LONG smartcard_unpack_reconnect_call(SMARTCARD_DEVICE* smartcard, wStream* s, Re
 		return status;
 	}
 
-	if ((status = smartcard_unpack_redir_scard_handle_ref(smartcard, s, &(call->hCard))))
-		WLog_ERR(TAG, "smartcard_unpack_redir_scard_handle_ref failed with error %" PRId32 "",
-		         status);
-
-	smartcard_trace_reconnect_call(smartcard, call);
-	return status;
-}
-
-LONG smartcard_pack_reconnect_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                     const Reconnect_Return* ret)
-{
-	smartcard_trace_reconnect_return(smartcard, ret);
-	if (ret->ReturnCode != SCARD_S_SUCCESS)
-		return ret->ReturnCode;
-
-	if (!Stream_EnsureRemainingCapacity(s, 4))
-		return SCARD_E_NO_MEMORY;
-	Stream_Write_UINT32(s, ret->dwActiveProtocol); /* dwActiveProtocol (4 bytes) */
-	return SCARD_S_SUCCESS;
-}
-
-LONG smartcard_unpack_hcard_and_disposition_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                                 HCardAndDisposition_Call* call, const char* name)
-{
-	LONG status;
-	UINT32 index = 0;
-
-	status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext), &index);
-	if (status != SCARD_S_SUCCESS)
-		return status;
-
-	status = smartcard_unpack_redir_scard_handle(smartcard, s, &(call->hCard), &index);
-	if (status != SCARD_S_SUCCESS)
-		return status;
-
 	if (Stream_GetRemainingLength(s) < 4)
 	{
-		WLog_WARN(TAG, "HCardAndDisposition_Call is too short: %" PRIuz "",
+		WLog_WARN(TAG, "GetStatusChangeW_Call is too short: %" PRIuz "",
 		          Stream_GetRemainingLength(s));
 		return STATUS_BUFFER_TOO_SMALL;
 	}
 
-	Stream_Read_UINT32(s, call->dwDisposition); /* dwDisposition (4 bytes) */
-
-	if ((status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &(call->hContext))))
-		return status;
-
-	if ((status = smartcard_unpack_redir_scard_handle_ref(smartcard, s, &(call->hCard))))
-		return status;
-
-	smartcard_trace_hcard_and_disposition_call(smartcard, call, name);
-	return status;
-}
-
-static void smartcard_trace_get_status_change_a_call(SMARTCARD_DEVICE* smartcard,
-                                                     const GetStatusChangeA_Call* call)
-{
-	UINT32 index;
-	char* szEventState;
-	char* szCurrentState;
-	LPSCARD_READERSTATEA readerState;
-	WINPR_UNUSED(smartcard);
-
-	if (!WLog_IsLevelActive(WLog_Get(TAG), g_LogLevel))
-		return;
-
-	WLog_LVL(TAG, g_LogLevel, "GetStatusChangeA_Call {");
-	smartcard_log_context(TAG, &call->hContext);
-
-	WLog_LVL(TAG, g_LogLevel, "dwTimeOut: 0x%08" PRIX32 " cReaders: %" PRIu32 "", call->dwTimeOut,
-	         call->cReaders);
-
-	for (index = 0; index < call->cReaders; index++)
-	{
-		readerState = &call->rgReaderStates[index];
-		WLog_LVL(TAG, g_LogLevel, "\t[%" PRIu32 "]: szReader: %s cbAtr: %" PRIu32 "", index,
-		         readerState->szReader, readerState->cbAtr);
-		szCurrentState = SCardGetReaderStateString(readerState->dwCurrentState);
-		szEventState = SCardGetReaderStateString(readerState->dwEventState);
-		WLog_LVL(TAG, g_LogLevel, "\t[%" PRIu32 "]: dwCurrentState: %s (0x%08" PRIX32 ")", index,
-		         szCurrentState, readerState->dwCurrentState);
-		WLog_LVL(TAG, g_LogLevel, "\t[%" PRIu32 "]: dwEventState: %s (0x%08" PRIX32 ")", index,
-		         szEventState, readerState->dwEventState);
-		free(szCurrentState);
-		free(szEventState);
-	}
-
-	WLog_LVL(TAG, g_LogLevel, "}");
-}
-
-static LONG smartcard_unpack_reader_state_a(wStream* s, LPSCARD_READERSTATEA* ppcReaders,
-                                            UINT32 cReaders, UINT32* ptrIndex)
-{
-	UINT32 index, len;
-	LONG status = ERROR_INVALID_DATA;
-	LPSCARD_READERSTATEA rgReaderStates;
-
-	if (Stream_GetRemainingLength(s) < 4)
-		return status;
-
-	Stream_Read_UINT32(s, len);
-	if (len != cReaders)
-	{
-		WLog_ERR(TAG, "Count mismatch when reading LPSCARD_READERSTATEA");
-		return status;
-	}
-	rgReaderStates = (LPSCARD_READERSTATEA)calloc(cReaders, sizeof(SCARD_READERSTATEA));
-
-	if (!rgReaderStates)
-		return STATUS_NO_MEMORY;
+	Stream_Seek_UINT32(s); /* NdrConformant (4 bytes) */
 
-	for (index = 0; index < cReaders; index++)
+	if (call->cReaders > 0)
 	{
-		LPSCARD_READERSTATEA readerState = &rgReaderStates[index];
+		call->rgReaderStates =
+		    (LPSCARD_READERSTATEW)calloc(call->cReaders, sizeof(SCARD_READERSTATEW));
 
-		if (Stream_GetRemainingLength(s) < 52)
+		if (!call->rgReaderStates)
 		{
-			WLog_WARN(TAG, "GetStatusChangeA_Call is too short: %" PRIuz "",
-			          Stream_GetRemainingLength(s));
-			goto fail;
+			WLog_WARN(TAG, "GetStatusChangeW_Call out of memory error (call->rgReaderStates)");
+			return STATUS_NO_MEMORY;
 		}
 
-		if (!smartcard_ndr_pointer_read(s, ptrIndex, NULL))
-			goto fail;
-		Stream_Read_UINT32(s, readerState->dwCurrentState); /* dwCurrentState (4 bytes) */
-		Stream_Read_UINT32(s, readerState->dwEventState);   /* dwEventState (4 bytes) */
-		Stream_Read_UINT32(s, readerState->cbAtr);          /* cbAtr (4 bytes) */
-		Stream_Read(s, readerState->rgbAtr, 36);            /* rgbAtr [0..36] (36 bytes) */
-	}
+		for (index = 0; index < call->cReaders; index++)
+		{
+			readerState = &call->rgReaderStates[index];
 
-	for (index = 0; index < cReaders; index++)
-	{
-		LPSCARD_READERSTATEA readerState = &rgReaderStates[index];
+			if (Stream_GetRemainingLength(s) < 52)
+			{
+				WLog_WARN(TAG, "GetStatusChangeW_Call is too short: %" PRIuz "",
+				          Stream_GetRemainingLength(s));
+				return STATUS_BUFFER_TOO_SMALL;
+			}
 
-		status = smartcard_ndr_read_a(s, &readerState->szReader, NDR_PTR_FULL);
-		if (status != SCARD_S_SUCCESS)
-			goto fail;
-	}
+			Stream_Read_UINT32(s, szReaderNdrPtr);              /* (4 bytes) */
+			Stream_Read_UINT32(s, readerState->dwCurrentState); /* dwCurrentState (4 bytes) */
+			Stream_Read_UINT32(s, readerState->dwEventState);   /* dwEventState (4 bytes) */
+			Stream_Read_UINT32(s, readerState->cbAtr);          /* cbAtr (4 bytes) */
+			Stream_Read(s, readerState->rgbAtr, 32);            /* rgbAtr [0..32] (32 bytes) */
+			Stream_Seek(s, 4);                                  /* rgbAtr [32..36] (4 bytes) */
+		}
 
-	*ppcReaders = rgReaderStates;
-	return SCARD_S_SUCCESS;
-fail:
-	if (rgReaderStates)
-	{
-		for (index = 0; index < cReaders; index++)
+		for (index = 0; index < call->cReaders; index++)
 		{
-			LPSCARD_READERSTATEA readerState = &rgReaderStates[index];
-			free(readerState->szReader);
-		}
-	}
-	free(rgReaderStates);
-	return status;
-}
+			readerState = &call->rgReaderStates[index];
 
-static LONG smartcard_unpack_reader_state_w(wStream* s, LPSCARD_READERSTATEW* ppcReaders,
-                                            UINT32 cReaders, UINT32* ptrIndex)
-{
-	UINT32 index, len;
-	LONG status = ERROR_INVALID_DATA;
-	LPSCARD_READERSTATEW rgReaderStates;
+			if (Stream_GetRemainingLength(s) < 12)
+			{
+				WLog_WARN(TAG, "GetStatusChangeW_Call is too short: %" PRIuz "",
+				          Stream_GetRemainingLength(s));
+				return STATUS_BUFFER_TOO_SMALL;
+			}
 
-	if (Stream_GetRemainingLength(s) < 4)
-		return status;
+			Stream_Read_UINT32(s, maxCount); /* NdrMaxCount (4 bytes) */
+			Stream_Read_UINT32(s, offset);   /* NdrOffset (4 bytes) */
+			Stream_Read_UINT32(s, count);    /* NdrActualCount (4 bytes) */
 
-	Stream_Read_UINT32(s, len);
-	if (len != cReaders)
-	{
-		WLog_ERR(TAG, "Count mismatch when reading LPSCARD_READERSTATEW");
-		return status;
-	}
+			if (Stream_GetRemainingLength(s) < (count * 2))
+			{
+				WLog_WARN(TAG, "GetStatusChangeW_Call is too short: %" PRIuz "",
+				          Stream_GetRemainingLength(s));
+				return STATUS_BUFFER_TOO_SMALL;
+			}
 
-	rgReaderStates = (LPSCARD_READERSTATEW)calloc(cReaders, sizeof(SCARD_READERSTATEW));
+			readerState->szReader = (WCHAR*)calloc((count + 1), 2);
 
-	if (!rgReaderStates)
-		return STATUS_NO_MEMORY;
+			if (!readerState->szReader)
+			{
+				WLog_WARN(TAG, "GetStatusChangeW_Call out of memory error (readerState->szReader)");
+				return STATUS_NO_MEMORY;
+			}
 
-	for (index = 0; index < cReaders; index++)
-	{
-		LPSCARD_READERSTATEW readerState = &rgReaderStates[index];
+			Stream_Read(s, (void*)readerState->szReader, (count * 2));
+			smartcard_unpack_read_size_align(smartcard, s, (count * 2), 4);
+			((WCHAR*)readerState->szReader)[count] = '\0';
 
-		if (Stream_GetRemainingLength(s) < 52)
-		{
-			WLog_WARN(TAG, "GetStatusChangeA_Call is too short: %" PRIuz "",
-			          Stream_GetRemainingLength(s));
-			goto fail;
+			if (!readerState->szReader)
+			{
+				WLog_WARN(TAG, "GetStatusChangeW_Call null reader name");
+				return STATUS_INVALID_PARAMETER;
+			}
 		}
-
-		if (!smartcard_ndr_pointer_read(s, ptrIndex, NULL))
-			goto fail;
-		Stream_Read_UINT32(s, readerState->dwCurrentState); /* dwCurrentState (4 bytes) */
-		Stream_Read_UINT32(s, readerState->dwEventState);   /* dwEventState (4 bytes) */
-		Stream_Read_UINT32(s, readerState->cbAtr);          /* cbAtr (4 bytes) */
-		Stream_Read(s, readerState->rgbAtr, 36);            /* rgbAtr [0..36] (36 bytes) */
-	}
-
-	for (index = 0; index < cReaders; index++)
-	{
-		LPSCARD_READERSTATEW readerState = &rgReaderStates[index];
-
-		status = smartcard_ndr_read_w(s, &readerState->szReader, NDR_PTR_FULL);
-		if (status != SCARD_S_SUCCESS)
-			goto fail;
 	}
 
-	*ppcReaders = rgReaderStates;
 	return SCARD_S_SUCCESS;
-fail:
-	if (rgReaderStates)
-	{
-		for (index = 0; index < cReaders; index++)
-		{
-			LPSCARD_READERSTATEW readerState = &rgReaderStates[index];
-			free(readerState->szReader);
-		}
-	}
-	free(rgReaderStates);
-	return status;
 }
 
-/******************************************************************************/
-/************************************* End Trace Functions ********************/
-/******************************************************************************/
-
-LONG smartcard_unpack_get_status_change_a_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                               GetStatusChangeA_Call* call)
+void smartcard_trace_get_status_change_w_call(SMARTCARD_DEVICE* smartcard,
+                                              GetStatusChangeW_Call* call)
 {
-	LONG status;
-	UINT32 ndrPtr;
-	UINT32 index = 0;
-	call->rgReaderStates = NULL;
+	BYTE* pb;
+	UINT32 index;
+	char* szEventState;
+	char* szCurrentState;
+	LPSCARD_READERSTATEW readerState;
+	WINPR_UNUSED(smartcard);
 
-	status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext), &index);
-	if (status != SCARD_S_SUCCESS)
-		return status;
+	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
+		return;
 
-	if (Stream_GetRemainingLength(s) < 12)
+	WLog_DBG(TAG, "GetStatusChangeW_Call {");
+	pb = (BYTE*)&(call->hContext.pbContext);
+
+	if (call->hContext.cbContext > 4)
 	{
-		WLog_WARN(TAG, "GetStatusChangeA_Call is too short: %" PRIuz "",
-		          Stream_GetRemainingLength(s));
-		return STATUS_BUFFER_TOO_SMALL;
+		WLog_DBG(TAG,
+		         "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8
+		         "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], pb[4], pb[5], pb[6], pb[7], call->hContext.cbContext);
 	}
-
-	Stream_Read_UINT32(s, call->dwTimeOut); /* dwTimeOut (4 bytes) */
-	Stream_Read_UINT32(s, call->cReaders);  /* cReaders (4 bytes) */
-	if (!smartcard_ndr_pointer_read(s, &index, &ndrPtr))
-		return ERROR_INVALID_DATA;
-
-	if ((status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &(call->hContext))))
-		return status;
-
-	if (ndrPtr)
+	else
 	{
-		status = smartcard_unpack_reader_state_a(s, &call->rgReaderStates, call->cReaders, &index);
-		if (status != SCARD_S_SUCCESS)
-			return status;
+		WLog_DBG(TAG, "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], call->hContext.cbContext);
 	}
 
-	smartcard_trace_get_status_change_a_call(smartcard, call);
-	return SCARD_S_SUCCESS;
-}
-
-LONG smartcard_unpack_get_status_change_w_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                               GetStatusChangeW_Call* call)
-{
-	UINT32 ndrPtr;
-	LONG status;
-	UINT32 index = 0;
-
-	call->rgReaderStates = NULL;
-
-	status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext), &index);
-	if (status != SCARD_S_SUCCESS)
-		return status;
+	WLog_DBG(TAG, "dwTimeOut: 0x%08" PRIX32 " cReaders: %" PRIu32 "", call->dwTimeOut,
+	         call->cReaders);
 
-	if (Stream_GetRemainingLength(s) < 12)
+	for (index = 0; index < call->cReaders; index++)
 	{
-		WLog_WARN(TAG, "GetStatusChangeW_Call is too short: %" PRIuz "",
-		          Stream_GetRemainingLength(s));
-		return STATUS_BUFFER_TOO_SMALL;
+		char* szReaderA = NULL;
+		readerState = &call->rgReaderStates[index];
+		ConvertFromUnicode(CP_UTF8, 0, readerState->szReader, -1, &szReaderA, 0, NULL, NULL);
+		WLog_DBG(TAG, "\t[%" PRIu32 "]: szReader: %s cbAtr: %" PRIu32 "", index, szReaderA,
+		         readerState->cbAtr);
+		szCurrentState = SCardGetReaderStateString(readerState->dwCurrentState);
+		szEventState = SCardGetReaderStateString(readerState->dwEventState);
+		WLog_DBG(TAG, "\t[%" PRIu32 "]: dwCurrentState: %s (0x%08" PRIX32 ")", index,
+		         szCurrentState, readerState->dwCurrentState);
+		WLog_DBG(TAG, "\t[%" PRIu32 "]: dwEventState: %s (0x%08" PRIX32 ")", index, szEventState,
+		         readerState->dwEventState);
+		free(szCurrentState);
+		free(szEventState);
+		free(szReaderA);
 	}
 
-	Stream_Read_UINT32(s, call->dwTimeOut);      /* dwTimeOut (4 bytes) */
-	Stream_Read_UINT32(s, call->cReaders);       /* cReaders (4 bytes) */
-	if (!smartcard_ndr_pointer_read(s, &index, &ndrPtr))
-		return ERROR_INVALID_DATA;
+	WLog_DBG(TAG, "}");
+}
 
-	if ((status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &(call->hContext))))
-		return status;
+LONG smartcard_pack_get_status_change_return(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                             GetStatusChange_Return* ret)
+{
+	UINT32 index;
+	ReaderState_Return* rgReaderState;
+	WINPR_UNUSED(smartcard);
+	Stream_Write_UINT32(s, ret->cReaders); /* cReaders (4 bytes) */
+	Stream_Write_UINT32(s, 0x00020100);    /* rgReaderStatesNdrPtr (4 bytes) */
+	Stream_Write_UINT32(s, ret->cReaders); /* rgReaderStatesNdrCount (4 bytes) */
 
-	if (ndrPtr)
+	for (index = 0; index < ret->cReaders; index++)
 	{
-		status = smartcard_unpack_reader_state_w(s, &call->rgReaderStates, call->cReaders, &index);
-		if (status != SCARD_S_SUCCESS)
-			return status;
+		rgReaderState = &(ret->rgReaderStates[index]);
+		Stream_Write_UINT32(s, rgReaderState->dwCurrentState); /* dwCurrentState (4 bytes) */
+		Stream_Write_UINT32(s, rgReaderState->dwEventState);   /* dwEventState (4 bytes) */
+		Stream_Write_UINT32(s, rgReaderState->cbAtr);          /* cbAtr (4 bytes) */
+		Stream_Write(s, rgReaderState->rgbAtr, 32);            /* rgbAtr [0..32] (32 bytes) */
+		Stream_Zero(s, 4);                                     /* rgbAtr [32..36] (32 bytes) */
 	}
 
-	smartcard_trace_get_status_change_w_call(smartcard, call);
 	return SCARD_S_SUCCESS;
 }
 
-LONG smartcard_pack_get_status_change_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                             const GetStatusChange_Return* ret, BOOL unicode)
+void smartcard_trace_get_status_change_return(SMARTCARD_DEVICE* smartcard,
+                                              const GetStatusChange_Return* ret, BOOL unicode)
 {
-	UINT32 index = 0;
+	UINT32 index;
+	char* rgbAtr;
+	char* szEventState;
+	char* szCurrentState;
+	ReaderState_Return* rgReaderState;
+	WINPR_UNUSED(smartcard);
 
-	smartcard_trace_get_status_change_return(smartcard, ret, unicode);
-	if (ret->ReturnCode != SCARD_S_SUCCESS)
-		return ret->ReturnCode;
+	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
+		return;
 
-	if (!Stream_EnsureRemainingCapacity(s, 4))
-		return SCARD_E_NO_MEMORY;
+	WLog_DBG(TAG, "GetStatusChange%s_Return {", unicode ? "W" : "A");
+	WLog_DBG(TAG, "ReturnCode: %s (0x%08" PRIX32 ")", SCardGetErrorString(ret->ReturnCode),
+	         ret->ReturnCode);
+	WLog_DBG(TAG, "cReaders: %" PRIu32 "", ret->cReaders);
 
-	Stream_Write_UINT32(s, ret->cReaders); /* cReaders (4 bytes) */
-	if (!smartcard_ndr_pointer_write(s, &index, ret->cReaders))
-		return SCARD_E_NO_MEMORY;
-	return smartcard_ndr_write_state(s, ret->rgReaderStates, ret->cReaders, NDR_PTR_SIMPLE);
+	for (index = 0; index < ret->cReaders; index++)
+	{
+		rgReaderState = &(ret->rgReaderStates[index]);
+		szCurrentState = SCardGetReaderStateString(rgReaderState->dwCurrentState);
+		szEventState = SCardGetReaderStateString(rgReaderState->dwEventState);
+		rgbAtr = winpr_BinToHexString((BYTE*)&(rgReaderState->rgbAtr), rgReaderState->cbAtr, FALSE);
+		WLog_DBG(TAG, "\t[%" PRIu32 "]: dwCurrentState: %s (0x%08" PRIX32 ")", index,
+		         szCurrentState, rgReaderState->dwCurrentState);
+		WLog_DBG(TAG, "\t[%" PRIu32 "]: dwEventState: %s (0x%08" PRIX32 ")", index, szEventState,
+		         rgReaderState->dwEventState);
+		WLog_DBG(TAG, "\t[%" PRIu32 "]: cbAtr: %" PRIu32 " rgbAtr: %s", index, rgReaderState->cbAtr,
+		         rgbAtr);
+		free(szCurrentState);
+		free(szEventState);
+		free(rgbAtr);
+	}
+
+	WLog_DBG(TAG, "}");
 }
 
 LONG smartcard_unpack_state_call(SMARTCARD_DEVICE* smartcard, wStream* s, State_Call* call)
 {
 	LONG status;
-	UINT32 index = 0;
 
-	status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext), &index);
-	if (status != SCARD_S_SUCCESS)
+	if ((status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context failed with error %" PRId32 "", status);
 		return status;
+	}
 
-	status = smartcard_unpack_redir_scard_handle(smartcard, s, &(call->hCard), &index);
-	if (status != SCARD_S_SUCCESS)
+	if ((status = smartcard_unpack_redir_scard_handle(smartcard, s, &(call->hCard))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_handle failed with error %" PRId32 "", status);
 		return status;
+	}
 
 	if (Stream_GetRemainingLength(s) < 8)
 	{
@@ -2593,46 +1790,54 @@ LONG smartcard_unpack_state_call(SMARTCARD_DEVICE* smartcard, wStream* s, State_
 		return STATUS_BUFFER_TOO_SMALL;
 	}
 
-	Stream_Read_INT32(s, call->fpbAtrIsNULL); /* fpbAtrIsNULL (4 bytes) */
-	Stream_Read_UINT32(s, call->cbAtrLen);    /* cbAtrLen (4 bytes) */
+	Stream_Read_UINT32(s, call->fpbAtrIsNULL); /* fpbAtrIsNULL (4 bytes) */
+	Stream_Read_UINT32(s, call->cbAtrLen);     /* cbAtrLen (4 bytes) */
 
 	if ((status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &(call->hContext))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context_ref failed with error %" PRId32 "",
+		         status);
 		return status;
+	}
 
 	if ((status = smartcard_unpack_redir_scard_handle_ref(smartcard, s, &(call->hCard))))
-		return status;
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_handle_ref failed with error %" PRId32 "",
+		         status);
 
 	return status;
 }
 
-LONG smartcard_pack_state_return(SMARTCARD_DEVICE* smartcard, wStream* s, const State_Return* ret)
+LONG smartcard_pack_state_return(SMARTCARD_DEVICE* smartcard, wStream* s, State_Return* ret)
 {
-	DWORD index = 0;
-
-	smartcard_trace_state_return(smartcard, ret);
-	if (ret->ReturnCode != SCARD_S_SUCCESS)
-		return ret->ReturnCode;
-
+	LONG status;
 	Stream_Write_UINT32(s, ret->dwState);       /* dwState (4 bytes) */
 	Stream_Write_UINT32(s, ret->dwProtocol);    /* dwProtocol (4 bytes) */
 	Stream_Write_UINT32(s, ret->cbAtrLen);      /* cbAtrLen (4 bytes) */
-	if (!smartcard_ndr_pointer_write(s, &index, ret->cbAtrLen))
-		return SCARD_E_NO_MEMORY;
-	return smartcard_ndr_write(s, ret->rgAtr, ret->cbAtrLen, 1, NDR_PTR_SIMPLE);
+	Stream_Write_UINT32(s, 0x00020020);         /* rgAtrNdrPtr (4 bytes) */
+	Stream_Write_UINT32(s, ret->cbAtrLen);      /* rgAtrLength (4 bytes) */
+	Stream_Write(s, ret->rgAtr, ret->cbAtrLen); /* rgAtr */
+
+	if ((status = smartcard_pack_write_size_align(smartcard, s, ret->cbAtrLen, 4)))
+		WLog_ERR(TAG, "smartcard_pack_write_size_align failed with error %" PRId32 "", status);
+
+	return status;
 }
 
-LONG smartcard_unpack_status_call(SMARTCARD_DEVICE* smartcard, wStream* s, Status_Call* call,
-                                  BOOL unicode)
+LONG smartcard_unpack_status_call(SMARTCARD_DEVICE* smartcard, wStream* s, Status_Call* call)
 {
 	LONG status;
-	UINT32 index = 0;
-	status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext), &index);
-	if (status != SCARD_S_SUCCESS)
+
+	if ((status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context failed with error %" PRId32 "", status);
 		return status;
+	}
 
-	status = smartcard_unpack_redir_scard_handle(smartcard, s, &(call->hCard), &index);
-	if (status != SCARD_S_SUCCESS)
+	if ((status = smartcard_unpack_redir_scard_handle(smartcard, s, &(call->hCard))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_handle failed with error %" PRId32 "", status);
 		return status;
+	}
 
 	if (Stream_GetRemainingLength(s) < 12)
 	{
@@ -2640,60 +1845,183 @@ LONG smartcard_unpack_status_call(SMARTCARD_DEVICE* smartcard, wStream* s, Statu
 		return STATUS_BUFFER_TOO_SMALL;
 	}
 
-	Stream_Read_INT32(s, call->fmszReaderNamesIsNULL); /* fmszReaderNamesIsNULL (4 bytes) */
-	Stream_Read_UINT32(s, call->cchReaderLen);         /* cchReaderLen (4 bytes) */
-	Stream_Read_UINT32(s, call->cbAtrLen);             /* cbAtrLen (4 bytes) */
+	Stream_Read_UINT32(s, call->fmszReaderNamesIsNULL); /* fmszReaderNamesIsNULL (4 bytes) */
+	Stream_Read_UINT32(s, call->cchReaderLen);          /* cchReaderLen (4 bytes) */
+	Stream_Read_UINT32(s, call->cbAtrLen);              /* cbAtrLen (4 bytes) */
 
 	if ((status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &(call->hContext))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context_ref failed with error %" PRId32 "",
+		         status);
 		return status;
+	}
 
 	if ((status = smartcard_unpack_redir_scard_handle_ref(smartcard, s, &(call->hCard))))
-		return status;
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_handle_ref failed with error %" PRId32 "",
+		         status);
 
-	smartcard_trace_status_call(smartcard, call, unicode);
 	return status;
 }
 
-LONG smartcard_pack_status_return(SMARTCARD_DEVICE* smartcard, wStream* s, const Status_Return* ret,
-                                  BOOL unicode)
+void smartcard_trace_status_call(SMARTCARD_DEVICE* smartcard, const Status_Call* call, BOOL unicode)
 {
-	DWORD index = 0;
-	UINT32 size = unicode ? sizeof(WCHAR) : sizeof(CHAR);
-	size *= ret->cBytes;
+	BYTE* pb;
+	WINPR_UNUSED(smartcard);
 
-	smartcard_trace_status_return(smartcard, ret, unicode);
-	if (ret->ReturnCode != SCARD_S_SUCCESS)
-		return ret->ReturnCode;
+	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
+		return;
 
-	if (!Stream_EnsureRemainingCapacity(s, 4))
-		return SCARD_F_INTERNAL_ERROR;
+	WLog_DBG(TAG, "Status%s_Call {", unicode ? "W" : "A");
+	pb = (BYTE*)&(call->hContext.pbContext);
+
+	if (call->hContext.cbContext > 4)
+	{
+		WLog_DBG(TAG,
+		         "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8
+		         "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], pb[4], pb[5], pb[6], pb[7], call->hContext.cbContext);
+	}
+	else
+	{
+		WLog_DBG(TAG, "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], call->hContext.cbContext);
+	}
+
+	pb = (BYTE*)&(call->hCard.pbHandle);
+
+	if (call->hCard.cbHandle > 4)
+	{
+		WLog_DBG(TAG,
+		         "hCard: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8
+		         "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], pb[4], pb[5], pb[6], pb[7], call->hCard.cbHandle);
+	}
+	else
+	{
+		WLog_DBG(TAG, "hCard: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], call->hCard.cbHandle);
+	}
+
+	WLog_DBG(TAG,
+	         "fmszReaderNamesIsNULL: %" PRId32 " cchReaderLen: %" PRIu32 " cbAtrLen: %" PRIu32 "",
+	         call->fmszReaderNamesIsNULL, call->cchReaderLen, call->cbAtrLen);
+	WLog_DBG(TAG, "}");
+}
 
-	Stream_Write_UINT32(s, size); /* cBytes (4 bytes) */
-	if (!smartcard_ndr_pointer_write(s, &index, size))
-		return SCARD_E_NO_MEMORY;
+LONG smartcard_pack_status_return(SMARTCARD_DEVICE* smartcard, wStream* s, Status_Return* ret)
+{
+	LONG status;
 
-	if (!Stream_EnsureRemainingCapacity(s, 44))
+	if (!Stream_EnsureRemainingCapacity(s, ret->cBytes + 64))
+	{
+		WLog_ERR(TAG, "Stream_EnsureRemainingCapacity failed!");
 		return SCARD_F_INTERNAL_ERROR;
+	}
 
+	Stream_Write_UINT32(s, ret->cBytes);     /* cBytes (4 bytes) */
+	Stream_Write_UINT32(s, 0x00020010);      /* mszReaderNamesNdrPtr (4 bytes) */
 	Stream_Write_UINT32(s, ret->dwState);    /* dwState (4 bytes) */
 	Stream_Write_UINT32(s, ret->dwProtocol); /* dwProtocol (4 bytes) */
-	Stream_Write(s, ret->pbAtr, sizeof(ret->pbAtr)); /* pbAtr (32 bytes) */
+	Stream_Write(s, ret->pbAtr, 32);         /* pbAtr (32 bytes) */
 	Stream_Write_UINT32(s, ret->cbAtrLen);   /* cbAtrLen (4 bytes) */
-	return smartcard_ndr_write(s, ret->mszReaderNames, size, 1, NDR_PTR_SIMPLE);
+	Stream_Write_UINT32(s, ret->cBytes);     /* mszReaderNamesNdrLen (4 bytes) */
+
+	if (ret->mszReaderNames)
+		Stream_Write(s, ret->mszReaderNames, ret->cBytes);
+	else
+		Stream_Zero(s, ret->cBytes);
+
+	if ((status = smartcard_pack_write_size_align(smartcard, s, ret->cBytes, 4)))
+		WLog_ERR(TAG, "smartcard_pack_write_size_align failed with error %" PRId32 "", status);
+
+	return status;
+}
+
+void smartcard_trace_status_return(SMARTCARD_DEVICE* smartcard, const Status_Return* ret,
+                                   BOOL unicode)
+{
+	size_t index;
+	size_t length;
+	char* pbAtr = NULL;
+	char* mszReaderNamesA = NULL;
+	WINPR_UNUSED(smartcard);
+
+	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
+		return;
+
+	if (ret->mszReaderNames)
+	{
+		if (unicode)
+		{
+			length = ret->cBytes / 2;
+
+			if (ConvertFromUnicode(CP_UTF8, 0, (WCHAR*)ret->mszReaderNames, (int)length,
+			                       &mszReaderNamesA, 0, NULL, NULL) < 1)
+			{
+				WLog_ERR(TAG, "ConvertFromUnicode failed");
+				return;
+			}
+		}
+		else
+		{
+			length = (int)ret->cBytes;
+			mszReaderNamesA = (char*)malloc(length);
+
+			if (!mszReaderNamesA)
+			{
+				WLog_ERR(TAG, "malloc failed!");
+				return;
+			}
+
+			CopyMemory(mszReaderNamesA, ret->mszReaderNames, ret->cBytes);
+		}
+	}
+	else
+		length = 0;
+
+	if (length > 2)
+	{
+		for (index = 0; index < length - 2; index++)
+		{
+			if (mszReaderNamesA[index] == '\0')
+				mszReaderNamesA[index] = ',';
+		}
+	}
+
+	pbAtr = winpr_BinToHexString(ret->pbAtr, ret->cbAtrLen, FALSE);
+	WLog_DBG(TAG, "Status%s_Return {", unicode ? "W" : "A");
+	WLog_DBG(TAG, "ReturnCode: %s (0x%08" PRIX32 ")", SCardGetErrorString(ret->ReturnCode),
+	         ret->ReturnCode);
+	WLog_DBG(TAG, "dwState: %s (0x%08" PRIX32 ") dwProtocol: %s (0x%08" PRIX32 ")",
+	         SCardGetCardStateString(ret->dwState), ret->dwState,
+	         SCardGetProtocolString(ret->dwProtocol), ret->dwProtocol);
+
+	if (mszReaderNamesA)
+	{
+		WLog_DBG(TAG, "cBytes: %" PRIu32 " mszReaderNames: %s", ret->cBytes, mszReaderNamesA);
+	}
+
+	WLog_DBG(TAG, "cbAtrLen: %" PRIu32 " pbAtr: %s", ret->cbAtrLen, pbAtr);
+	WLog_DBG(TAG, "}");
+	free(mszReaderNamesA);
+	free(pbAtr);
 }
 
 LONG smartcard_unpack_get_attrib_call(SMARTCARD_DEVICE* smartcard, wStream* s, GetAttrib_Call* call)
 {
 	LONG status;
-	UINT32 index = 0;
 
-	status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext), &index);
-	if (status != SCARD_S_SUCCESS)
+	if ((status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context failed with error %" PRId32 "", status);
 		return status;
+	}
 
-	status = smartcard_unpack_redir_scard_handle(smartcard, s, &(call->hCard), &index);
-	if (status != SCARD_S_SUCCESS)
+	if ((status = smartcard_unpack_redir_scard_handle(smartcard, s, &(call->hCard))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_handle failed with error %" PRId32 "", status);
 		return status;
+	}
 
 	if (Stream_GetRemainingLength(s) < 12)
 	{
@@ -2701,53 +2029,141 @@ LONG smartcard_unpack_get_attrib_call(SMARTCARD_DEVICE* smartcard, wStream* s, G
 		return STATUS_BUFFER_TOO_SMALL;
 	}
 
-	Stream_Read_UINT32(s, call->dwAttrId);     /* dwAttrId (4 bytes) */
-	Stream_Read_INT32(s, call->fpbAttrIsNULL); /* fpbAttrIsNULL (4 bytes) */
-	Stream_Read_UINT32(s, call->cbAttrLen);    /* cbAttrLen (4 bytes) */
+	Stream_Read_UINT32(s, call->dwAttrId);      /* dwAttrId (4 bytes) */
+	Stream_Read_UINT32(s, call->fpbAttrIsNULL); /* fpbAttrIsNULL (4 bytes) */
+	Stream_Read_UINT32(s, call->cbAttrLen);     /* cbAttrLen (4 bytes) */
 
 	if ((status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &(call->hContext))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context_ref failed with error %" PRId32 "",
+		         status);
 		return status;
+	}
 
 	if ((status = smartcard_unpack_redir_scard_handle_ref(smartcard, s, &(call->hCard))))
-		return status;
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_handle_ref failed with error %" PRId32 "",
+		         status);
 
-	smartcard_trace_get_attrib_call(smartcard, call);
 	return status;
 }
 
+void smartcard_trace_get_attrib_call(SMARTCARD_DEVICE* smartcard, GetAttrib_Call* call)
+{
+	BYTE* pb;
+	WINPR_UNUSED(smartcard);
+
+	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
+		return;
+
+	WLog_DBG(TAG, "GetAttrib_Call {");
+	pb = (BYTE*)&(call->hContext.pbContext);
+
+	if (call->hContext.cbContext > 4)
+	{
+		WLog_DBG(TAG,
+		         "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8
+		         "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], pb[4], pb[5], pb[6], pb[7], call->hContext.cbContext);
+	}
+	else
+	{
+		WLog_DBG(TAG, "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], call->hContext.cbContext);
+	}
+
+	pb = (BYTE*)&(call->hCard.pbHandle);
+
+	if (call->hCard.cbHandle > 4)
+	{
+		WLog_DBG(TAG,
+		         "hCard: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8
+		         "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], pb[4], pb[5], pb[6], pb[7], call->hCard.cbHandle);
+	}
+	else
+	{
+		WLog_DBG(TAG, "hCard: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], call->hCard.cbHandle);
+	}
+
+	WLog_DBG(TAG,
+	         "dwAttrId: %s (0x%08" PRIX32 ") fpbAttrIsNULL: %" PRId32 " cbAttrLen: 0x%08" PRIX32 "",
+	         SCardGetAttributeString(call->dwAttrId), call->dwAttrId, call->fpbAttrIsNULL,
+	         call->cbAttrLen);
+	WLog_DBG(TAG, "}");
+}
+
 LONG smartcard_pack_get_attrib_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                      const GetAttrib_Return* ret, DWORD dwAttrId)
+                                      GetAttrib_Return* ret)
 {
-	DWORD index = 0;
-	smartcard_trace_get_attrib_return(smartcard, ret, dwAttrId);
-	if (ret->ReturnCode != SCARD_S_SUCCESS)
-		return ret->ReturnCode;
+	LONG status;
 
-	if (!Stream_EnsureRemainingCapacity(s, 4))
+	if (!Stream_EnsureRemainingCapacity(s, ret->cbAttrLen + 32))
+	{
+		WLog_ERR(TAG, "Stream_EnsureRemainingCapacity failed!");
 		return SCARD_F_INTERNAL_ERROR;
+	}
 
 	Stream_Write_UINT32(s, ret->cbAttrLen); /* cbAttrLen (4 bytes) */
-	if (!smartcard_ndr_pointer_write(s, &index, ret->cbAttrLen))
-		return SCARD_E_NO_MEMORY;
+	Stream_Write_UINT32(s, 0x00020080);     /* pbAttrNdrPtr (4 bytes) */
+	Stream_Write_UINT32(s, ret->cbAttrLen); /* pbAttrNdrCount (4 bytes) */
+
+	if (!ret->pbAttr)
+		Stream_Zero(s, ret->cbAttrLen); /* pbAttr */
+	else
+		Stream_Write(s, ret->pbAttr, ret->cbAttrLen); /* pbAttr */
 
-	return smartcard_ndr_write(s, ret->pbAttr, ret->cbAttrLen, 1, NDR_PTR_SIMPLE);
+	if ((status = smartcard_pack_write_size_align(smartcard, s, ret->cbAttrLen, 4)))
+		WLog_ERR(TAG, "smartcard_pack_write_size_align failed with error %" PRId32 "", status);
+
+	return status;
+}
+
+void smartcard_trace_get_attrib_return(SMARTCARD_DEVICE* smartcard, const GetAttrib_Return* ret,
+                                       DWORD dwAttrId)
+{
+	WINPR_UNUSED(smartcard);
+
+	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
+		return;
+
+	WLog_DBG(TAG, "GetAttrib_Return {");
+	WLog_DBG(TAG, "ReturnCode: %s (0x%08" PRIX32 ")", SCardGetErrorString(ret->ReturnCode),
+	         ret->ReturnCode);
+	WLog_DBG(TAG, "dwAttrId: %s (0x%08" PRIX32 ") cbAttrLen: 0x%08" PRIX32 "",
+	         SCardGetAttributeString(dwAttrId), dwAttrId, ret->cbAttrLen);
+
+	if (dwAttrId == SCARD_ATTR_VENDOR_NAME)
+	{
+		WLog_DBG(TAG, "pbAttr: %.*s", ret->cbAttrLen, (char*)ret->pbAttr);
+	}
+	else if (dwAttrId == SCARD_ATTR_CURRENT_PROTOCOL_TYPE)
+	{
+		UINT32 dwProtocolType = *((UINT32*)ret->pbAttr);
+		WLog_DBG(TAG, "dwProtocolType: %s (0x%08" PRIX32 ")",
+		         SCardGetProtocolString(dwProtocolType), dwProtocolType);
+	}
+
+	WLog_DBG(TAG, "}");
 }
 
 LONG smartcard_unpack_control_call(SMARTCARD_DEVICE* smartcard, wStream* s, Control_Call* call)
 {
 	LONG status;
-	UINT32 index = 0;
-	UINT32 pvInBufferNdrPtr;
-
+	UINT32 length;
 	call->pvInBuffer = NULL;
 
-	status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext), &index);
-	if (status != SCARD_S_SUCCESS)
+	if ((status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context failed with error %" PRId32 "", status);
 		return status;
+	}
 
-	status = smartcard_unpack_redir_scard_handle(smartcard, s, &(call->hCard), &index);
-	if (status != SCARD_S_SUCCESS)
+	if ((status = smartcard_unpack_redir_scard_handle(smartcard, s, &(call->hCard))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_handle failed with error %" PRId32 "", status);
 		return status;
+	}
 
 	if (Stream_GetRemainingLength(s) < 20)
 	{
@@ -2755,47 +2171,168 @@ LONG smartcard_unpack_control_call(SMARTCARD_DEVICE* smartcard, wStream* s, Cont
 		return STATUS_BUFFER_TOO_SMALL;
 	}
 
-	Stream_Read_UINT32(s, call->dwControlCode);     /* dwControlCode (4 bytes) */
-	Stream_Read_UINT32(s, call->cbInBufferSize);    /* cbInBufferSize (4 bytes) */
-	if (!smartcard_ndr_pointer_read(s, &index, &pvInBufferNdrPtr)) /* pvInBufferNdrPtr (4 bytes) */
-		return ERROR_INVALID_DATA;
-	Stream_Read_INT32(s, call->fpvOutBufferIsNULL); /* fpvOutBufferIsNULL (4 bytes) */
-	Stream_Read_UINT32(s, call->cbOutBufferSize);   /* cbOutBufferSize (4 bytes) */
+	Stream_Read_UINT32(s, call->dwControlCode);      /* dwControlCode (4 bytes) */
+	Stream_Read_UINT32(s, call->cbInBufferSize);     /* cbInBufferSize (4 bytes) */
+	Stream_Seek_UINT32(s);                           /* pvInBufferNdrPtr (4 bytes) */
+	Stream_Read_UINT32(s, call->fpvOutBufferIsNULL); /* fpvOutBufferIsNULL (4 bytes) */
+	Stream_Read_UINT32(s, call->cbOutBufferSize);    /* cbOutBufferSize (4 bytes) */
 
 	if ((status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &(call->hContext))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context_ref failed with error %" PRId32 "",
+		         status);
+		return status;
+	}
+
+	if ((status = smartcard_unpack_redir_scard_handle_ref(smartcard, s, &(call->hCard))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context_ref failed with error %" PRId32 "",
+		         status);
 		return status;
+	}
+
+	if (call->cbInBufferSize)
+	{
+		if (Stream_GetRemainingLength(s) < 4)
+		{
+			WLog_WARN(TAG, "Control_Call is too short: %" PRIuz "", Stream_GetRemainingLength(s));
+			return STATUS_BUFFER_TOO_SMALL;
+		}
+
+		Stream_Read_UINT32(s, length); /* Length (4 bytes) */
+
+		if (Stream_GetRemainingLength(s) < length)
+		{
+			WLog_WARN(TAG, "Control_Call is too short: %" PRIuz "", Stream_GetRemainingLength(s));
+			return STATUS_BUFFER_TOO_SMALL;
+		}
+
+		call->pvInBuffer = (BYTE*)malloc(length);
+
+		if (!call->pvInBuffer)
+		{
+			WLog_WARN(TAG, "Control_Call out of memory error (call->pvInBuffer)");
+			return STATUS_NO_MEMORY;
+		}
+
+		call->cbInBufferSize = length;
+		Stream_Read(s, call->pvInBuffer, length);
+	}
+
+	return SCARD_S_SUCCESS;
+}
+
+void smartcard_trace_control_call(SMARTCARD_DEVICE* smartcard, const Control_Call* call)
+{
+	BYTE* pb;
+	WINPR_UNUSED(smartcard);
+
+	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
+		return;
+
+	WLog_DBG(TAG, "Control_Call {");
+	pb = (BYTE*)&(call->hContext.pbContext);
+
+	if (call->hContext.cbContext > 4)
+	{
+		WLog_DBG(TAG,
+		         "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8
+		         "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], pb[4], pb[5], pb[6], pb[7], call->hContext.cbContext);
+	}
+	else
+	{
+		WLog_DBG(TAG, "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], call->hContext.cbContext);
+	}
+
+	pb = (BYTE*)&(call->hCard.pbHandle);
+
+	if (call->hCard.cbHandle > 4)
+	{
+		WLog_DBG(TAG,
+		         "hCard: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8
+		         "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], pb[4], pb[5], pb[6], pb[7], call->hCard.cbHandle);
+	}
+	else
+	{
+		WLog_DBG(TAG, "hCard: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], call->hCard.cbHandle);
+	}
+
+	WLog_DBG(TAG,
+	         "dwControlCode: 0x%08" PRIX32 " cbInBufferSize: %" PRIu32
+	         " fpvOutBufferIsNULL: %" PRId32 " cbOutBufferSize: %" PRIu32 "",
+	         call->dwControlCode, call->cbInBufferSize, call->fpvOutBufferIsNULL,
+	         call->cbOutBufferSize);
+
+	if (call->pvInBuffer)
+	{
+		char* szInBuffer = winpr_BinToHexString(call->pvInBuffer, call->cbInBufferSize, TRUE);
+		WLog_DBG(TAG, "pbInBuffer: %s", szInBuffer);
+		free(szInBuffer);
+	}
+	else
+	{
+		WLog_DBG(TAG, "pvInBuffer: null");
+	}
+
+	WLog_DBG(TAG, "}");
+}
+
+LONG smartcard_pack_control_return(SMARTCARD_DEVICE* smartcard, wStream* s, Control_Return* ret)
+{
+	LONG error;
+
+	if (!Stream_EnsureRemainingCapacity(s, ret->cbOutBufferSize + 32))
+	{
+		WLog_ERR(TAG, "Stream_EnsureRemainingCapacity failed!");
+		return SCARD_F_INTERNAL_ERROR;
+	}
 
-	if ((status = smartcard_unpack_redir_scard_handle_ref(smartcard, s, &(call->hCard))))
-		return status;
+	Stream_Write_UINT32(s, ret->cbOutBufferSize); /* cbOutBufferSize (4 bytes) */
+	Stream_Write_UINT32(s, 0x00020040);           /* pvOutBufferPointer (4 bytes) */
+	Stream_Write_UINT32(s, ret->cbOutBufferSize); /* pvOutBufferLength (4 bytes) */
 
-	if (pvInBufferNdrPtr)
+	if (ret->cbOutBufferSize > 0)
 	{
-		status = smartcard_ndr_read(s, &call->pvInBuffer, call->cbInBufferSize, 1, NDR_PTR_SIMPLE);
-		if (status != SCARD_S_SUCCESS)
-			return status;
+		Stream_Write(s, ret->pvOutBuffer, ret->cbOutBufferSize); /* pvOutBuffer */
+
+		if ((error = smartcard_pack_write_size_align(smartcard, s, ret->cbOutBufferSize, 4)))
+		{
+			WLog_ERR(TAG, "smartcard_pack_write_size_align failed with error %" PRId32 "", error);
+			return error;
+		}
 	}
 
-	smartcard_trace_control_call(smartcard, call);
 	return SCARD_S_SUCCESS;
 }
 
-LONG smartcard_pack_control_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                   const Control_Return* ret)
+void smartcard_trace_control_return(SMARTCARD_DEVICE* smartcard, const Control_Return* ret)
 {
-	DWORD index = 0;
+	WINPR_UNUSED(smartcard);
 
-	smartcard_trace_control_return(smartcard, ret);
-	if (ret->ReturnCode != SCARD_S_SUCCESS)
-		return ret->ReturnCode;
+	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
+		return;
 
-	if (!Stream_EnsureRemainingCapacity(s, 4))
-		return SCARD_F_INTERNAL_ERROR;
+	WLog_DBG(TAG, "Control_Return {");
+	WLog_DBG(TAG, "ReturnCode: %s (0x%08" PRIX32 ")", SCardGetErrorString(ret->ReturnCode),
+	         ret->ReturnCode);
+	WLog_DBG(TAG, "cbOutBufferSize: %" PRIu32 "", ret->cbOutBufferSize);
 
-	Stream_Write_UINT32(s, ret->cbOutBufferSize); /* cbOutBufferSize (4 bytes) */
-	if (!smartcard_ndr_pointer_write(s, &index, ret->cbOutBufferSize))
-		return SCARD_E_NO_MEMORY;
+	if (ret->pvOutBuffer)
+	{
+		char* szOutBuffer = winpr_BinToHexString(ret->pvOutBuffer, ret->cbOutBufferSize, TRUE);
+		WLog_DBG(TAG, "pvOutBuffer: %s", szOutBuffer);
+		free(szOutBuffer);
+	}
+	else
+	{
+		WLog_DBG(TAG, "pvOutBuffer: null");
+	}
 
-	return smartcard_ndr_write(s, ret->pvOutBuffer, ret->cbOutBufferSize, 1, NDR_PTR_SIMPLE);
+	WLog_DBG(TAG, "}");
 }
 
 LONG smartcard_unpack_transmit_call(SMARTCARD_DEVICE* smartcard, wStream* s, Transmit_Call* call)
@@ -2808,18 +2345,21 @@ LONG smartcard_unpack_transmit_call(SMARTCARD_DEVICE* smartcard, wStream* s, Tra
 	UINT32 pioRecvPciNdrPtr;
 	SCardIO_Request ioSendPci;
 	SCardIO_Request ioRecvPci;
-	UINT32 index = 0;
 	call->pioSendPci = NULL;
 	call->pioRecvPci = NULL;
 	call->pbSendBuffer = NULL;
 
-	status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext), &index);
-	if (status != SCARD_S_SUCCESS)
+	if ((status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context failed with error %" PRId32 "", status);
 		return status;
+	}
 
-	status = smartcard_unpack_redir_scard_handle(smartcard, s, &(call->hCard), &index);
-	if (status != SCARD_S_SUCCESS)
+	if ((status = smartcard_unpack_redir_scard_handle(smartcard, s, &(call->hCard))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_handle failed with error %" PRId32 "", status);
 		return status;
+	}
 
 	if (Stream_GetRemainingLength(s) < 32)
 	{
@@ -2828,22 +2368,14 @@ LONG smartcard_unpack_transmit_call(SMARTCARD_DEVICE* smartcard, wStream* s, Tra
 		return STATUS_BUFFER_TOO_SMALL;
 	}
 
-	Stream_Read_UINT32(s, ioSendPci.dwProtocol);     /* dwProtocol (4 bytes) */
-	Stream_Read_UINT32(s, ioSendPci.cbExtraBytes);   /* cbExtraBytes (4 bytes) */
-	if (!smartcard_ndr_pointer_read(s, &index,
-	                                &pbExtraBytesNdrPtr)) /* pbExtraBytesNdrPtr (4 bytes) */
-		return ERROR_INVALID_DATA;
-
-	Stream_Read_UINT32(s, call->cbSendLength);       /* cbSendLength (4 bytes) */
-	if (!smartcard_ndr_pointer_read(s, &index,
-	                                &pbSendBufferNdrPtr)) /* pbSendBufferNdrPtr (4 bytes) */
-		return ERROR_INVALID_DATA;
-
-	if (!smartcard_ndr_pointer_read(s, &index, &pioRecvPciNdrPtr)) /* pioRecvPciNdrPtr (4 bytes) */
-		return ERROR_INVALID_DATA;
-
-	Stream_Read_INT32(s, call->fpbRecvBufferIsNULL); /* fpbRecvBufferIsNULL (4 bytes) */
-	Stream_Read_UINT32(s, call->cbRecvLength);       /* cbRecvLength (4 bytes) */
+	Stream_Read_UINT32(s, ioSendPci.dwProtocol);      /* dwProtocol (4 bytes) */
+	Stream_Read_UINT32(s, ioSendPci.cbExtraBytes);    /* cbExtraBytes (4 bytes) */
+	Stream_Read_UINT32(s, pbExtraBytesNdrPtr);        /* pbExtraBytesNdrPtr (4 bytes) */
+	Stream_Read_UINT32(s, call->cbSendLength);        /* cbSendLength (4 bytes) */
+	Stream_Read_UINT32(s, pbSendBufferNdrPtr);        /* pbSendBufferNdrPtr (4 bytes) */
+	Stream_Read_UINT32(s, pioRecvPciNdrPtr);          /* pioRecvPciNdrPtr (4 bytes) */
+	Stream_Read_UINT32(s, call->fpbRecvBufferIsNULL); /* fpbRecvBufferIsNULL (4 bytes) */
+	Stream_Read_UINT32(s, call->cbRecvLength);        /* cbRecvLength (4 bytes) */
 
 	if (ioSendPci.cbExtraBytes > 1024)
 	{
@@ -2861,10 +2393,18 @@ LONG smartcard_unpack_transmit_call(SMARTCARD_DEVICE* smartcard, wStream* s, Tra
 	}
 
 	if ((status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &(call->hContext))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context_ref failed with error %" PRId32 "",
+		         status);
 		return status;
+	}
 
 	if ((status = smartcard_unpack_redir_scard_handle_ref(smartcard, s, &(call->hCard))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_handle_ref failed with error %" PRId32 "",
+		         status);
 		return status;
+	}
 
 	if (ioSendPci.cbExtraBytes && !pbExtraBytesNdrPtr)
 	{
@@ -2875,7 +2415,6 @@ LONG smartcard_unpack_transmit_call(SMARTCARD_DEVICE* smartcard, wStream* s, Tra
 
 	if (pbExtraBytesNdrPtr)
 	{
-		// TODO: Use unified pointer reading
 		if (Stream_GetRemainingLength(s) < 4)
 		{
 			WLog_WARN(TAG, "Transmit_Call is too short: %" PRIuz " (ioSendPci.pbExtraBytes)",
@@ -2926,9 +2465,42 @@ LONG smartcard_unpack_transmit_call(SMARTCARD_DEVICE* smartcard, wStream* s, Tra
 
 	if (pbSendBufferNdrPtr)
 	{
-		status = smartcard_ndr_read(s, &call->pbSendBuffer, call->cbSendLength, 1, NDR_PTR_SIMPLE);
-		if (status != SCARD_S_SUCCESS)
-			return status;
+		if (Stream_GetRemainingLength(s) < 4)
+		{
+			WLog_WARN(TAG, "Transmit_Call is too short: %" PRIuz "", Stream_GetRemainingLength(s));
+			return STATUS_BUFFER_TOO_SMALL;
+		}
+
+		Stream_Read_UINT32(s, length); /* Length (4 bytes) */
+
+		if (length != call->cbSendLength)
+		{
+			WLog_WARN(TAG,
+			          "Transmit_Call unexpected length: Actual: %" PRIu32 ", Expected: %" PRIu32
+			          " (cbSendLength)",
+			          length, call->cbSendLength);
+			return STATUS_INVALID_PARAMETER;
+		}
+
+		if (Stream_GetRemainingLength(s) < call->cbSendLength)
+		{
+			WLog_WARN(TAG,
+			          "Transmit_Call is too short: Actual: %" PRIuz ", Expected: %" PRIu32
+			          " (cbSendLength)",
+			          Stream_GetRemainingLength(s), call->cbSendLength);
+			return STATUS_BUFFER_TOO_SMALL;
+		}
+
+		call->pbSendBuffer = (BYTE*)malloc(call->cbSendLength);
+
+		if (!call->pbSendBuffer)
+		{
+			WLog_WARN(TAG, "Transmit_Call out of memory error (pbSendBuffer)");
+			return STATUS_NO_MEMORY;
+		}
+
+		Stream_Read(s, call->pbSendBuffer, call->cbSendLength);
+		smartcard_unpack_read_size_align(smartcard, s, call->cbSendLength, 4);
 	}
 
 	if (pioRecvPciNdrPtr)
@@ -2942,9 +2514,7 @@ LONG smartcard_unpack_transmit_call(SMARTCARD_DEVICE* smartcard, wStream* s, Tra
 
 		Stream_Read_UINT32(s, ioRecvPci.dwProtocol);   /* dwProtocol (4 bytes) */
 		Stream_Read_UINT32(s, ioRecvPci.cbExtraBytes); /* cbExtraBytes (4 bytes) */
-		if (!smartcard_ndr_pointer_read(s, &index,
-		                                &pbExtraBytesNdrPtr)) /* pbExtraBytesNdrPtr (4 bytes) */
-			return ERROR_INVALID_DATA;
+		Stream_Read_UINT32(s, pbExtraBytesNdrPtr);     /* pbExtraBytesNdrPtr (4 bytes) */
 
 		if (ioRecvPci.cbExtraBytes && !pbExtraBytesNdrPtr)
 		{
@@ -2956,7 +2526,6 @@ LONG smartcard_unpack_transmit_call(SMARTCARD_DEVICE* smartcard, wStream* s, Tra
 
 		if (pbExtraBytesNdrPtr)
 		{
-			// TODO: Unify ndr pointer reading
 			if (Stream_GetRemainingLength(s) < 4)
 			{
 				WLog_WARN(TAG, "Transmit_Call is too short: %" PRIuz " (ioRecvPci.pbExtraBytes)",
@@ -3025,586 +2594,254 @@ LONG smartcard_unpack_transmit_call(SMARTCARD_DEVICE* smartcard, wStream* s, Tra
 		}
 	}
 
-	smartcard_trace_transmit_call(smartcard, call);
-	return SCARD_S_SUCCESS;
-}
-
-LONG smartcard_pack_transmit_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                    const Transmit_Return* ret)
-{
-	DWORD index = 0;
-	LONG error;
-	UINT32 cbRecvLength = ret->cbRecvLength;
-	UINT32 cbRecvPci = ret->pioRecvPci ? ret->pioRecvPci->cbPciLength : 0;
-
-	smartcard_trace_transmit_return(smartcard, ret);
-	if (ret->ReturnCode != SCARD_S_SUCCESS)
-		return ret->ReturnCode;
-
-	if (!ret->pbRecvBuffer)
-		cbRecvLength = 0;
-
-	if (!smartcard_ndr_pointer_write(s, &index, cbRecvPci))
-		return SCARD_E_NO_MEMORY;
-	if (!Stream_EnsureRemainingCapacity(s, 4))
-		return SCARD_E_NO_MEMORY;
-	Stream_Write_UINT32(s, cbRecvLength); /* cbRecvLength (4 bytes) */
-	if (!smartcard_ndr_pointer_write(s, &index, cbRecvLength))
-		return SCARD_E_NO_MEMORY;
-
-	if (ret->pioRecvPci)
-	{
-		UINT32 cbExtraBytes = (UINT32)(ret->pioRecvPci->cbPciLength - sizeof(SCARD_IO_REQUEST));
-		BYTE* pbExtraBytes = &((BYTE*)ret->pioRecvPci)[sizeof(SCARD_IO_REQUEST)];
-
-		if (!Stream_EnsureRemainingCapacity(s, cbExtraBytes + 16))
-		{
-			WLog_ERR(TAG, "Stream_EnsureRemainingCapacity failed!");
-			return SCARD_F_INTERNAL_ERROR;
-		}
-
-		Stream_Write_UINT32(s, ret->pioRecvPci->dwProtocol); /* dwProtocol (4 bytes) */
-		Stream_Write_UINT32(s, cbExtraBytes);                /* cbExtraBytes (4 bytes) */
-		if (!smartcard_ndr_pointer_write(s, &index, cbExtraBytes))
-			return SCARD_E_NO_MEMORY;
-		error = smartcard_ndr_write(s, pbExtraBytes, cbExtraBytes, 1, NDR_PTR_SIMPLE);
-		if (error)
-			return error;
-	}
-
-	return smartcard_ndr_write(s, ret->pbRecvBuffer, ret->cbRecvLength, 1, NDR_PTR_SIMPLE);
-}
-
-LONG smartcard_unpack_locate_cards_by_atr_a_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                                 LocateCardsByATRA_Call* call)
-{
-	LONG status;
-	UINT32 rgReaderStatesNdrPtr;
-	UINT32 rgAtrMasksNdrPtr;
-	UINT32 index = 0;
-	call->rgReaderStates = NULL;
-
-	status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext), &index);
-	if (status != SCARD_S_SUCCESS)
-		return status;
-
-	if (Stream_GetRemainingLength(s) < 16)
-	{
-		WLog_WARN(TAG, "LocateCardsByATRA_Call is too short: %" PRIuz "",
-		          Stream_GetRemainingLength(s));
-		return STATUS_BUFFER_TOO_SMALL;
-	}
-
-	Stream_Read_UINT32(s, call->cAtrs);
-	if (!smartcard_ndr_pointer_read(s, &index, &rgAtrMasksNdrPtr))
-		return ERROR_INVALID_DATA;
-	Stream_Read_UINT32(s, call->cReaders); /* cReaders (4 bytes) */
-	if (!smartcard_ndr_pointer_read(s, &index, &rgReaderStatesNdrPtr))
-		return ERROR_INVALID_DATA;
-
-	if ((status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &(call->hContext))))
-		return status;
-
-	if ((rgAtrMasksNdrPtr && !call->cAtrs) || (!rgAtrMasksNdrPtr && call->cAtrs))
-	{
-		WLog_WARN(TAG,
-		          "LocateCardsByATRA_Call rgAtrMasksNdrPtr (0x%08" PRIX32
-		          ") and cAtrs (0x%08" PRIX32 ") inconsistency",
-		          rgAtrMasksNdrPtr, call->cAtrs);
-		return STATUS_INVALID_PARAMETER;
-	}
-
-	if (rgAtrMasksNdrPtr)
-	{
-		status = smartcard_ndr_read_atrmask(s, &call->rgAtrMasks, call->cAtrs, NDR_PTR_SIMPLE);
-		if (status != SCARD_S_SUCCESS)
-			return status;
-	}
-
-	if (rgReaderStatesNdrPtr)
-	{
-		status = smartcard_unpack_reader_state_a(s, &call->rgReaderStates, call->cReaders, &index);
-		if (status != SCARD_S_SUCCESS)
-			return status;
-	}
-
-	smartcard_trace_locate_cards_by_atr_a_call(smartcard, call);
-	return SCARD_S_SUCCESS;
-}
-
-LONG smartcard_unpack_context_and_two_strings_a_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                                     ContextAndTwoStringA_Call* call)
-{
-	LONG status;
-	UINT32 sz1NdrPtr, sz2NdrPtr;
-	UINT32 index = 0;
-
-	status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext), &index);
-	if (status != SCARD_S_SUCCESS)
-		return status;
-
-	if (!smartcard_ndr_pointer_read(s, &index, &sz1NdrPtr))
-		return ERROR_INVALID_DATA;
-	if (!smartcard_ndr_pointer_read(s, &index, &sz2NdrPtr))
-		return ERROR_INVALID_DATA;
-
-	status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &call->hContext);
-	if (status != SCARD_S_SUCCESS)
-		return status;
-
-	if (sz1NdrPtr)
-	{
-		status = smartcard_ndr_read_a(s, &call->sz1, NDR_PTR_FULL);
-		if (status != SCARD_S_SUCCESS)
-			return status;
-	}
-	if (sz2NdrPtr)
-	{
-		status = smartcard_ndr_read_a(s, &call->sz2, NDR_PTR_FULL);
-		if (status != SCARD_S_SUCCESS)
-			return status;
-	}
-	smartcard_trace_context_and_two_strings_a_call(smartcard, call);
-	return SCARD_S_SUCCESS;
-}
-
-LONG smartcard_unpack_context_and_two_strings_w_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                                     ContextAndTwoStringW_Call* call)
-{
-	LONG status;
-	UINT32 sz1NdrPtr, sz2NdrPtr;
-	UINT32 index = 0;
-	status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext), &index);
-	if (status != SCARD_S_SUCCESS)
-		return status;
-
-	if (!smartcard_ndr_pointer_read(s, &index, &sz1NdrPtr))
-		return ERROR_INVALID_DATA;
-	if (!smartcard_ndr_pointer_read(s, &index, &sz2NdrPtr))
-		return ERROR_INVALID_DATA;
-
-	status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &call->hContext);
-	if (status != SCARD_S_SUCCESS)
-		return status;
-
-	if (sz1NdrPtr)
-	{
-		status = smartcard_ndr_read_w(s, &call->sz1, NDR_PTR_FULL);
-		if (status != SCARD_S_SUCCESS)
-			return status;
-	}
-	if (sz2NdrPtr)
-	{
-		status = smartcard_ndr_read_w(s, &call->sz2, NDR_PTR_FULL);
-		if (status != SCARD_S_SUCCESS)
-			return status;
-	}
-	smartcard_trace_context_and_two_strings_w_call(smartcard, call);
-	return SCARD_S_SUCCESS;
-}
-
-LONG smartcard_unpack_locate_cards_a_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                          LocateCardsA_Call* call)
-{
-	LONG status;
-	UINT32 sz1NdrPtr, sz2NdrPtr;
-	UINT32 index = 0;
-	status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext), &index);
-	if (status != SCARD_S_SUCCESS)
-		return status;
-
-	if (Stream_GetRemainingLength(s) < 16)
-	{
-		WLog_WARN(TAG, "%s is too short: %" PRIuz "", __FUNCTION__, Stream_GetRemainingLength(s));
-		return STATUS_BUFFER_TOO_SMALL;
-	}
-	Stream_Read_UINT32(s, call->cBytes);
-	if (!smartcard_ndr_pointer_read(s, &index, &sz1NdrPtr))
-		return ERROR_INVALID_DATA;
-
-	Stream_Read_UINT32(s, call->cReaders);
-	if (!smartcard_ndr_pointer_read(s, &index, &sz2NdrPtr))
-		return ERROR_INVALID_DATA;
-
-	if (sz1NdrPtr)
-	{
-		status =
-		    smartcard_ndr_read_fixed_string_a(s, &call->mszCards, call->cBytes, NDR_PTR_SIMPLE);
-		if (status != SCARD_S_SUCCESS)
-			return status;
-	}
-	if (sz2NdrPtr)
-	{
-		status = smartcard_unpack_reader_state_a(s, &call->rgReaderStates, call->cReaders, &index);
-		if (status != SCARD_S_SUCCESS)
-			return status;
-	}
-	smartcard_trace_locate_cards_a_call(smartcard, call);
 	return SCARD_S_SUCCESS;
 }
 
-LONG smartcard_unpack_locate_cards_w_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                          LocateCardsW_Call* call)
+void smartcard_trace_transmit_call(SMARTCARD_DEVICE* smartcard, const Transmit_Call* call)
 {
-	LONG status;
-	UINT32 sz1NdrPtr, sz2NdrPtr;
-	UINT32 index = 0;
-
-	status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext), &index);
-	if (status != SCARD_S_SUCCESS)
-		return status;
+	BYTE* pb;
+	UINT32 cbExtraBytes;
+	BYTE* pbExtraBytes;
+	WINPR_UNUSED(smartcard);
 
-	if (Stream_GetRemainingLength(s) < 16)
-	{
-		WLog_WARN(TAG, "%s is too short: %" PRIuz "", __FUNCTION__, Stream_GetRemainingLength(s));
-		return STATUS_BUFFER_TOO_SMALL;
-	}
-	Stream_Read_UINT32(s, call->cBytes);
-	if (!smartcard_ndr_pointer_read(s, &index, &sz1NdrPtr))
-		return ERROR_INVALID_DATA;
+	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
+		return;
 
-	Stream_Read_UINT32(s, call->cReaders);
-	if (!smartcard_ndr_pointer_read(s, &index, &sz2NdrPtr))
-		return ERROR_INVALID_DATA;
+	WLog_DBG(TAG, "Transmit_Call {");
+	pb = (BYTE*)&(call->hContext.pbContext);
 
-	if (sz1NdrPtr)
-	{
-		status =
-		    smartcard_ndr_read_fixed_string_w(s, &call->mszCards, call->cBytes, NDR_PTR_SIMPLE);
-		if (status != SCARD_S_SUCCESS)
-			return status;
-	}
-	if (sz2NdrPtr)
+	if (call->hContext.cbContext > 4)
 	{
-		status = smartcard_unpack_reader_state_w(s, &call->rgReaderStates, call->cReaders, &index);
-		if (status != SCARD_S_SUCCESS)
-			return status;
+		WLog_DBG(TAG,
+		         "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8
+		         "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], pb[4], pb[5], pb[6], pb[7], call->hContext.cbContext);
 	}
-	smartcard_trace_locate_cards_w_call(smartcard, call);
-	return SCARD_S_SUCCESS;
-}
-
-LONG smartcard_unpack_set_attrib_call(SMARTCARD_DEVICE* smartcard, wStream* s, SetAttrib_Call* call)
-{
-	LONG status;
-	UINT32 index = 0;
-	UINT32 ndrPtr;
-
-	status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext), &index);
-	if (status != SCARD_S_SUCCESS)
-		return status;
-	status = smartcard_unpack_redir_scard_handle(smartcard, s, &(call->hCard), &index);
-	if (status != SCARD_S_SUCCESS)
-		return status;
-
-	if (Stream_GetRemainingLength(s) < 12)
-		return STATUS_BUFFER_TOO_SMALL;
-	Stream_Read_UINT32(s, call->dwAttrId);
-	Stream_Read_UINT32(s, call->cbAttrLen);
-
-	if ((status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &(call->hContext))))
-		return status;
-
-	if ((status = smartcard_unpack_redir_scard_handle_ref(smartcard, s, &(call->hCard))))
-		return status;
-
-	if (!smartcard_ndr_pointer_read(s, &index, &ndrPtr))
-		return ERROR_INVALID_DATA;
-
-	if (ndrPtr)
+	else
 	{
-		// TODO: call->cbAttrLen was larger than the pointer value.
-		// TODO: Maybe need to refine the checks?
-		status = smartcard_ndr_read(s, &call->pbAttr, 0, 1, NDR_PTR_SIMPLE);
-		if (status != SCARD_S_SUCCESS)
-			return status;
+		WLog_DBG(TAG, "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], call->hContext.cbContext);
 	}
-	smartcard_trace_set_attrib_call(smartcard, call);
-	return SCARD_S_SUCCESS;
-}
-
-LONG smartcard_unpack_locate_cards_by_atr_w_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                                 LocateCardsByATRW_Call* call)
-{
-	LONG status;
-	UINT32 rgReaderStatesNdrPtr;
-	UINT32 rgAtrMasksNdrPtr;
-	UINT32 index = 0;
-	call->rgReaderStates = NULL;
 
-	status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext), &index);
-	if (status != SCARD_S_SUCCESS)
-		return status;
+	pb = (BYTE*)&(call->hCard.pbHandle);
 
-	if (Stream_GetRemainingLength(s) < 16)
+	if (call->hCard.cbHandle > 4)
 	{
-		WLog_WARN(TAG, "LocateCardsByATRW_Call is too short: %" PRIuz "",
-		          Stream_GetRemainingLength(s));
-		return STATUS_BUFFER_TOO_SMALL;
+		WLog_DBG(TAG,
+		         "hCard: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8
+		         "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], pb[4], pb[5], pb[6], pb[7], call->hCard.cbHandle);
 	}
-
-	Stream_Read_UINT32(s, call->cAtrs);
-	if (!smartcard_ndr_pointer_read(s, &index, &rgAtrMasksNdrPtr))
-		return ERROR_INVALID_DATA;
-
-	Stream_Read_UINT32(s, call->cReaders);       /* cReaders (4 bytes) */
-	if (!smartcard_ndr_pointer_read(s, &index, &rgReaderStatesNdrPtr))
-		return ERROR_INVALID_DATA;
-
-	if ((status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &(call->hContext))))
-		return status;
-
-	if ((rgAtrMasksNdrPtr && !call->cAtrs) || (!rgAtrMasksNdrPtr && call->cAtrs))
+	else
 	{
-		WLog_WARN(TAG,
-		          "LocateCardsByATRW_Call rgAtrMasksNdrPtr (0x%08" PRIX32
-		          ") and cAtrs (0x%08" PRIX32 ") inconsistency",
-		          rgAtrMasksNdrPtr, call->cAtrs);
-		return STATUS_INVALID_PARAMETER;
+		WLog_DBG(TAG, "hCard: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], call->hCard.cbHandle);
 	}
 
-	if (rgAtrMasksNdrPtr)
+	if (call->pioSendPci)
 	{
-		status = smartcard_ndr_read_atrmask(s, &call->rgAtrMasks, call->cAtrs, NDR_PTR_SIMPLE);
-		if (status != SCARD_S_SUCCESS)
-			return status;
-	}
+		cbExtraBytes = (UINT32)(call->pioSendPci->cbPciLength - sizeof(SCARD_IO_REQUEST));
+		pbExtraBytes = &((BYTE*)call->pioSendPci)[sizeof(SCARD_IO_REQUEST)];
+		WLog_DBG(TAG, "pioSendPci: dwProtocol: %" PRIu32 " cbExtraBytes: %" PRIu32 "",
+		         call->pioSendPci->dwProtocol, cbExtraBytes);
 
-	if (rgReaderStatesNdrPtr)
-	{
-		status = smartcard_unpack_reader_state_w(s, &call->rgReaderStates, call->cReaders, &index);
-		if (status != SCARD_S_SUCCESS)
-			return status;
+		if (cbExtraBytes)
+		{
+			char* szExtraBytes = winpr_BinToHexString(pbExtraBytes, cbExtraBytes, TRUE);
+			WLog_DBG(TAG, "pbExtraBytes: %s", szExtraBytes);
+			free(szExtraBytes);
+		}
 	}
-
-	smartcard_trace_locate_cards_by_atr_w_call(smartcard, call);
-	return SCARD_S_SUCCESS;
-}
-
-LONG smartcard_unpack_read_cache_a_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                        ReadCacheA_Call* call)
-{
-	LONG status;
-	UINT32 mszNdrPtr;
-	UINT32 contextNdrPtr;
-	UINT32 index = 0;
-
-	if (!smartcard_ndr_pointer_read(s, &index, &mszNdrPtr))
-		return ERROR_INVALID_DATA;
-
-	status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->Common.hContext), &index);
-	if (status != SCARD_S_SUCCESS)
-		return status;
-
-	if (!smartcard_ndr_pointer_read(s, &index, &contextNdrPtr))
-		return ERROR_INVALID_DATA;
-
-	if (Stream_GetRemainingLength(s) < 12)
-		return STATUS_BUFFER_TOO_SMALL;
-	Stream_Read_UINT32(s, call->Common.FreshnessCounter);
-	Stream_Read_INT32(s, call->Common.fPbDataIsNULL);
-	Stream_Read_UINT32(s, call->Common.cbDataLen);
-
-	call->szLookupName = NULL;
-	if (mszNdrPtr)
+	else
 	{
-		status = smartcard_ndr_read_a(s, &call->szLookupName, NDR_PTR_FULL);
-		if (status != SCARD_S_SUCCESS)
-			return status;
+		WLog_DBG(TAG, "pioSendPci: null");
 	}
 
-	status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &call->Common.hContext);
-	if (status != SCARD_S_SUCCESS)
-		return status;
+	WLog_DBG(TAG, "cbSendLength: %" PRIu32 "", call->cbSendLength);
 
-	if (contextNdrPtr)
+	if (call->pbSendBuffer)
 	{
-		status = smartcard_ndr_read_u(s, &call->Common.CardIdentifier);
-		if (status != SCARD_S_SUCCESS)
-			return status;
+		char* szSendBuffer = winpr_BinToHexString(call->pbSendBuffer, call->cbSendLength, TRUE);
+		WLog_DBG(TAG, "pbSendBuffer: %s", szSendBuffer);
+		free(szSendBuffer);
 	}
-	smartcard_trace_read_cache_a_call(smartcard, call);
-	return SCARD_S_SUCCESS;
-}
-
-LONG smartcard_unpack_read_cache_w_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                        ReadCacheW_Call* call)
-{
-	LONG status;
-	UINT32 mszNdrPtr;
-	UINT32 contextNdrPtr;
-	UINT32 index = 0;
-
-	if (!smartcard_ndr_pointer_read(s, &index, &mszNdrPtr))
-		return ERROR_INVALID_DATA;
-
-	status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->Common.hContext), &index);
-	if (status != SCARD_S_SUCCESS)
-		return status;
-
-	if (!smartcard_ndr_pointer_read(s, &index, &contextNdrPtr))
-		return ERROR_INVALID_DATA;
-
-	if (Stream_GetRemainingLength(s) < 12)
-		return STATUS_BUFFER_TOO_SMALL;
-	Stream_Read_UINT32(s, call->Common.FreshnessCounter);
-	Stream_Read_INT32(s, call->Common.fPbDataIsNULL);
-	Stream_Read_UINT32(s, call->Common.cbDataLen);
-
-	call->szLookupName = NULL;
-	if (mszNdrPtr)
+	else
 	{
-		status = smartcard_ndr_read_w(s, &call->szLookupName, NDR_PTR_FULL);
-		if (status != SCARD_S_SUCCESS)
-			return status;
+		WLog_DBG(TAG, "pbSendBuffer: null");
 	}
 
-	status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &call->Common.hContext);
-	if (status != SCARD_S_SUCCESS)
-		return status;
+	if (call->pioRecvPci)
+	{
+		cbExtraBytes = (UINT32)(call->pioRecvPci->cbPciLength - sizeof(SCARD_IO_REQUEST));
+		pbExtraBytes = &((BYTE*)call->pioRecvPci)[sizeof(SCARD_IO_REQUEST)];
+		WLog_DBG(TAG, "pioRecvPci: dwProtocol: %" PRIu32 " cbExtraBytes: %" PRIu32 "",
+		         call->pioRecvPci->dwProtocol, cbExtraBytes);
 
-	if (contextNdrPtr)
+		if (cbExtraBytes)
+		{
+			char* szExtraBytes = winpr_BinToHexString(pbExtraBytes, cbExtraBytes, TRUE);
+			WLog_DBG(TAG, "pbExtraBytes: %s", szExtraBytes);
+			free(szExtraBytes);
+		}
+	}
+	else
 	{
-		status = smartcard_ndr_read_u(s, &call->Common.CardIdentifier);
-		if (status != SCARD_S_SUCCESS)
-			return status;
+		WLog_DBG(TAG, "pioRecvPci: null");
 	}
-	smartcard_trace_read_cache_w_call(smartcard, call);
-	return SCARD_S_SUCCESS;
+
+	WLog_DBG(TAG, "fpbRecvBufferIsNULL: %" PRId32 " cbRecvLength: %" PRIu32 "",
+	         call->fpbRecvBufferIsNULL, call->cbRecvLength);
+	WLog_DBG(TAG, "}");
 }
 
-LONG smartcard_unpack_write_cache_a_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                         WriteCacheA_Call* call)
+LONG smartcard_pack_transmit_return(SMARTCARD_DEVICE* smartcard, wStream* s, Transmit_Return* ret)
 {
-	LONG status;
-	UINT32 mszNdrPtr;
-	UINT32 contextNdrPtr;
-	UINT32 pbDataNdrPtr;
-	UINT32 index = 0;
+	UINT32 cbExtraBytes;
+	BYTE* pbExtraBytes;
+	UINT32 pioRecvPciNdrPtr;
+	UINT32 pbRecvBufferNdrPtr;
+	UINT32 pbExtraBytesNdrPtr;
+	LONG error;
 
-	if (!smartcard_ndr_pointer_read(s, &index, &mszNdrPtr))
-		return ERROR_INVALID_DATA;
+	if (!ret->pbRecvBuffer)
+		ret->cbRecvLength = 0;
 
-	status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->Common.hContext), &index);
-	if (status != SCARD_S_SUCCESS)
-		return status;
+	pioRecvPciNdrPtr = (ret->pioRecvPci) ? 0x00020000 : 0;
+	pbRecvBufferNdrPtr = (ret->pbRecvBuffer) ? 0x00020004 : 0;
+	Stream_Write_UINT32(s, pioRecvPciNdrPtr);   /* pioRecvPciNdrPtr (4 bytes) */
+	Stream_Write_UINT32(s, ret->cbRecvLength);  /* cbRecvLength (4 bytes) */
+	Stream_Write_UINT32(s, pbRecvBufferNdrPtr); /* pbRecvBufferNdrPtr (4 bytes) */
 
-	if (!smartcard_ndr_pointer_read(s, &index, &contextNdrPtr))
-		return ERROR_INVALID_DATA;
+	if (pioRecvPciNdrPtr)
+	{
+		cbExtraBytes = (UINT32)(ret->pioRecvPci->cbPciLength - sizeof(SCARD_IO_REQUEST));
+		pbExtraBytes = &((BYTE*)ret->pioRecvPci)[sizeof(SCARD_IO_REQUEST)];
+		pbExtraBytesNdrPtr = cbExtraBytes ? 0x00020008 : 0;
 
-	if (Stream_GetRemainingLength(s) < 8)
-		return STATUS_BUFFER_TOO_SMALL;
+		if (!Stream_EnsureRemainingCapacity(s, cbExtraBytes + 16))
+		{
+			WLog_ERR(TAG, "Stream_EnsureRemainingCapacity failed!");
+			return SCARD_F_INTERNAL_ERROR;
+		}
 
-	Stream_Read_UINT32(s, call->Common.FreshnessCounter);
-	Stream_Read_UINT32(s, call->Common.cbDataLen);
+		Stream_Write_UINT32(s, ret->pioRecvPci->dwProtocol); /* dwProtocol (4 bytes) */
+		Stream_Write_UINT32(s, cbExtraBytes);                /* cbExtraBytes (4 bytes) */
+		Stream_Write_UINT32(s, pbExtraBytesNdrPtr);          /* pbExtraBytesNdrPtr (4 bytes) */
 
-	if (!smartcard_ndr_pointer_read(s, &index, &pbDataNdrPtr))
-		return ERROR_INVALID_DATA;
+		if (pbExtraBytesNdrPtr)
+		{
+			Stream_Write_UINT32(s, cbExtraBytes); /* Length (4 bytes) */
+			Stream_Write(s, pbExtraBytes, cbExtraBytes);
 
-	call->szLookupName = NULL;
-	if (mszNdrPtr)
-	{
-		status = smartcard_ndr_read_a(s, &call->szLookupName, NDR_PTR_FULL);
-		if (status != SCARD_S_SUCCESS)
-			return status;
+			if ((error = smartcard_pack_write_size_align(smartcard, s, cbExtraBytes, 4)))
+			{
+				WLog_ERR(TAG, "smartcard_pack_write_size_align failed with error %" PRId32 "!",
+				         error);
+				return error;
+			}
+		}
 	}
 
-	status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &call->Common.hContext);
-	if (status != SCARD_S_SUCCESS)
-		return status;
-
-	call->Common.CardIdentifier = NULL;
-	if (contextNdrPtr)
+	if (pbRecvBufferNdrPtr)
 	{
-		status = smartcard_ndr_read_u(s, &call->Common.CardIdentifier);
-		if (status != SCARD_S_SUCCESS)
-			return status;
-	}
+		if (!Stream_EnsureRemainingCapacity(s, ret->cbRecvLength + 16))
+		{
+			WLog_ERR(TAG, "Stream_EnsureRemainingCapacity failed!");
+			return SCARD_F_INTERNAL_ERROR;
+		}
 
-	call->Common.pbData = NULL;
-	if (pbDataNdrPtr)
-	{
-		status =
-		    smartcard_ndr_read(s, &call->Common.pbData, call->Common.cbDataLen, 1, NDR_PTR_SIMPLE);
-		if (status != SCARD_S_SUCCESS)
-			return status;
+		Stream_Write_UINT32(s, ret->cbRecvLength); /* pbRecvBufferNdrLen (4 bytes) */
+		Stream_Write(s, ret->pbRecvBuffer, ret->cbRecvLength);
+
+		if ((error = smartcard_pack_write_size_align(smartcard, s, ret->cbRecvLength, 4)))
+		{
+			WLog_ERR(TAG, "smartcard_pack_write_size_align failed with error %" PRId32 "!", error);
+			return error;
+		}
 	}
-	smartcard_trace_write_cache_a_call(smartcard, call);
+
 	return SCARD_S_SUCCESS;
 }
 
-LONG smartcard_unpack_write_cache_w_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                         WriteCacheW_Call* call)
+void smartcard_trace_transmit_return(SMARTCARD_DEVICE* smartcard, const Transmit_Return* ret)
 {
-	LONG status;
-	UINT32 mszNdrPtr;
-	UINT32 contextNdrPtr;
-	UINT32 pbDataNdrPtr;
-	UINT32 index = 0;
-
-	if (!smartcard_ndr_pointer_read(s, &index, &mszNdrPtr))
-		return ERROR_INVALID_DATA;
-
-	status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->Common.hContext), &index);
-	if (status != SCARD_S_SUCCESS)
-		return status;
+	UINT32 cbExtraBytes;
+	BYTE* pbExtraBytes;
+	WINPR_UNUSED(smartcard);
 
-	if (!smartcard_ndr_pointer_read(s, &index, &contextNdrPtr))
-		return ERROR_INVALID_DATA;
+	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
+		return;
 
-	if (Stream_GetRemainingLength(s) < 8)
-		return STATUS_BUFFER_TOO_SMALL;
-	Stream_Read_UINT32(s, call->Common.FreshnessCounter);
-	Stream_Read_UINT32(s, call->Common.cbDataLen);
+	WLog_DBG(TAG, "Transmit_Return {");
+	WLog_DBG(TAG, "ReturnCode: %s (0x%08" PRIX32 ")", SCardGetErrorString(ret->ReturnCode),
+	         ret->ReturnCode);
 
-	if (!smartcard_ndr_pointer_read(s, &index, &pbDataNdrPtr))
-		return ERROR_INVALID_DATA;
+	if (ret->pioRecvPci)
+	{
+		cbExtraBytes = (UINT32)(ret->pioRecvPci->cbPciLength - sizeof(SCARD_IO_REQUEST));
+		pbExtraBytes = &((BYTE*)ret->pioRecvPci)[sizeof(SCARD_IO_REQUEST)];
+		WLog_DBG(TAG, "pioRecvPci: dwProtocol: %" PRIu32 " cbExtraBytes: %" PRIu32 "",
+		         ret->pioRecvPci->dwProtocol, cbExtraBytes);
 
-	call->szLookupName = NULL;
-	if (mszNdrPtr)
+		if (cbExtraBytes)
+		{
+			char* szExtraBytes = winpr_BinToHexString(pbExtraBytes, cbExtraBytes, TRUE);
+			WLog_DBG(TAG, "pbExtraBytes: %s", szExtraBytes);
+			free(szExtraBytes);
+		}
+	}
+	else
 	{
-		status = smartcard_ndr_read_w(s, &call->szLookupName, NDR_PTR_FULL);
-		if (status != SCARD_S_SUCCESS)
-			return status;
+		WLog_DBG(TAG, "pioRecvPci: null");
 	}
 
-	status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &call->Common.hContext);
-	if (status != SCARD_S_SUCCESS)
-		return status;
+	WLog_DBG(TAG, "cbRecvLength: %" PRIu32 "", ret->cbRecvLength);
 
-	call->Common.CardIdentifier = NULL;
-	if (contextNdrPtr)
+	if (ret->pbRecvBuffer)
 	{
-		status = smartcard_ndr_read_u(s, &call->Common.CardIdentifier);
-		if (status != SCARD_S_SUCCESS)
-			return status;
+		char* szRecvBuffer = winpr_BinToHexString(ret->pbRecvBuffer, ret->cbRecvLength, TRUE);
+		WLog_DBG(TAG, "pbRecvBuffer: %s", szRecvBuffer);
+		free(szRecvBuffer);
 	}
-
-	call->Common.pbData = NULL;
-	if (pbDataNdrPtr)
+	else
 	{
-		status =
-		    smartcard_ndr_read(s, &call->Common.pbData, call->Common.cbDataLen, 1, NDR_PTR_SIMPLE);
-		if (status != SCARD_S_SUCCESS)
-			return status;
+		WLog_DBG(TAG, "pbRecvBuffer: null");
 	}
-	smartcard_trace_write_cache_w_call(smartcard, call);
-	return status;
+
+	WLog_DBG(TAG, "}");
 }
 
-LONG smartcard_unpack_get_transmit_count_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                              GetTransmitCount_Call* call)
+LONG smartcard_unpack_locate_cards_by_atr_a_call(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                                 LocateCardsByATRA_Call* call)
 {
+	UINT32 index;
+	UINT32 count;
 	LONG status;
-	UINT32 index = 0;
+	UINT32 offset;
+	UINT32 maxCount;
+	UINT32 szReaderNdrPtr;
+	UINT32 rgReaderStatesNdrPtr;
+	UINT32 rgAtrMasksNdrPtr;
+	LPSCARD_READERSTATEA readerState;
+	call->rgReaderStates = NULL;
 
-	status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext), &index);
-	if (status != SCARD_S_SUCCESS)
+	if ((status = smartcard_unpack_redir_scard_context(smartcard, s, &(call->hContext))))
+	{
+		WLog_ERR(TAG, "smartcard_unpack_redir_scard_context failed with error %" PRId32 "", status);
 		return status;
+	}
 
-	status = smartcard_unpack_redir_scard_handle(smartcard, s, &(call->hCard), &index);
-	if (status != SCARD_S_SUCCESS)
-		return status;
+	if (Stream_GetRemainingLength(s) < 16)
+	{
+		WLog_WARN(TAG, "LocateCardsByATRA_Call is too short: %" PRIuz "",
+		          Stream_GetRemainingLength(s));
+		return STATUS_BUFFER_TOO_SMALL;
+	}
+
+	Stream_Read_UINT32(s, call->cAtrs);
+	Stream_Read_UINT32(s, rgAtrMasksNdrPtr);
+	Stream_Read_UINT32(s, call->cReaders);       /* cReaders (4 bytes) */
+	Stream_Read_UINT32(s, rgReaderStatesNdrPtr); /* rgReaderStatesNdrPtr (4 bytes) */
 
 	if ((status = smartcard_unpack_redir_scard_context_ref(smartcard, s, &(call->hContext))))
 	{
@@ -3613,136 +2850,202 @@ LONG smartcard_unpack_get_transmit_count_call(SMARTCARD_DEVICE* smartcard, wStre
 		return status;
 	}
 
-	if ((status = smartcard_unpack_redir_scard_handle_ref(smartcard, s, &(call->hCard))))
-		WLog_ERR(TAG, "smartcard_unpack_redir_scard_handle_ref failed with error %" PRId32 "",
-		         status);
+	if (Stream_GetRemainingLength(s) < 4)
+	{
+		WLog_WARN(TAG, "LocateCardsByATRA_Call is too short: %" PRIuz "",
+		          Stream_GetRemainingLength(s));
+		return STATUS_BUFFER_TOO_SMALL;
+	}
 
-	smartcard_trace_get_transmit_count_call(smartcard, call);
-	return status;
-}
+	if ((rgAtrMasksNdrPtr && !call->cAtrs) || (!rgAtrMasksNdrPtr && call->cAtrs))
+	{
+		WLog_WARN(TAG,
+		          "LocateCardsByATRA_Call rgAtrMasksNdrPtr (0x%08" PRIX32
+		          ") and cAtrs (0x%08" PRIX32 ") inconsistency",
+		          rgAtrMasksNdrPtr, call->cAtrs);
+		return STATUS_INVALID_PARAMETER;
+	}
 
-LONG smartcard_unpack_get_reader_icon_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                           GetReaderIcon_Call* call)
-{
-	return smartcard_unpack_common_context_and_string_w(smartcard, s, &call->hContext,
-	                                                    &call->szReaderName);
-}
+	if (rgAtrMasksNdrPtr)
+	{
+		Stream_Read_UINT32(s, count);
 
-LONG smartcard_unpack_context_and_string_a_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                                ContextAndStringA_Call* call)
-{
-	return smartcard_unpack_common_context_and_string_a(smartcard, s, &call->hContext, &call->sz);
-}
+		if (count != call->cAtrs)
+		{
+			WLog_WARN(TAG,
+			          "LocateCardsByATRA_Call NdrCount (0x%08" PRIX32 ") and cAtrs (0x%08" PRIX32
+			          ") inconsistency",
+			          count, call->cAtrs);
+			return STATUS_INVALID_PARAMETER;
+		}
 
-LONG smartcard_unpack_context_and_string_w_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                                ContextAndStringW_Call* call)
-{
-	return smartcard_unpack_common_context_and_string_w(smartcard, s, &call->hContext, &call->sz);
-}
+		if (Stream_GetRemainingLength(s) < call->cAtrs)
+		{
+			WLog_WARN(TAG,
+			          "LocateCardsByATRA_Call is too short: Actual: %" PRIuz ", Expected: %" PRIu32
+			          "",
+			          Stream_GetRemainingLength(s), call->cAtrs);
+			return STATUS_BUFFER_TOO_SMALL;
+		}
 
-LONG smartcard_unpack_get_device_type_id_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                              GetDeviceTypeId_Call* call)
-{
-	return smartcard_unpack_common_context_and_string_w(smartcard, s, &call->hContext,
-	                                                    &call->szReaderName);
-}
+		call->rgAtrMasks = (LocateCards_ATRMask*)calloc(call->cAtrs, sizeof(LocateCards_ATRMask));
 
-LONG smartcard_pack_device_type_id_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                          const GetDeviceTypeId_Return* ret)
-{
-	smartcard_trace_device_type_id_return(smartcard, ret);
-	if (ret->ReturnCode != SCARD_S_SUCCESS)
-		return ret->ReturnCode;
+		if (!call->rgAtrMasks)
+		{
+			WLog_WARN(TAG, "LocateCardsByATRA_Call out of memory error (call->rgAtrMasks)");
+			return STATUS_NO_MEMORY;
+		}
+
+		for (index = 0; index < call->cAtrs; index++)
+		{
+			Stream_Read_UINT32(s, call->rgAtrMasks[index].cbAtr);
+			Stream_Read(s, call->rgAtrMasks[index].rgbAtr, 36);
+			Stream_Read(s, call->rgAtrMasks[index].rgbMask, 36);
+		}
+	}
+
+	Stream_Read_UINT32(s, count);
 
-	if (!Stream_EnsureRemainingCapacity(s, 4))
+	if (count != call->cReaders)
 	{
-		WLog_ERR(TAG, "Stream_EnsureRemainingCapacity failed!");
-		return SCARD_F_INTERNAL_ERROR;
+		WLog_WARN(TAG,
+		          "GetStatusChangeA_Call unexpected reader count: Actual: %" PRIu32
+		          ", Expected: %" PRIu32 "",
+		          count, call->cReaders);
+		return STATUS_INVALID_PARAMETER;
 	}
 
-	Stream_Write_UINT32(s, ret->dwDeviceId); /* cBytes (4 bytes) */
+	if (call->cReaders > 0)
+	{
+		call->rgReaderStates = (ReaderStateA*)calloc(call->cReaders, sizeof(ReaderStateA));
 
-	return SCARD_S_SUCCESS;
-}
+		if (!call->rgReaderStates)
+		{
+			WLog_WARN(TAG, "LocateCardsByATRA_Call out of memory error (call->rgReaderStates)");
+			return STATUS_NO_MEMORY;
+		}
 
-LONG smartcard_pack_locate_cards_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                        const LocateCards_Return* ret)
-{
-	DWORD index = 0;
-	smartcard_trace_locate_cards_return(smartcard, ret);
-	if (ret->ReturnCode != SCARD_S_SUCCESS)
-		return ret->ReturnCode;
+		for (index = 0; index < call->cReaders; index++)
+		{
+			readerState = (LPSCARD_READERSTATEA)&call->rgReaderStates[index];
 
-	if (!Stream_EnsureRemainingCapacity(s, 4))
-	{
-		WLog_ERR(TAG, "Stream_EnsureRemainingCapacity failed!");
-		return SCARD_F_INTERNAL_ERROR;
-	}
+			if (Stream_GetRemainingLength(s) < 52)
+			{
+				WLog_WARN(TAG, "LocateCardsByATRA_Call is too short: %" PRIuz "",
+				          Stream_GetRemainingLength(s));
+				return STATUS_BUFFER_TOO_SMALL;
+			}
 
-	Stream_Write_UINT32(s, ret->cReaders); /* cBytes (4 cbDataLen) */
-	if (!smartcard_ndr_pointer_write(s, &index, ret->cReaders))
-		return SCARD_E_NO_MEMORY;
+			Stream_Read_UINT32(s, szReaderNdrPtr);              /* szReaderNdrPtr (4 bytes) */
+			Stream_Read_UINT32(s, readerState->dwCurrentState); /* dwCurrentState (4 bytes) */
+			Stream_Read_UINT32(s, readerState->dwEventState);   /* dwEventState (4 bytes) */
+			Stream_Read_UINT32(s, readerState->cbAtr);          /* cbAtr (4 bytes) */
+			Stream_Read(s, readerState->rgbAtr, 32);            /* rgbAtr [0..32] (32 bytes) */
+			Stream_Seek(s, 4);                                  /* rgbAtr [32..36] (4 bytes) */
+		}
 
-	return smartcard_ndr_write_state(s, ret->rgReaderStates, ret->cReaders, NDR_PTR_SIMPLE);
-}
+		for (index = 0; index < call->cReaders; index++)
+		{
+			readerState = (LPSCARD_READERSTATEA)&call->rgReaderStates[index];
 
-LONG smartcard_pack_get_reader_icon_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                           const GetReaderIcon_Return* ret)
-{
-	DWORD index = 0;
-	smartcard_trace_get_reader_icon_return(smartcard, ret);
-	if (ret->ReturnCode != SCARD_S_SUCCESS)
-		return ret->ReturnCode;
+			if (Stream_GetRemainingLength(s) < 12)
+			{
+				WLog_WARN(TAG, "GetStatusChangeA_Call is too short: %" PRIuz "",
+				          Stream_GetRemainingLength(s));
+				return STATUS_BUFFER_TOO_SMALL;
+			}
 
-	if (!Stream_EnsureRemainingCapacity(s, 4))
-	{
-		WLog_ERR(TAG, "Stream_EnsureRemainingCapacity failed!");
-		return SCARD_F_INTERNAL_ERROR;
-	}
+			Stream_Read_UINT32(s, maxCount); /* NdrMaxCount (4 bytes) */
+			Stream_Read_UINT32(s, offset);   /* NdrOffset (4 bytes) */
+			Stream_Read_UINT32(s, count);    /* NdrActualCount (4 bytes) */
 
-	Stream_Write_UINT32(s, ret->cbDataLen); /* cBytes (4 cbDataLen) */
-	if (!smartcard_ndr_pointer_write(s, &index, ret->cbDataLen))
-		return SCARD_E_NO_MEMORY;
+			if (Stream_GetRemainingLength(s) < count)
+			{
+				WLog_WARN(TAG, "GetStatusChangeA_Call is too short: %" PRIuz "",
+				          Stream_GetRemainingLength(s));
+				return STATUS_BUFFER_TOO_SMALL;
+			}
 
-	return smartcard_ndr_write(s, ret->pbData, ret->cbDataLen, 1, NDR_PTR_SIMPLE);
-}
+			readerState->szReader = (LPCSTR)malloc(count + 1);
 
-LONG smartcard_pack_get_transmit_count_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                              const GetTransmitCount_Return* ret)
-{
-	smartcard_trace_get_transmit_count_return(smartcard, ret);
-	if (ret->ReturnCode != SCARD_S_SUCCESS)
-		return ret->ReturnCode;
+			if (!readerState->szReader)
+			{
+				WLog_WARN(TAG, "GetStatusChangeA_Call out of memory error (readerState->szReader)");
+				return STATUS_NO_MEMORY;
+			}
 
-	if (!Stream_EnsureRemainingCapacity(s, 4))
-	{
-		WLog_ERR(TAG, "Stream_EnsureRemainingCapacity failed!");
-		return SCARD_F_INTERNAL_ERROR;
-	}
+			Stream_Read(s, (void*)readerState->szReader, count);
+			smartcard_unpack_read_size_align(smartcard, s, count, 4);
+			((char*)readerState->szReader)[count] = '\0';
 
-	Stream_Write_UINT32(s, ret->cTransmitCount); /* cBytes (4 cbDataLen) */
+			if (!readerState->szReader)
+			{
+				WLog_WARN(TAG, "GetStatusChangeA_Call null reader name");
+				return STATUS_INVALID_PARAMETER;
+			}
+		}
+	}
 
 	return SCARD_S_SUCCESS;
 }
 
-LONG smartcard_pack_read_cache_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                      const ReadCache_Return* ret)
+void smartcard_trace_locate_cards_by_atr_a_call(SMARTCARD_DEVICE* smartcard,
+                                                const LocateCardsByATRA_Call* call)
 {
-	DWORD index = 0;
+	BYTE* pb;
+	UINT32 index;
+	char* szEventState;
+	char* szCurrentState;
+	char* rgbAtr;
+	LPSCARD_READERSTATEA readerState;
+	WINPR_UNUSED(smartcard);
 
-	smartcard_trace_read_cache_return(smartcard, ret);
-	if (ret->ReturnCode != SCARD_S_SUCCESS)
-		return ret->ReturnCode;
+	if (!WLog_IsLevelActive(WLog_Get(TAG), WLOG_DEBUG))
+		return;
 
-	if (!Stream_EnsureRemainingCapacity(s, 4))
+	WLog_DBG(TAG, "LocateCardsByATRA_Call {");
+	pb = (BYTE*)&(call->hContext.pbContext);
+
+	if (call->hContext.cbContext > 4)
 	{
-		WLog_ERR(TAG, "Stream_EnsureRemainingCapacity failed!");
-		return SCARD_F_INTERNAL_ERROR;
+		WLog_DBG(TAG,
+		         "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8
+		         "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], pb[4], pb[5], pb[6], pb[7], call->hContext.cbContext);
+	}
+	else
+	{
+		WLog_DBG(TAG, "hContext: 0x%02" PRIX8 "%02" PRIX8 "%02" PRIX8 "%02" PRIX8 " (%" PRIu32 ")",
+		         pb[0], pb[1], pb[2], pb[3], call->hContext.cbContext);
 	}
 
-	Stream_Write_UINT32(s, ret->cbDataLen); /* cBytes (4 cbDataLen) */
-	if (!smartcard_ndr_pointer_write(s, &index, ret->cbDataLen))
-		return SCARD_E_NO_MEMORY;
+	for (index = 0; index < call->cReaders; index++)
+	{
+		readerState = (LPSCARD_READERSTATEA)&call->rgReaderStates[index];
+		WLog_DBG(TAG, "\t[%" PRIu32 "]: szReader: %s cbAtr: %" PRIu32 "", index,
+		         readerState->szReader, readerState->cbAtr);
+		szCurrentState = SCardGetReaderStateString(readerState->dwCurrentState);
+		szEventState = SCardGetReaderStateString(readerState->dwEventState);
+		rgbAtr = winpr_BinToHexString((BYTE*)&(readerState->rgbAtr), readerState->cbAtr, FALSE);
+		WLog_DBG(TAG, "\t[%" PRIu32 "]: dwCurrentState: %s (0x%08" PRIX32 ")", index,
+		         szCurrentState, readerState->dwCurrentState);
+		WLog_DBG(TAG, "\t[%" PRIu32 "]: dwEventState: %s (0x%08" PRIX32 ")", index, szEventState,
+		         readerState->dwEventState);
+
+		if (rgbAtr)
+		{
+			WLog_DBG(TAG, "\t[%" PRIu32 "]: cbAtr: %" PRIu32 " rgbAtr: %s", index,
+			         readerState->cbAtr, rgbAtr);
+		}
+		else
+		{
+			WLog_DBG(TAG, "\t[%" PRIu32 "]: cbAtr: 0 rgbAtr: n/a", index);
+		}
+
+		free(szCurrentState);
+		free(szEventState);
+		free(rgbAtr);
+	}
 
-	return smartcard_ndr_write(s, ret->pbData, ret->cbDataLen, 1, NDR_PTR_SIMPLE);
+	WLog_DBG(TAG, "}");
 }
diff --git a/channels/smartcard/client/smartcard_pack.h b/channels/smartcard/client/smartcard_pack.h
index 85cb91efc..87709649b 100644
--- a/channels/smartcard/client/smartcard_pack.h
+++ b/channels/smartcard/client/smartcard_pack.h
@@ -5,8 +5,6 @@
  * Copyright 2014 Marc-Andre Moreau <marcandre.moreau@gmail.com>
  * Copyright 2015 Thincast Technologies GmbH
  * Copyright 2015 DI (FH) Martin Haimberger <martin.haimberger@thincast.com>
- * Copyright 2020 Armin Novak <armin.novak@thincast.com>
- * Copyright 2020 Thincast Technologies GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -28,8 +26,6 @@
 #include <winpr/stream.h>
 #include <winpr/smartcard.h>
 
-#pragma pack(push, 1)
-
 /* interface type_scard_pack */
 /* [unique][version][uuid] */
 
@@ -72,7 +68,7 @@ typedef struct _Context_Call
 typedef struct _ContextAndStringA_Call
 {
 	REDIR_SCARDCONTEXT hContext;
-	/* [string] */ char* sz;
+	/* [string] */ unsigned char* sz;
 } ContextAndStringA_Call;
 
 typedef struct _ContextAndStringW_Call
@@ -84,8 +80,8 @@ typedef struct _ContextAndStringW_Call
 typedef struct _ContextAndTwoStringA_Call
 {
 	REDIR_SCARDCONTEXT hContext;
-	/* [string] */ char* sz1;
-	/* [string] */ char* sz2;
+	/* [string] */ unsigned char* sz1;
+	/* [string] */ unsigned char* sz2;
 } ContextAndTwoStringA_Call;
 
 typedef struct _ContextAndTwoStringW_Call
@@ -122,6 +118,26 @@ typedef struct _ListReaders_Call
 	DWORD cchReaders;
 } ListReaders_Call;
 
+typedef struct _ReaderState_Common_Call
+{
+	DWORD dwCurrentState;
+	DWORD dwEventState;
+	/* [range] */ DWORD cbAtr;
+	BYTE rgbAtr[36];
+} ReaderState_Common_Call;
+
+typedef struct _ReaderStateA
+{
+	/* [string] */ unsigned char* szReader;
+	ReaderState_Common_Call Common;
+} ReaderStateA;
+
+typedef struct _ReaderStateW
+{
+	/* [string] */ WCHAR* szReader;
+	ReaderState_Common_Call Common;
+} ReaderStateW;
+
 typedef struct _ReaderState_Return
 {
 	DWORD dwCurrentState;
@@ -142,18 +158,18 @@ typedef struct _LocateCardsA_Call
 {
 	REDIR_SCARDCONTEXT hContext;
 	/* [range] */ DWORD cBytes;
-	/* [size_is] */ CHAR* mszCards;
+	/* [size_is] */ BYTE* mszCards;
 	/* [range] */ DWORD cReaders;
-	/* [size_is] */ LPSCARD_READERSTATEA rgReaderStates;
+	/* [size_is] */ ReaderStateA* rgReaderStates;
 } LocateCardsA_Call;
 
 typedef struct _LocateCardsW_Call
 {
 	REDIR_SCARDCONTEXT hContext;
 	/* [range] */ DWORD cBytes;
-	/* [size_is] */ WCHAR* mszCards;
+	/* [size_is] */ BYTE* mszCards;
 	/* [range] */ DWORD cReaders;
-	/* [size_is] */ LPSCARD_READERSTATEW rgReaderStates;
+	/* [size_is] */ ReaderStateW* rgReaderStates;
 } LocateCardsW_Call;
 
 typedef struct _LocateCards_ATRMask
@@ -169,7 +185,7 @@ typedef struct _LocateCardsByATRA_Call
 	/* [range] */ DWORD cAtrs;
 	/* [size_is] */ LocateCards_ATRMask* rgAtrMasks;
 	/* [range] */ DWORD cReaders;
-	/* [size_is] */ LPSCARD_READERSTATEA rgReaderStates;
+	/* [size_is] */ ReaderStateA* rgReaderStates;
 } LocateCardsByATRA_Call;
 
 typedef struct _LocateCardsByATRW_Call
@@ -178,7 +194,7 @@ typedef struct _LocateCardsByATRW_Call
 	/* [range] */ DWORD cAtrs;
 	/* [size_is] */ LocateCards_ATRMask* rgAtrMasks;
 	/* [range] */ DWORD cReaders;
-	/* [size_is] */ LPSCARD_READERSTATEW rgReaderStates;
+	/* [size_is] */ ReaderStateW* rgReaderStates;
 } LocateCardsByATRW_Call;
 
 typedef struct _GetStatusChange_Return
@@ -198,31 +214,6 @@ typedef struct _GetStatusChangeW_Call
 	/* [size_is] */ LPSCARD_READERSTATEW rgReaderStates;
 } GetStatusChangeW_Call;
 
-typedef struct _GetReaderIcon_Call
-{
-	REDIR_SCARDCONTEXT hContext;
-	WCHAR* szReaderName;
-} GetReaderIcon_Call;
-
-typedef struct _GetReaderIcon_Return
-{
-	LONG ReturnCode;
-	ULONG cbDataLen;
-	BYTE* pbData;
-} GetReaderIcon_Return;
-
-typedef struct _GetDeviceTypeId_Call
-{
-	REDIR_SCARDCONTEXT hContext;
-	WCHAR* szReaderName;
-} GetDeviceTypeId_Call;
-
-typedef struct _GetDeviceTypeId_Return
-{
-	LONG ReturnCode;
-	ULONG dwDeviceId;
-} GetDeviceTypeId_Return;
-
 typedef struct _Connect_Common
 {
 	REDIR_SCARDCONTEXT hContext;
@@ -232,7 +223,7 @@ typedef struct _Connect_Common
 
 typedef struct _ConnectA_Call
 {
-	/* [string] */ CHAR* szReader;
+	/* [string] */ unsigned char* szReader;
 	Connect_Common Common;
 } ConnectA_Call;
 
@@ -402,7 +393,7 @@ typedef struct _ReadCache_Common
 
 typedef struct _ReadCacheA_Call
 {
-	/* [string] */ char* szLookupName;
+	/* [string] */ unsigned char* szLookupName;
 	ReadCache_Common Common;
 } ReadCacheA_Call;
 
@@ -430,7 +421,7 @@ typedef struct _WriteCache_Common
 
 typedef struct _WriteCacheA_Call
 {
-	/* [string] */ char* szLookupName;
+	/* [string] */ unsigned char* szLookupName;
 	WriteCache_Common Common;
 } WriteCacheA_Call;
 
@@ -440,16 +431,14 @@ typedef struct _WriteCacheW_Call
 	WriteCache_Common Common;
 } WriteCacheW_Call;
 
-#pragma pack(pop)
-
 #define SMARTCARD_COMMON_TYPE_HEADER_LENGTH 8
 #define SMARTCARD_PRIVATE_TYPE_HEADER_LENGTH 8
 
 #include "smartcard_main.h"
 
-LONG smartcard_pack_write_size_align(SMARTCARD_DEVICE* smartcard, wStream* s, size_t size,
+LONG smartcard_pack_write_size_align(SMARTCARD_DEVICE* smartcard, wStream* s, UINT32 size,
                                      UINT32 alignment);
-LONG smartcard_unpack_read_size_align(SMARTCARD_DEVICE* smartcard, wStream* s, size_t size,
+LONG smartcard_unpack_read_size_align(SMARTCARD_DEVICE* smartcard, wStream* s, UINT32 size,
                                       UINT32 alignment);
 
 SCARDCONTEXT smartcard_scard_context_native_from_redir(SMARTCARD_DEVICE* smartcard,
@@ -469,141 +458,134 @@ LONG smartcard_unpack_private_type_header(SMARTCARD_DEVICE* smartcard, wStream*
 void smartcard_pack_private_type_header(SMARTCARD_DEVICE* smartcard, wStream* s,
                                         UINT32 objectBufferLength);
 
+LONG smartcard_unpack_redir_scard_context(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                          REDIR_SCARDCONTEXT* context);
+LONG smartcard_pack_redir_scard_context(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                        REDIR_SCARDCONTEXT* context);
+
+LONG smartcard_unpack_redir_scard_context_ref(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                              REDIR_SCARDCONTEXT* context);
+LONG smartcard_pack_redir_scard_context_ref(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                            REDIR_SCARDCONTEXT* context);
+
+LONG smartcard_unpack_redir_scard_handle(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                         REDIR_SCARDHANDLE* handle);
+LONG smartcard_pack_redir_scard_handle(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                       REDIR_SCARDHANDLE* handle);
+
+LONG smartcard_unpack_redir_scard_handle_ref(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                             REDIR_SCARDHANDLE* handle);
+LONG smartcard_pack_redir_scard_handle_ref(SMARTCARD_DEVICE* smartcard, wStream* s,
+                                           REDIR_SCARDHANDLE* handle);
+
 LONG smartcard_unpack_establish_context_call(SMARTCARD_DEVICE* smartcard, wStream* s,
                                              EstablishContext_Call* call);
+void smartcard_trace_establish_context_call(SMARTCARD_DEVICE* smartcard,
+                                            const EstablishContext_Call* call);
 
 LONG smartcard_pack_establish_context_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                             const EstablishContext_Return* ret);
+                                             EstablishContext_Return* ret);
+void smartcard_trace_establish_context_return(SMARTCARD_DEVICE* smartcard,
+                                              const EstablishContext_Return* ret);
 
-LONG smartcard_unpack_context_call(SMARTCARD_DEVICE* smartcard, wStream* s, Context_Call* call,
-                                   const char* name);
+LONG smartcard_unpack_context_call(SMARTCARD_DEVICE* smartcard, wStream* s, Context_Call* call);
+void smartcard_trace_context_call(SMARTCARD_DEVICE* smartcard, const Context_Call* call,
+                                  const char* name);
 
 void smartcard_trace_long_return(SMARTCARD_DEVICE* smartcard, const Long_Return* ret,
                                  const char* name);
 
 LONG smartcard_unpack_list_reader_groups_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                              ListReaderGroups_Call* call, BOOL unicode);
+                                              ListReaderGroups_Call* call);
+void smartcard_trace_list_reader_groups_call(SMARTCARD_DEVICE* smartcard,
+                                             const ListReaderGroups_Call* call, BOOL unicode);
 
 LONG smartcard_pack_list_reader_groups_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                              const ListReaderGroups_Return* ret, BOOL unicode);
+                                              ListReaderGroups_Return* ret);
+void smartcard_trace_list_reader_groups_return(SMARTCARD_DEVICE* smartcard,
+                                               const ListReaderGroups_Return* ret, BOOL unicode);
 
 LONG smartcard_unpack_list_readers_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                        ListReaders_Call* call, BOOL unicode);
+                                        ListReaders_Call* call);
+void smartcard_trace_list_readers_call(SMARTCARD_DEVICE* smartcard, const ListReaders_Call* call,
+                                       BOOL unicode);
 
 LONG smartcard_pack_list_readers_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                        const ListReaders_Return* ret, BOOL unicode);
-
-LONG smartcard_unpack_context_and_two_strings_a_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                                     ContextAndTwoStringA_Call* call);
-
-LONG smartcard_unpack_context_and_two_strings_w_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                                     ContextAndTwoStringW_Call* call);
-
-LONG smartcard_unpack_context_and_string_a_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                                ContextAndStringA_Call* call);
-
-LONG smartcard_unpack_context_and_string_w_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                                ContextAndStringW_Call* call);
-
-LONG smartcard_unpack_locate_cards_a_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                          LocateCardsA_Call* call);
-
-LONG smartcard_pack_locate_cards_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                        const LocateCards_Return* ret);
-
-LONG smartcard_unpack_locate_cards_w_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                          LocateCardsW_Call* call);
-
-LONG smartcard_pack_locate_cards_w_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                          const LocateCardsW_Call* ret);
+                                        ListReaders_Return* ret);
+void smartcard_trace_list_readers_return(SMARTCARD_DEVICE* smartcard, const ListReaders_Return* ret,
+                                         BOOL unicode);
 
 LONG smartcard_unpack_connect_a_call(SMARTCARD_DEVICE* smartcard, wStream* s, ConnectA_Call* call);
+void smartcard_trace_connect_a_call(SMARTCARD_DEVICE* smartcard, const ConnectA_Call* call);
 
 LONG smartcard_unpack_connect_w_call(SMARTCARD_DEVICE* smartcard, wStream* s, ConnectW_Call* call);
+void smartcard_trace_connect_w_call(SMARTCARD_DEVICE* smartcard, const ConnectW_Call* call);
 
-LONG smartcard_pack_connect_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                   const Connect_Return* ret);
+LONG smartcard_pack_connect_return(SMARTCARD_DEVICE* smartcard, wStream* s, Connect_Return* ret);
+void smartcard_trace_connect_return(SMARTCARD_DEVICE* smartcard, const Connect_Return* ret);
 
 LONG smartcard_unpack_reconnect_call(SMARTCARD_DEVICE* smartcard, wStream* s, Reconnect_Call* call);
+void smartcard_trace_reconnect_call(SMARTCARD_DEVICE* smartcard, const Reconnect_Call* call);
 
 LONG smartcard_pack_reconnect_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                     const Reconnect_Return* ret);
+                                     Reconnect_Return* ret);
+void smartcard_trace_reconnect_return(SMARTCARD_DEVICE* smartcard, const Reconnect_Return* ret);
 
 LONG smartcard_unpack_hcard_and_disposition_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                                 HCardAndDisposition_Call* call, const char* name);
+                                                 HCardAndDisposition_Call* call);
+void smartcard_trace_hcard_and_disposition_call(SMARTCARD_DEVICE* smartcard,
+                                                HCardAndDisposition_Call* call, const char* name);
 
 LONG smartcard_unpack_get_status_change_a_call(SMARTCARD_DEVICE* smartcard, wStream* s,
                                                GetStatusChangeA_Call* call);
+void smartcard_trace_get_status_change_a_call(SMARTCARD_DEVICE* smartcard,
+                                              const GetStatusChangeA_Call* call);
 
 LONG smartcard_unpack_get_status_change_w_call(SMARTCARD_DEVICE* smartcard, wStream* s,
                                                GetStatusChangeW_Call* call);
+void smartcard_trace_get_status_change_w_call(SMARTCARD_DEVICE* smartcard,
+                                              GetStatusChangeW_Call* call);
 
 LONG smartcard_pack_get_status_change_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                             const GetStatusChange_Return* ret, BOOL unicode);
+                                             GetStatusChange_Return* ret);
+void smartcard_trace_get_status_change_return(SMARTCARD_DEVICE* smartcard,
+                                              const GetStatusChange_Return* ret, BOOL unicode);
 
 LONG smartcard_unpack_state_call(SMARTCARD_DEVICE* smartcard, wStream* s, State_Call* call);
-LONG smartcard_pack_state_return(SMARTCARD_DEVICE* smartcard, wStream* s, const State_Return* ret);
+LONG smartcard_pack_state_return(SMARTCARD_DEVICE* smartcard, wStream* s, State_Return* ret);
 
-LONG smartcard_unpack_status_call(SMARTCARD_DEVICE* smartcard, wStream* s, Status_Call* call,
-                                  BOOL unicode);
+LONG smartcard_unpack_status_call(SMARTCARD_DEVICE* smartcard, wStream* s, Status_Call* call);
+void smartcard_trace_status_call(SMARTCARD_DEVICE* smartcard, const Status_Call* call,
+                                 BOOL unicode);
 
-LONG smartcard_pack_status_return(SMARTCARD_DEVICE* smartcard, wStream* s, const Status_Return* ret,
-                                  BOOL unicode);
+LONG smartcard_pack_status_return(SMARTCARD_DEVICE* smartcard, wStream* s, Status_Return* ret);
+void smartcard_trace_status_return(SMARTCARD_DEVICE* smartcard, const Status_Return* ret,
+                                   BOOL unicode);
 
 LONG smartcard_unpack_get_attrib_call(SMARTCARD_DEVICE* smartcard, wStream* s,
                                       GetAttrib_Call* call);
+void smartcard_trace_get_attrib_call(SMARTCARD_DEVICE* smartcard, GetAttrib_Call* call);
 
 LONG smartcard_pack_get_attrib_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                      const GetAttrib_Return* ret, DWORD dwAttrId);
-
-LONG smartcard_unpack_set_attrib_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                      SetAttrib_Call* call);
+                                      GetAttrib_Return* ret);
+void smartcard_trace_get_attrib_return(SMARTCARD_DEVICE* smartcard, const GetAttrib_Return* ret,
+                                       DWORD dwAttrId);
 
 LONG smartcard_unpack_control_call(SMARTCARD_DEVICE* smartcard, wStream* s, Control_Call* call);
+void smartcard_trace_control_call(SMARTCARD_DEVICE* smartcard, const Control_Call* call);
 
-LONG smartcard_pack_control_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                   const Control_Return* ret);
+LONG smartcard_pack_control_return(SMARTCARD_DEVICE* smartcard, wStream* s, Control_Return* ret);
+void smartcard_trace_control_return(SMARTCARD_DEVICE* smartcard, const Control_Return* ret);
 
 LONG smartcard_unpack_transmit_call(SMARTCARD_DEVICE* smartcard, wStream* s, Transmit_Call* call);
+void smartcard_trace_transmit_call(SMARTCARD_DEVICE* smartcard, const Transmit_Call* call);
 
-LONG smartcard_pack_transmit_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                    const Transmit_Return* ret);
+LONG smartcard_pack_transmit_return(SMARTCARD_DEVICE* smartcard, wStream* s, Transmit_Return* ret);
+void smartcard_trace_transmit_return(SMARTCARD_DEVICE* smartcard, const Transmit_Return* ret);
 
 LONG smartcard_unpack_locate_cards_by_atr_a_call(SMARTCARD_DEVICE* smartcard, wStream* s,
                                                  LocateCardsByATRA_Call* call);
-
-LONG smartcard_unpack_locate_cards_by_atr_w_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                                 LocateCardsByATRW_Call* call);
-
-LONG smartcard_unpack_read_cache_a_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                        ReadCacheA_Call* call);
-
-LONG smartcard_unpack_read_cache_w_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                        ReadCacheW_Call* call);
-
-LONG smartcard_pack_read_cache_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                      const ReadCache_Return* ret);
-
-LONG smartcard_unpack_write_cache_a_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                         WriteCacheA_Call* call);
-
-LONG smartcard_unpack_write_cache_w_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                         WriteCacheW_Call* call);
-
-LONG smartcard_unpack_get_transmit_count_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                              GetTransmitCount_Call* call);
-LONG smartcard_pack_get_transmit_count_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                              const GetTransmitCount_Return* call);
-
-LONG smartcard_unpack_get_reader_icon_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                           GetReaderIcon_Call* call);
-LONG smartcard_pack_get_reader_icon_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                           const GetReaderIcon_Return* ret);
-
-LONG smartcard_unpack_get_device_type_id_call(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                              GetDeviceTypeId_Call* call);
-
-LONG smartcard_pack_device_type_id_return(SMARTCARD_DEVICE* smartcard, wStream* s,
-                                          const GetDeviceTypeId_Return* ret);
+void smartcard_trace_locate_cards_by_atr_a_call(SMARTCARD_DEVICE* smartcard,
+                                                const LocateCardsByATRA_Call* call);
 
 #endif /* FREERDP_CHANNEL_SMARTCARD_CLIENT_PACK_H */
